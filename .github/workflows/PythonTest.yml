# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: PythonTest


on: [workflow_dispatch, workflow_call]


jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    env:
      SIRIUS_USER: ${{ secrets.SIRIUS_USER }}
      SIRIUS_PW: ${{ secrets.SIRIUS_PW }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        pip install git+https://github.com/LukasScholz/sirius-client-openAPI#subdirectory=client-api_python/generated
        pip install -e ./client-api_python/generated
        echo "Finished Installing"
    - name: Cache Sirius Release
      id: cache-sirius
      uses: actions/cache@v3
      with:
        path: .updater/api/sirius
        key: sirius
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./client-api_python --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./client-api_python --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Rest Api
      run: |
        bash .updater/api/sirius/bin/sirius REST -p 8080 -s &
    - name: Wait for Api to start
      run: |
        while ! nc -z localhost 8080; do sleep 0.1; done
    - name: Test with unittest
      run: |
        mkdir .updater/api/temp
        cd .updater/clientTests/PythonTests
        bash PythonTestAutoFix.sh
        cd ./../../../client-api_python/generated/test
        for x in $(dir); do echo Testing $x; if ! python3 $x; then exit 1; fi; done
    - name: checking for empty functions in tests
      run: |
        cd .updater/clientTests/PythonTests/test
        for x in $(ls ./../../../../client-api_python/generated/test); do if [ -f "$x" ] || [ -f "./models/$x" ] ; then : ; else echo "$(tput bold)$x$(tput sgr0) is potentially an unmodified test file!";fi; done
        echo No additional files detected
