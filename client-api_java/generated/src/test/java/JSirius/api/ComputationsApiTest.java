/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package JSirius.api;

import JSirius.model.JobId;
import JSirius.model.JobSubmission;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ComputationsApi
 */
@Ignore
public class ComputationsApiTest {

    private final ComputationsApi api = new ComputationsApi();

    /**
     * Delete job.
     *
     * Delete job. Specify how to behave for running jobs.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws Exception {
        String projectId = null;
        String jobId = null;
        Boolean cancelIfRunning = null;
        Boolean awaitDeletion = null;
        api.deleteJob(projectId, jobId, cancelIfRunning, awaitDeletion);

        // TODO: test validations
    }
    /**
     * Delete job configuration with given name.
     *
     * Delete job configuration with given name.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteJobConfigTest() throws Exception {
        String name = null;
        api.deleteJobConfig(name);

        // TODO: test validations
    }
    /**
     * Request default job configuration
     *
     * Request default job configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDefaultJobConfigTest() throws Exception {
        Boolean includeConfigMap = null;
        JobSubmission response = api.getDefaultJobConfig(includeConfigMap);

        // TODO: test validations
    }
    /**
     * Get job information and its current state and progress (if available).
     *
     * Get job information and its current state and progress (if available).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws Exception {
        String projectId = null;
        String jobId = null;
        Boolean includeState = null;
        Boolean includeCommand = null;
        Boolean includeAffectedCompounds = null;
        JobId response = api.getJob(projectId, jobId, includeState, includeCommand, includeAffectedCompounds);

        // TODO: test validations
    }
    /**
     * Request job configuration with given name.
     *
     * Request job configuration with given name.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobConfigTest() throws Exception {
        String name = null;
        Boolean includeConfigMap = null;
        JobSubmission response = api.getJobConfig(name, includeConfigMap);

        // TODO: test validations
    }
    /**
     * Request all available job configurations
     *
     * Request all available job configurations
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobConfigsTest() throws Exception {
        Boolean includeConfigMap = null;
        List<JobSubmission> response = api.getJobConfigs(includeConfigMap);

        // TODO: test validations
    }
    /**
     * Get job information and its current state and progress (if available).
     *
     * Get job information and its current state and progress (if available).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobsTest() throws Exception {
        String projectId = null;
        Boolean includeState = null;
        Boolean includeCommand = null;
        Boolean includeAffectedCompounds = null;
        List<JobId> response = api.getJobs(projectId, includeState, includeCommand, includeAffectedCompounds);

        // TODO: test validations
    }
    /**
     * Add new job configuration with given name.
     *
     * Add new job configuration with given name.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobConfigTest() throws Exception {
        JobSubmission body = null;
        String name = null;
        Boolean overrideExisting = null;
        String response = api.postJobConfig(body, name, overrideExisting);

        // TODO: test validations
    }
    /**
     * Start computation for given compounds and with given parameters.
     *
     * Start computation for given compounds and with given parameters.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void startJobTest() throws Exception {
        JobSubmission body = null;
        String projectId = null;
        Boolean includeState = null;
        Boolean includeCommand = null;
        Boolean includeAffectedCompounds = null;
        JobId response = api.startJob(body, projectId, includeState, includeCommand, includeAffectedCompounds);

        // TODO: test validations
    }
    /**
     * Start computation for given compounds and with parameters from a stored job-config.
     *
     * Start computation for given compounds and with parameters from a stored job-config.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void startJobFromConfigTest() throws Exception {
        List<String> body = null;
        String jobConfigName = null;
        String projectId = null;
        Boolean recompute = null;
        Boolean includeState = null;
        Boolean includeCommand = null;
        Boolean includeAffectedCompounds = null;
        JobId response = api.startJobFromConfig(body, jobConfigName, projectId, recompute, includeState, includeCommand, includeAffectedCompounds);

        // TODO: test validations
    }
}
