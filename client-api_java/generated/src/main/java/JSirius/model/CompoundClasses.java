/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * The version of the OpenAPI document: v0.9 on SIRIUS 5.6.4-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package JSirius.model;

import java.util.Objects;
import java.util.Arrays;
import JSirius.model.CompoundClass;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import JSirius.JSON;

/**
 * Container class that holds the best matching compound class for different levels of each ontology for a  certain compound/feature/predicted fingerprint.
 */
@ApiModel(description = "Container class that holds the best matching compound class for different levels of each ontology for a  certain compound/feature/predicted fingerprint.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-28T16:46:58.250763Z[Etc/UTC]")
public class CompoundClasses {
  public static final String SERIALIZED_NAME_NPC_PATHWAY = "npcPathway";
  @SerializedName(SERIALIZED_NAME_NPC_PATHWAY)
  private CompoundClass npcPathway;

  public static final String SERIALIZED_NAME_NPC_SUPERCLASS = "npcSuperclass";
  @SerializedName(SERIALIZED_NAME_NPC_SUPERCLASS)
  private CompoundClass npcSuperclass;

  public static final String SERIALIZED_NAME_NPC_CLASS = "npcClass";
  @SerializedName(SERIALIZED_NAME_NPC_CLASS)
  private CompoundClass npcClass;

  public static final String SERIALIZED_NAME_CLASSY_FIRE_MOST_SPECIFIC = "classyFireMostSpecific";
  @SerializedName(SERIALIZED_NAME_CLASSY_FIRE_MOST_SPECIFIC)
  private CompoundClass classyFireMostSpecific;

  public static final String SERIALIZED_NAME_CLASSY_FIRE_LEVEL5 = "classyFireLevel5";
  @SerializedName(SERIALIZED_NAME_CLASSY_FIRE_LEVEL5)
  private CompoundClass classyFireLevel5;

  public static final String SERIALIZED_NAME_CLASSY_FIRE_CLASS = "classyFireClass";
  @SerializedName(SERIALIZED_NAME_CLASSY_FIRE_CLASS)
  private CompoundClass classyFireClass;

  public static final String SERIALIZED_NAME_CLASSY_FIRE_SUB_CLASS = "classyFireSubClass";
  @SerializedName(SERIALIZED_NAME_CLASSY_FIRE_SUB_CLASS)
  private CompoundClass classyFireSubClass;

  public static final String SERIALIZED_NAME_CLASSY_FIRE_SUPER_CLASS = "classyFireSuperClass";
  @SerializedName(SERIALIZED_NAME_CLASSY_FIRE_SUPER_CLASS)
  private CompoundClass classyFireSuperClass;

  public CompoundClasses() {
  }

  public CompoundClasses npcPathway(CompoundClass npcPathway) {
    
    this.npcPathway = npcPathway;
    return this;
  }

   /**
   * Get npcPathway
   * @return npcPathway
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getNpcPathway() {
    return npcPathway;
  }


  public void setNpcPathway(CompoundClass npcPathway) {
    this.npcPathway = npcPathway;
  }


  public CompoundClasses npcSuperclass(CompoundClass npcSuperclass) {
    
    this.npcSuperclass = npcSuperclass;
    return this;
  }

   /**
   * Get npcSuperclass
   * @return npcSuperclass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getNpcSuperclass() {
    return npcSuperclass;
  }


  public void setNpcSuperclass(CompoundClass npcSuperclass) {
    this.npcSuperclass = npcSuperclass;
  }


  public CompoundClasses npcClass(CompoundClass npcClass) {
    
    this.npcClass = npcClass;
    return this;
  }

   /**
   * Get npcClass
   * @return npcClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getNpcClass() {
    return npcClass;
  }


  public void setNpcClass(CompoundClass npcClass) {
    this.npcClass = npcClass;
  }


  public CompoundClasses classyFireMostSpecific(CompoundClass classyFireMostSpecific) {
    
    this.classyFireMostSpecific = classyFireMostSpecific;
    return this;
  }

   /**
   * Get classyFireMostSpecific
   * @return classyFireMostSpecific
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getClassyFireMostSpecific() {
    return classyFireMostSpecific;
  }


  public void setClassyFireMostSpecific(CompoundClass classyFireMostSpecific) {
    this.classyFireMostSpecific = classyFireMostSpecific;
  }


  public CompoundClasses classyFireLevel5(CompoundClass classyFireLevel5) {
    
    this.classyFireLevel5 = classyFireLevel5;
    return this;
  }

   /**
   * Get classyFireLevel5
   * @return classyFireLevel5
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getClassyFireLevel5() {
    return classyFireLevel5;
  }


  public void setClassyFireLevel5(CompoundClass classyFireLevel5) {
    this.classyFireLevel5 = classyFireLevel5;
  }


  public CompoundClasses classyFireClass(CompoundClass classyFireClass) {
    
    this.classyFireClass = classyFireClass;
    return this;
  }

   /**
   * Get classyFireClass
   * @return classyFireClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getClassyFireClass() {
    return classyFireClass;
  }


  public void setClassyFireClass(CompoundClass classyFireClass) {
    this.classyFireClass = classyFireClass;
  }


  public CompoundClasses classyFireSubClass(CompoundClass classyFireSubClass) {
    
    this.classyFireSubClass = classyFireSubClass;
    return this;
  }

   /**
   * Get classyFireSubClass
   * @return classyFireSubClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getClassyFireSubClass() {
    return classyFireSubClass;
  }


  public void setClassyFireSubClass(CompoundClass classyFireSubClass) {
    this.classyFireSubClass = classyFireSubClass;
  }


  public CompoundClasses classyFireSuperClass(CompoundClass classyFireSuperClass) {
    
    this.classyFireSuperClass = classyFireSuperClass;
    return this;
  }

   /**
   * Get classyFireSuperClass
   * @return classyFireSuperClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompoundClass getClassyFireSuperClass() {
    return classyFireSuperClass;
  }


  public void setClassyFireSuperClass(CompoundClass classyFireSuperClass) {
    this.classyFireSuperClass = classyFireSuperClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompoundClasses compoundClasses = (CompoundClasses) o;
    return Objects.equals(this.npcPathway, compoundClasses.npcPathway) &&
        Objects.equals(this.npcSuperclass, compoundClasses.npcSuperclass) &&
        Objects.equals(this.npcClass, compoundClasses.npcClass) &&
        Objects.equals(this.classyFireMostSpecific, compoundClasses.classyFireMostSpecific) &&
        Objects.equals(this.classyFireLevel5, compoundClasses.classyFireLevel5) &&
        Objects.equals(this.classyFireClass, compoundClasses.classyFireClass) &&
        Objects.equals(this.classyFireSubClass, compoundClasses.classyFireSubClass) &&
        Objects.equals(this.classyFireSuperClass, compoundClasses.classyFireSuperClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(npcPathway, npcSuperclass, npcClass, classyFireMostSpecific, classyFireLevel5, classyFireClass, classyFireSubClass, classyFireSuperClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompoundClasses {\n");
    sb.append("    npcPathway: ").append(toIndentedString(npcPathway)).append("\n");
    sb.append("    npcSuperclass: ").append(toIndentedString(npcSuperclass)).append("\n");
    sb.append("    npcClass: ").append(toIndentedString(npcClass)).append("\n");
    sb.append("    classyFireMostSpecific: ").append(toIndentedString(classyFireMostSpecific)).append("\n");
    sb.append("    classyFireLevel5: ").append(toIndentedString(classyFireLevel5)).append("\n");
    sb.append("    classyFireClass: ").append(toIndentedString(classyFireClass)).append("\n");
    sb.append("    classyFireSubClass: ").append(toIndentedString(classyFireSubClass)).append("\n");
    sb.append("    classyFireSuperClass: ").append(toIndentedString(classyFireSuperClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("npcPathway");
    openapiFields.add("npcSuperclass");
    openapiFields.add("npcClass");
    openapiFields.add("classyFireMostSpecific");
    openapiFields.add("classyFireLevel5");
    openapiFields.add("classyFireClass");
    openapiFields.add("classyFireSubClass");
    openapiFields.add("classyFireSuperClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompoundClasses
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompoundClasses.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompoundClasses is not found in the empty JSON string", CompoundClasses.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CompoundClasses.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompoundClasses` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `npcPathway`
      if (jsonObj.get("npcPathway") != null && !jsonObj.get("npcPathway").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("npcPathway"));
      }
      // validate the optional field `npcSuperclass`
      if (jsonObj.get("npcSuperclass") != null && !jsonObj.get("npcSuperclass").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("npcSuperclass"));
      }
      // validate the optional field `npcClass`
      if (jsonObj.get("npcClass") != null && !jsonObj.get("npcClass").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("npcClass"));
      }
      // validate the optional field `classyFireMostSpecific`
      if (jsonObj.get("classyFireMostSpecific") != null && !jsonObj.get("classyFireMostSpecific").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("classyFireMostSpecific"));
      }
      // validate the optional field `classyFireLevel5`
      if (jsonObj.get("classyFireLevel5") != null && !jsonObj.get("classyFireLevel5").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("classyFireLevel5"));
      }
      // validate the optional field `classyFireClass`
      if (jsonObj.get("classyFireClass") != null && !jsonObj.get("classyFireClass").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("classyFireClass"));
      }
      // validate the optional field `classyFireSubClass`
      if (jsonObj.get("classyFireSubClass") != null && !jsonObj.get("classyFireSubClass").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("classyFireSubClass"));
      }
      // validate the optional field `classyFireSuperClass`
      if (jsonObj.get("classyFireSuperClass") != null && !jsonObj.get("classyFireSuperClass").isJsonNull()) {
        CompoundClass.validateJsonObject(jsonObj.getAsJsonObject("classyFireSuperClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompoundClasses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompoundClasses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompoundClasses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompoundClasses.class));

       return (TypeAdapter<T>) new TypeAdapter<CompoundClasses>() {
           @Override
           public void write(JsonWriter out, CompoundClasses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompoundClasses read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompoundClasses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompoundClasses
  * @throws IOException if the JSON string is invalid with respect to CompoundClasses
  */
  public static CompoundClasses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompoundClasses.class);
  }

 /**
  * Convert an instance of CompoundClasses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

