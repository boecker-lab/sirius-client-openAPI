/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * The version of the OpenAPI document: v0.9 on SIRIUS 6.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package JSirius.model;

import java.util.Objects;
import java.util.Arrays;
import JSirius.model.LCMSQualityCheckResult;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import JSirius.JSON;

/**
 * This quality information is available for LC-MS data and includes quality measures for  - the chromatographic peak  - isotope peaks  - detected adducts  - MS/MS peaks  This information is the same as provided in the LCMS-view in the GUI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LCMSFeatureSummaryQualityData {
  public static final String SERIALIZED_NAME_PEAK_QUALITY_RESULT = "peakQualityResult";
  @SerializedName(SERIALIZED_NAME_PEAK_QUALITY_RESULT)
  private LCMSQualityCheckResult peakQualityResult;

  public static final String SERIALIZED_NAME_ISOTOPE_QUALITY_RESULT = "isotopeQualityResult";
  @SerializedName(SERIALIZED_NAME_ISOTOPE_QUALITY_RESULT)
  private LCMSQualityCheckResult isotopeQualityResult;

  public static final String SERIALIZED_NAME_ADDUCT_QUALITY_RESULT = "adductQualityResult";
  @SerializedName(SERIALIZED_NAME_ADDUCT_QUALITY_RESULT)
  private LCMSQualityCheckResult adductQualityResult;

  public static final String SERIALIZED_NAME_MS2_QUALITY_RESULT = "ms2QualityResult";
  @SerializedName(SERIALIZED_NAME_MS2_QUALITY_RESULT)
  private LCMSQualityCheckResult ms2QualityResult;

  public LCMSFeatureSummaryQualityData() {
  }

  public LCMSFeatureSummaryQualityData peakQualityResult(LCMSQualityCheckResult peakQualityResult) {
    
    this.peakQualityResult = peakQualityResult;
    return this;
  }

   /**
   * Get peakQualityResult
   * @return peakQualityResult
  **/
  @javax.annotation.Nullable

  public LCMSQualityCheckResult getPeakQualityResult() {
    return peakQualityResult;
  }


  public void setPeakQualityResult(LCMSQualityCheckResult peakQualityResult) {
    this.peakQualityResult = peakQualityResult;
  }


  public LCMSFeatureSummaryQualityData isotopeQualityResult(LCMSQualityCheckResult isotopeQualityResult) {
    
    this.isotopeQualityResult = isotopeQualityResult;
    return this;
  }

   /**
   * Get isotopeQualityResult
   * @return isotopeQualityResult
  **/
  @javax.annotation.Nullable

  public LCMSQualityCheckResult getIsotopeQualityResult() {
    return isotopeQualityResult;
  }


  public void setIsotopeQualityResult(LCMSQualityCheckResult isotopeQualityResult) {
    this.isotopeQualityResult = isotopeQualityResult;
  }


  public LCMSFeatureSummaryQualityData adductQualityResult(LCMSQualityCheckResult adductQualityResult) {
    
    this.adductQualityResult = adductQualityResult;
    return this;
  }

   /**
   * Get adductQualityResult
   * @return adductQualityResult
  **/
  @javax.annotation.Nullable

  public LCMSQualityCheckResult getAdductQualityResult() {
    return adductQualityResult;
  }


  public void setAdductQualityResult(LCMSQualityCheckResult adductQualityResult) {
    this.adductQualityResult = adductQualityResult;
  }


  public LCMSFeatureSummaryQualityData ms2QualityResult(LCMSQualityCheckResult ms2QualityResult) {
    
    this.ms2QualityResult = ms2QualityResult;
    return this;
  }

   /**
   * Get ms2QualityResult
   * @return ms2QualityResult
  **/
  @javax.annotation.Nullable

  public LCMSQualityCheckResult getMs2QualityResult() {
    return ms2QualityResult;
  }


  public void setMs2QualityResult(LCMSQualityCheckResult ms2QualityResult) {
    this.ms2QualityResult = ms2QualityResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LCMSFeatureSummaryQualityData lcMSFeatureSummaryQualityData = (LCMSFeatureSummaryQualityData) o;
    return Objects.equals(this.peakQualityResult, lcMSFeatureSummaryQualityData.peakQualityResult) &&
        Objects.equals(this.isotopeQualityResult, lcMSFeatureSummaryQualityData.isotopeQualityResult) &&
        Objects.equals(this.adductQualityResult, lcMSFeatureSummaryQualityData.adductQualityResult) &&
        Objects.equals(this.ms2QualityResult, lcMSFeatureSummaryQualityData.ms2QualityResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(peakQualityResult, isotopeQualityResult, adductQualityResult, ms2QualityResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LCMSFeatureSummaryQualityData {\n");
    sb.append("    peakQualityResult: ").append(toIndentedString(peakQualityResult)).append("\n");
    sb.append("    isotopeQualityResult: ").append(toIndentedString(isotopeQualityResult)).append("\n");
    sb.append("    adductQualityResult: ").append(toIndentedString(adductQualityResult)).append("\n");
    sb.append("    ms2QualityResult: ").append(toIndentedString(ms2QualityResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("peakQualityResult");
    openapiFields.add("isotopeQualityResult");
    openapiFields.add("adductQualityResult");
    openapiFields.add("ms2QualityResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LCMSFeatureSummaryQualityData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LCMSFeatureSummaryQualityData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LCMSFeatureSummaryQualityData is not found in the empty JSON string", LCMSFeatureSummaryQualityData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LCMSFeatureSummaryQualityData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LCMSFeatureSummaryQualityData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `peakQualityResult`
      if (jsonObj.get("peakQualityResult") != null && !jsonObj.get("peakQualityResult").isJsonNull()) {
        LCMSQualityCheckResult.validateJsonObject(jsonObj.getAsJsonObject("peakQualityResult"));
      }
      // validate the optional field `isotopeQualityResult`
      if (jsonObj.get("isotopeQualityResult") != null && !jsonObj.get("isotopeQualityResult").isJsonNull()) {
        LCMSQualityCheckResult.validateJsonObject(jsonObj.getAsJsonObject("isotopeQualityResult"));
      }
      // validate the optional field `adductQualityResult`
      if (jsonObj.get("adductQualityResult") != null && !jsonObj.get("adductQualityResult").isJsonNull()) {
        LCMSQualityCheckResult.validateJsonObject(jsonObj.getAsJsonObject("adductQualityResult"));
      }
      // validate the optional field `ms2QualityResult`
      if (jsonObj.get("ms2QualityResult") != null && !jsonObj.get("ms2QualityResult").isJsonNull()) {
        LCMSQualityCheckResult.validateJsonObject(jsonObj.getAsJsonObject("ms2QualityResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LCMSFeatureSummaryQualityData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LCMSFeatureSummaryQualityData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LCMSFeatureSummaryQualityData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LCMSFeatureSummaryQualityData.class));

       return (TypeAdapter<T>) new TypeAdapter<LCMSFeatureSummaryQualityData>() {
           @Override
           public void write(JsonWriter out, LCMSFeatureSummaryQualityData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LCMSFeatureSummaryQualityData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LCMSFeatureSummaryQualityData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LCMSFeatureSummaryQualityData
  * @throws IOException if the JSON string is invalid with respect to LCMSFeatureSummaryQualityData
  */
  public static LCMSFeatureSummaryQualityData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LCMSFeatureSummaryQualityData.class);
  }

 /**
  * Convert an instance of LCMSFeatureSummaryQualityData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

