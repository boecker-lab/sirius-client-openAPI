/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * The version of the OpenAPI document: v0.9 on SIRIUS 6.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package JSirius.api;

import JSirius.ApiCallback;
import JSirius.ApiClient;
import JSirius.ApiException;
import JSirius.ApiResponse;
import JSirius.Configuration;
import JSirius.Pair;
import JSirius.ProgressRequestBody;
import JSirius.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import JSirius.model.AnnotatedSpectrum;
import JSirius.model.CanopusPredictions;
import JSirius.model.CompoundClasses;
import JSirius.model.FormulaResultContainer;
import JSirius.model.FragmentationTree;
import JSirius.model.StructureCandidate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FormulaResultsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FormulaResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FormulaResultsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBestMatchingCanopusPredictions
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best matching Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBestMatchingCanopusPredictionsCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/best-canopus-predictions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBestMatchingCanopusPredictionsValidateBeforeCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getBestMatchingCanopusPredictions(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getBestMatchingCanopusPredictions(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getBestMatchingCanopusPredictions(Async)");
        }

        return getBestMatchingCanopusPredictionsCall(projectId, compoundId, formulaId, _callback);

    }

    /**
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return CompoundClasses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best matching Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public CompoundClasses getBestMatchingCanopusPredictions(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<CompoundClasses> localVarResp = getBestMatchingCanopusPredictionsWithHttpInfo(projectId, compoundId, formulaId);
        return localVarResp.getData();
    }

    /**
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;CompoundClasses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best matching Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompoundClasses> getBestMatchingCanopusPredictionsWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        okhttp3.Call localVarCall = getBestMatchingCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, null);
        Type localVarReturnType = new TypeToken<CompoundClasses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, (asynchronously)
     * Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best matching Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBestMatchingCanopusPredictionsAsync(String projectId, String compoundId, String formulaId, final ApiCallback<CompoundClasses> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBestMatchingCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, _callback);
        Type localVarReturnType = new TypeToken<CompoundClasses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCanopusPredictions
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCanopusPredictionsCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/canopus-predictions"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCanopusPredictionsValidateBeforeCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCanopusPredictions(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getCanopusPredictions(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getCanopusPredictions(Async)");
        }

        return getCanopusPredictionsCall(projectId, compoundId, formulaId, _callback);

    }

    /**
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return CanopusPredictions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public CanopusPredictions getCanopusPredictions(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<CanopusPredictions> localVarResp = getCanopusPredictionsWithHttpInfo(projectId, compoundId, formulaId);
        return localVarResp.getData();
    }

    /**
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;CanopusPredictions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CanopusPredictions> getCanopusPredictionsWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        okhttp3.Call localVarCall = getCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, null);
        Type localVarReturnType = new TypeToken<CanopusPredictions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, (asynchronously)
     * All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Predicted compound classes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCanopusPredictionsAsync(String projectId, String compoundId, String formulaId, final ApiCallback<CanopusPredictions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCanopusPredictionsValidateBeforeCall(projectId, compoundId, formulaId, _callback);
        Type localVarReturnType = new TypeToken<CanopusPredictions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFingerprintPrediction
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> probabilistic fingerprint predicted by CSI:FingerID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFingerprintPredictionCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/fingerprint"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFingerprintPredictionValidateBeforeCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFingerprintPrediction(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFingerprintPrediction(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getFingerprintPrediction(Async)");
        }

        return getFingerprintPredictionCall(projectId, compoundId, formulaId, _callback);

    }

    /**
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return List&lt;Double&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> probabilistic fingerprint predicted by CSI:FingerID </td><td>  -  </td></tr>
     </table>
     */
    public List<Double> getFingerprintPrediction(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<List<Double>> localVarResp = getFingerprintPredictionWithHttpInfo(projectId, compoundId, formulaId);
        return localVarResp.getData();
    }

    /**
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;List&lt;Double&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> probabilistic fingerprint predicted by CSI:FingerID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Double>> getFingerprintPredictionWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        okhttp3.Call localVarCall = getFingerprintPredictionValidateBeforeCall(projectId, compoundId, formulaId, null);
        Type localVarReturnType = new TypeToken<List<Double>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. (asynchronously)
     * Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> probabilistic fingerprint predicted by CSI:FingerID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFingerprintPredictionAsync(String projectId, String compoundId, String formulaId, final ApiCallback<List<Double>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFingerprintPredictionValidateBeforeCall(projectId, compoundId, formulaId, _callback);
        Type localVarReturnType = new TypeToken<List<Double>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFormulaIds
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFormulaIdsCall(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resultOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultOverview", resultOverview));
        }

        if (formulaCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formulaCandidate", formulaCandidate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormulaIdsValidateBeforeCall(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFormulaIds(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFormulaIds(Async)");
        }

        return getFormulaIdsCall(projectId, compoundId, resultOverview, formulaCandidate, _callback);

    }

    /**
     * List of all FormulaResultContainers available for this compound/feature with minimal information.
     * List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @return List&lt;FormulaResultContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public List<FormulaResultContainer> getFormulaIds(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        ApiResponse<List<FormulaResultContainer>> localVarResp = getFormulaIdsWithHttpInfo(projectId, compoundId, resultOverview, formulaCandidate);
        return localVarResp.getData();
    }

    /**
     * List of all FormulaResultContainers available for this compound/feature with minimal information.
     * List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @return ApiResponse&lt;List&lt;FormulaResultContainer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FormulaResultContainer>> getFormulaIdsWithHttpInfo(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        okhttp3.Call localVarCall = getFormulaIdsValidateBeforeCall(projectId, compoundId, resultOverview, formulaCandidate, null);
        Type localVarReturnType = new TypeToken<List<FormulaResultContainer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of all FormulaResultContainers available for this compound/feature with minimal information. (asynchronously)
     * List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainers (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainers (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFormulaIdsAsync(String projectId, String compoundId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback<List<FormulaResultContainer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormulaIdsValidateBeforeCall(projectId, compoundId, resultOverview, formulaCandidate, _callback);
        Type localVarReturnType = new TypeToken<List<FormulaResultContainer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFormulaResult
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFormulaResultCall(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resultOverview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultOverview", resultOverview));
        }

        if (formulaCandidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formulaCandidate", formulaCandidate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormulaResultValidateBeforeCall(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFormulaResult(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFormulaResult(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getFormulaResult(Async)");
        }

        return getFormulaResultCall(projectId, compoundId, formulaId, resultOverview, formulaCandidate, _callback);

    }

    /**
     * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.
     * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @return FormulaResultContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public FormulaResultContainer getFormulaResult(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        ApiResponse<FormulaResultContainer> localVarResp = getFormulaResultWithHttpInfo(projectId, compoundId, formulaId, resultOverview, formulaCandidate);
        return localVarResp.getData();
    }

    /**
     * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.
     * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @return ApiResponse&lt;FormulaResultContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FormulaResultContainer> getFormulaResultWithHttpInfo(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate) throws ApiException {
        okhttp3.Call localVarCall = getFormulaResultValidateBeforeCall(projectId, compoundId, formulaId, resultOverview, formulaCandidate, null);
        Type localVarReturnType = new TypeToken<FormulaResultContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information. (asynchronously)
     * FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param resultOverview add ResultOverview to the FormulaResultContainer (optional, default to true)
     * @param formulaCandidate add extended formula candidate information to the FormulaResultContainer (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFormulaResultAsync(String projectId, String compoundId, String formulaId, Boolean resultOverview, Boolean formulaCandidate, final ApiCallback<FormulaResultContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormulaResultValidateBeforeCall(projectId, compoundId, formulaId, resultOverview, formulaCandidate, _callback);
        Type localVarReturnType = new TypeToken<FormulaResultContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragTree
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fragmentation Tree </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragTreeCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/tree"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragTreeValidateBeforeCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFragTree(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getFragTree(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getFragTree(Async)");
        }

        return getFragTreeCall(projectId, compoundId, formulaId, _callback);

    }

    /**
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return FragmentationTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fragmentation Tree </td><td>  -  </td></tr>
     </table>
     */
    public FragmentationTree getFragTree(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<FragmentationTree> localVarResp = getFragTreeWithHttpInfo(projectId, compoundId, formulaId);
        return localVarResp.getData();
    }

    /**
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;FragmentationTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fragmentation Tree </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FragmentationTree> getFragTreeWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        okhttp3.Call localVarCall = getFragTreeValidateBeforeCall(projectId, compoundId, formulaId, null);
        Type localVarReturnType = new TypeToken<FragmentationTree>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). (asynchronously)
     * Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fragmentation Tree </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragTreeAsync(String projectId, String compoundId, String formulaId, final ApiCallback<FragmentationTree> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragTreeValidateBeforeCall(projectId, compoundId, formulaId, _callback);
        Type localVarReturnType = new TypeToken<FragmentationTree>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimulatedIsotopePattern
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulated isotope pattern </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimulatedIsotopePatternCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/isotope-pattern"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimulatedIsotopePatternValidateBeforeCall(String projectId, String compoundId, String formulaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSimulatedIsotopePattern(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getSimulatedIsotopePattern(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getSimulatedIsotopePattern(Async)");
        }

        return getSimulatedIsotopePatternCall(projectId, compoundId, formulaId, _callback);

    }

    /**
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return AnnotatedSpectrum
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulated isotope pattern </td><td>  -  </td></tr>
     </table>
     */
    public AnnotatedSpectrum getSimulatedIsotopePattern(String projectId, String compoundId, String formulaId) throws ApiException {
        ApiResponse<AnnotatedSpectrum> localVarResp = getSimulatedIsotopePatternWithHttpInfo(projectId, compoundId, formulaId);
        return localVarResp.getData();
    }

    /**
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @return ApiResponse&lt;AnnotatedSpectrum&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulated isotope pattern </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnnotatedSpectrum> getSimulatedIsotopePatternWithHttpInfo(String projectId, String compoundId, String formulaId) throws ApiException {
        okhttp3.Call localVarCall = getSimulatedIsotopePatternValidateBeforeCall(projectId, compoundId, formulaId, null);
        Type localVarReturnType = new TypeToken<AnnotatedSpectrum>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. (asynchronously)
     * Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulated isotope pattern </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimulatedIsotopePatternAsync(String projectId, String compoundId, String formulaId, final ApiCallback<AnnotatedSpectrum> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimulatedIsotopePatternValidateBeforeCall(projectId, compoundId, formulaId, _callback);
        Type localVarReturnType = new TypeToken<AnnotatedSpectrum>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStructureCandidates
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStructureCandidatesCall(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/structures"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()))
            .replace("{" + "formulaId" + "}", localVarApiClient.escapeString(formulaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fingerprint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fingerprint", fingerprint));
        }

        if (dbLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbLinks", dbLinks));
        }

        if (pubMedIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pubMedIds", pubMedIds));
        }

        if (topK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topK", topK));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStructureCandidatesValidateBeforeCall(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getStructureCandidates(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getStructureCandidates(Async)");
        }

        // verify the required parameter 'formulaId' is set
        if (formulaId == null) {
            throw new ApiException("Missing the required parameter 'formulaId' when calling getStructureCandidates(Async)");
        }

        return getStructureCandidatesCall(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK, _callback);

    }

    /**
     * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.
     * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @return List&lt;StructureCandidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public List<StructureCandidate> getStructureCandidates(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK) throws ApiException {
        ApiResponse<List<StructureCandidate>> localVarResp = getStructureCandidatesWithHttpInfo(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK);
        return localVarResp.getData();
    }

    /**
     * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.
     * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @return ApiResponse&lt;List&lt;StructureCandidate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StructureCandidate>> getStructureCandidatesWithHttpInfo(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK) throws ApiException {
        okhttp3.Call localVarCall = getStructureCandidatesValidateBeforeCall(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK, null);
        Type localVarReturnType = new TypeToken<List<StructureCandidate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of StructureCandidates the given &#39;formulaId&#39; with minimal information. (asynchronously)
     * List of StructureCandidates the given &#39;formulaId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param formulaId identifier of the requested formula result (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param topK retrieve only the top k StructureCandidates (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStructureCandidatesAsync(String projectId, String compoundId, String formulaId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, Integer topK, final ApiCallback<List<StructureCandidate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStructureCandidatesValidateBeforeCall(projectId, compoundId, formulaId, fingerprint, dbLinks, pubMedIds, topK, _callback);
        Type localVarReturnType = new TypeToken<List<StructureCandidate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopStructureCandidate
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best scoring FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopStructureCandidateCall(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{compoundId}/top-structure"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "compoundId" + "}", localVarApiClient.escapeString(compoundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fingerprint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fingerprint", fingerprint));
        }

        if (dbLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbLinks", dbLinks));
        }

        if (pubMedIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pubMedIds", pubMedIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopStructureCandidateValidateBeforeCall(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTopStructureCandidate(Async)");
        }

        // verify the required parameter 'compoundId' is set
        if (compoundId == null) {
            throw new ApiException("Missing the required parameter 'compoundId' when calling getTopStructureCandidate(Async)");
        }

        return getTopStructureCandidateCall(projectId, compoundId, fingerprint, dbLinks, pubMedIds, _callback);

    }

    /**
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @return StructureCandidate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best scoring FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public StructureCandidate getTopStructureCandidate(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds) throws ApiException {
        ApiResponse<StructureCandidate> localVarResp = getTopStructureCandidateWithHttpInfo(projectId, compoundId, fingerprint, dbLinks, pubMedIds);
        return localVarResp.getData();
    }

    /**
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @return ApiResponse&lt;StructureCandidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best scoring FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StructureCandidate> getTopStructureCandidateWithHttpInfo(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds) throws ApiException {
        okhttp3.Call localVarCall = getTopStructureCandidateValidateBeforeCall(projectId, compoundId, fingerprint, dbLinks, pubMedIds, null);
        Type localVarReturnType = new TypeToken<StructureCandidate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). (asynchronously)
     * Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
     * @param projectId project-space to read from. (required)
     * @param compoundId compound/feature the formula result belongs to. (required)
     * @param fingerprint add molecular fingerprint to StructureCandidates (optional, default to false)
     * @param dbLinks add dbLinks to StructureCandidates (optional, default to false)
     * @param pubMedIds add PubMedIds (citation count) to StructureCandidates (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Best scoring FormulaResultContainers of this compound/feature with specified extensions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopStructureCandidateAsync(String projectId, String compoundId, Boolean fingerprint, Boolean dbLinks, Boolean pubMedIds, final ApiCallback<StructureCandidate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopStructureCandidateValidateBeforeCall(projectId, compoundId, fingerprint, dbLinks, pubMedIds, _callback);
        Type localVarReturnType = new TypeToken<StructureCandidate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
