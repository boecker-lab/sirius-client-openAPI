/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * The version of the OpenAPI document: v0.9 on SIRIUS 6.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package JSirius.api;

import JSirius.ApiCallback;
import JSirius.ApiClient;
import JSirius.ApiException;
import JSirius.ApiResponse;
import JSirius.Configuration;
import JSirius.Pair;
import JSirius.ProgressRequestBody;
import JSirius.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import JSirius.model.JobId;
import JSirius.model.JobSubmission;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ComputationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ComputationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComputationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteJob
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobCall(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cancelIfRunning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cancelIfRunning", cancelIfRunning));
        }

        if (awaitDeletion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("awaitDeletion", awaitDeletion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobValidateBeforeCall(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling deleteJob(Async)");
        }

        return deleteJobCall(projectId, jobId, cancelIfRunning, awaitDeletion, _callback);

    }

    /**
     * Delete job.
     * Delete job. Specify how to behave for running jobs.
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteJob(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion) throws ApiException {
        deleteJobWithHttpInfo(projectId, jobId, cancelIfRunning, awaitDeletion);
    }

    /**
     * Delete job.
     * Delete job. Specify how to behave for running jobs.
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteJobWithHttpInfo(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion) throws ApiException {
        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(projectId, jobId, cancelIfRunning, awaitDeletion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete job. (asynchronously)
     * Delete job. Specify how to behave for running jobs.
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be deleted (required)
     * @param cancelIfRunning If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (optional, default to true)
     * @param awaitDeletion If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobAsync(String projectId, String jobId, Boolean cancelIfRunning, Boolean awaitDeletion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(projectId, jobId, cancelIfRunning, awaitDeletion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteJobConfig
     * @param name name of the job-config to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobConfigCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/job-configs/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobConfigValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteJobConfig(Async)");
        }

        return deleteJobConfigCall(name, _callback);

    }

    /**
     * Delete job configuration with given name.
     * Delete job configuration with given name.
     * @param name name of the job-config to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteJobConfig(String name) throws ApiException {
        deleteJobConfigWithHttpInfo(name);
    }

    /**
     * Delete job configuration with given name.
     * Delete job configuration with given name.
     * @param name name of the job-config to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteJobConfigWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteJobConfigValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete job configuration with given name. (asynchronously)
     * Delete job configuration with given name.
     * @param name name of the job-config to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobConfigAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobConfigValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDefaultJobConfig
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} with all parameters set to default values. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefaultJobConfigCall(Boolean includeConfigMap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/default-job-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeConfigMap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeConfigMap", includeConfigMap));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultJobConfigValidateBeforeCall(Boolean includeConfigMap, final ApiCallback _callback) throws ApiException {
        return getDefaultJobConfigCall(includeConfigMap, _callback);

    }

    /**
     * Request default job configuration
     * Request default job configuration
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @return JobSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} with all parameters set to default values. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmission getDefaultJobConfig(Boolean includeConfigMap) throws ApiException {
        ApiResponse<JobSubmission> localVarResp = getDefaultJobConfigWithHttpInfo(includeConfigMap);
        return localVarResp.getData();
    }

    /**
     * Request default job configuration
     * Request default job configuration
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @return ApiResponse&lt;JobSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} with all parameters set to default values. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmission> getDefaultJobConfigWithHttpInfo(Boolean includeConfigMap) throws ApiException {
        okhttp3.Call localVarCall = getDefaultJobConfigValidateBeforeCall(includeConfigMap, null);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request default job configuration (asynchronously)
     * Request default job configuration
     * @param includeConfigMap if true, generic configmap with-defaults will be included (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} with all parameters set to default values. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefaultJobConfigAsync(Boolean includeConfigMap, final ApiCallback<JobSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultJobConfigValidateBeforeCall(includeConfigMap, _callback);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs/{jobId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeState", includeState));
        }

        if (includeCommand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCommand", includeCommand));
        }

        if (includeAffectedCompounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJob(Async)");
        }

        return getJobCall(projectId, jobId, includeState, includeCommand, includeAffectedCompounds, _callback);

    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public JobId getJob(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<JobId> localVarResp = getJobWithHttpInfo(projectId, jobId, includeState, includeCommand, includeAffectedCompounds);
        return localVarResp.getData();
    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> getJobWithHttpInfo(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(projectId, jobId, includeState, includeCommand, includeAffectedCompounds, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job information and its current state and progress (if available). (asynchronously)
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param jobId of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(String projectId, String jobId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(projectId, jobId, includeState, includeCommand, includeAffectedCompounds, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobConfig
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} for given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobConfigCall(String name, Boolean includeConfigMap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/job-configs/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeConfigMap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeConfigMap", includeConfigMap));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobConfigValidateBeforeCall(String name, Boolean includeConfigMap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getJobConfig(Async)");
        }

        return getJobConfigCall(name, includeConfigMap, _callback);

    }

    /**
     * Request job configuration with given name.
     * Request job configuration with given name.
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return JobSubmission
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} for given name. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmission getJobConfig(String name, Boolean includeConfigMap) throws ApiException {
        ApiResponse<JobSubmission> localVarResp = getJobConfigWithHttpInfo(name, includeConfigMap);
        return localVarResp.getData();
    }

    /**
     * Request job configuration with given name.
     * Request job configuration with given name.
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return ApiResponse&lt;JobSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} for given name. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmission> getJobConfigWithHttpInfo(String name, Boolean includeConfigMap) throws ApiException {
        okhttp3.Call localVarCall = getJobConfigValidateBeforeCall(name, includeConfigMap, null);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request job configuration with given name. (asynchronously)
     * Request job configuration with given name.
     * @param name name of the job-config to return (required)
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> {@link JobSubmission JobSubmission} for given name. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobConfigAsync(String name, Boolean includeConfigMap, final ApiCallback<JobSubmission> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobConfigValidateBeforeCall(name, includeConfigMap, _callback);
        Type localVarReturnType = new TypeToken<JobSubmission>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobConfigs
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of available {@link JobSubmission JobSubmission}s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobConfigsCall(Boolean includeConfigMap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/job-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeConfigMap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeConfigMap", includeConfigMap));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobConfigsValidateBeforeCall(Boolean includeConfigMap, final ApiCallback _callback) throws ApiException {
        return getJobConfigsCall(includeConfigMap, _callback);

    }

    /**
     * Request all available job configurations
     * Request all available job configurations
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return List&lt;JobSubmission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of available {@link JobSubmission JobSubmission}s </td><td>  -  </td></tr>
     </table>
     */
    public List<JobSubmission> getJobConfigs(Boolean includeConfigMap) throws ApiException {
        ApiResponse<List<JobSubmission>> localVarResp = getJobConfigsWithHttpInfo(includeConfigMap);
        return localVarResp.getData();
    }

    /**
     * Request all available job configurations
     * Request all available job configurations
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @return ApiResponse&lt;List&lt;JobSubmission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of available {@link JobSubmission JobSubmission}s </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobSubmission>> getJobConfigsWithHttpInfo(Boolean includeConfigMap) throws ApiException {
        okhttp3.Call localVarCall = getJobConfigsValidateBeforeCall(includeConfigMap, null);
        Type localVarReturnType = new TypeToken<List<JobSubmission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request all available job configurations (asynchronously)
     * Request all available job configurations
     * @param includeConfigMap if true the generic configmap will be part of the output (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of available {@link JobSubmission JobSubmission}s </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobConfigsAsync(Boolean includeConfigMap, final ApiCallback<List<JobSubmission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobConfigsValidateBeforeCall(includeConfigMap, _callback);
        Type localVarReturnType = new TypeToken<List<JobSubmission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeState", includeState));
        }

        if (includeCommand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCommand", includeCommand));
        }

        if (includeAffectedCompounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getJobs(Async)");
        }

        return getJobsCall(projectId, includeState, includeCommand, includeAffectedCompounds, _callback);

    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return List&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<JobId> getJobs(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<List<JobId>> localVarResp = getJobsWithHttpInfo(projectId, includeState, includeCommand, includeAffectedCompounds);
        return localVarResp.getData();
    }

    /**
     * Get job information and its current state and progress (if available).
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;List&lt;JobId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobId>> getJobsWithHttpInfo(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(projectId, includeState, includeCommand, includeAffectedCompounds, null);
        Type localVarReturnType = new TypeToken<List<JobId>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get job information and its current state and progress (if available). (asynchronously)
     * Get job information and its current state and progress (if available).
     * @param projectId project-space to run jobs on (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (optional, default to false)
     * @param includeCommand include job commands. (optional, default to false)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(String projectId, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<List<JobId>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(projectId, includeState, includeCommand, includeAffectedCompounds, _callback);
        Type localVarReturnType = new TypeToken<List<JobId>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobConfig
     * @param name name of the job-config to add (required)
     * @param jobSubmission to add (required)
     * @param overrideExisting  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Probably modified name of the config (to ensure filesystem path compatibility). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobConfigCall(String name, JobSubmission jobSubmission, Boolean overrideExisting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobSubmission;

        // create path and map variables
        String localVarPath = "/api/job-configs/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (overrideExisting != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideExisting", overrideExisting));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobConfigValidateBeforeCall(String name, JobSubmission jobSubmission, Boolean overrideExisting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobConfig(Async)");
        }

        // verify the required parameter 'jobSubmission' is set
        if (jobSubmission == null) {
            throw new ApiException("Missing the required parameter 'jobSubmission' when calling postJobConfig(Async)");
        }

        return postJobConfigCall(name, jobSubmission, overrideExisting, _callback);

    }

    /**
     * Add new job configuration with given name.
     * Add new job configuration with given name.
     * @param name name of the job-config to add (required)
     * @param jobSubmission to add (required)
     * @param overrideExisting  (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Probably modified name of the config (to ensure filesystem path compatibility). </td><td>  -  </td></tr>
     </table>
     */
    public String postJobConfig(String name, JobSubmission jobSubmission, Boolean overrideExisting) throws ApiException {
        ApiResponse<String> localVarResp = postJobConfigWithHttpInfo(name, jobSubmission, overrideExisting);
        return localVarResp.getData();
    }

    /**
     * Add new job configuration with given name.
     * Add new job configuration with given name.
     * @param name name of the job-config to add (required)
     * @param jobSubmission to add (required)
     * @param overrideExisting  (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Probably modified name of the config (to ensure filesystem path compatibility). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postJobConfigWithHttpInfo(String name, JobSubmission jobSubmission, Boolean overrideExisting) throws ApiException {
        okhttp3.Call localVarCall = postJobConfigValidateBeforeCall(name, jobSubmission, overrideExisting, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new job configuration with given name. (asynchronously)
     * Add new job configuration with given name.
     * @param name name of the job-config to add (required)
     * @param jobSubmission to add (required)
     * @param overrideExisting  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Probably modified name of the config (to ensure filesystem path compatibility). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobConfigAsync(String name, JobSubmission jobSubmission, Boolean overrideExisting, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobConfigValidateBeforeCall(name, jobSubmission, overrideExisting, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startJob
     * @param projectId project-space to run jobs on (required)
     * @param jobSubmission configuration of the job that will be submitted of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startJobCall(String projectId, JobSubmission jobSubmission, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobSubmission;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeState", includeState));
        }

        if (includeCommand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCommand", includeCommand));
        }

        if (includeAffectedCompounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startJobValidateBeforeCall(String projectId, JobSubmission jobSubmission, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startJob(Async)");
        }

        // verify the required parameter 'jobSubmission' is set
        if (jobSubmission == null) {
            throw new ApiException("Missing the required parameter 'jobSubmission' when calling startJob(Async)");
        }

        return startJobCall(projectId, jobSubmission, includeState, includeCommand, includeAffectedCompounds, _callback);

    }

    /**
     * Start computation for given compounds and with given parameters.
     * Start computation for given compounds and with given parameters.
     * @param projectId project-space to run jobs on (required)
     * @param jobSubmission configuration of the job that will be submitted of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public JobId startJob(String projectId, JobSubmission jobSubmission, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<JobId> localVarResp = startJobWithHttpInfo(projectId, jobSubmission, includeState, includeCommand, includeAffectedCompounds);
        return localVarResp.getData();
    }

    /**
     * Start computation for given compounds and with given parameters.
     * Start computation for given compounds and with given parameters.
     * @param projectId project-space to run jobs on (required)
     * @param jobSubmission configuration of the job that will be submitted of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> startJobWithHttpInfo(String projectId, JobSubmission jobSubmission, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        okhttp3.Call localVarCall = startJobValidateBeforeCall(projectId, jobSubmission, includeState, includeCommand, includeAffectedCompounds, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start computation for given compounds and with given parameters. (asynchronously)
     * Start computation for given compounds and with given parameters.
     * @param projectId project-space to run jobs on (required)
     * @param jobSubmission configuration of the job that will be submitted of the job to be returned (required)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startJobAsync(String projectId, JobSubmission jobSubmission, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = startJobValidateBeforeCall(projectId, jobSubmission, includeState, includeCommand, includeAffectedCompounds, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startJobFromConfig
     * @param projectId project-space to run jobs on (required)
     * @param jobConfigName name if the config to be used (required)
     * @param requestBody compound ids to be computed (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startJobFromConfigCall(String projectId, String jobConfigName, List<String> requestBody, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/jobs-from-config"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobConfigName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobConfigName", jobConfigName));
        }

        if (recompute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recompute", recompute));
        }

        if (includeState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeState", includeState));
        }

        if (includeCommand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCommand", includeCommand));
        }

        if (includeAffectedCompounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAffectedCompounds", includeAffectedCompounds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startJobFromConfigValidateBeforeCall(String projectId, String jobConfigName, List<String> requestBody, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling startJobFromConfig(Async)");
        }

        // verify the required parameter 'jobConfigName' is set
        if (jobConfigName == null) {
            throw new ApiException("Missing the required parameter 'jobConfigName' when calling startJobFromConfig(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling startJobFromConfig(Async)");
        }

        return startJobFromConfigCall(projectId, jobConfigName, requestBody, recompute, includeState, includeCommand, includeAffectedCompounds, _callback);

    }

    /**
     * Start computation for given compounds and with parameters from a stored job-config.
     * Start computation for given compounds and with parameters from a stored job-config.
     * @param projectId project-space to run jobs on (required)
     * @param jobConfigName name if the config to be used (required)
     * @param requestBody compound ids to be computed (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public JobId startJobFromConfig(String projectId, String jobConfigName, List<String> requestBody, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        ApiResponse<JobId> localVarResp = startJobFromConfigWithHttpInfo(projectId, jobConfigName, requestBody, recompute, includeState, includeCommand, includeAffectedCompounds);
        return localVarResp.getData();
    }

    /**
     * Start computation for given compounds and with parameters from a stored job-config.
     * Start computation for given compounds and with parameters from a stored job-config.
     * @param projectId project-space to run jobs on (required)
     * @param jobConfigName name if the config to be used (required)
     * @param requestBody compound ids to be computed (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> startJobFromConfigWithHttpInfo(String projectId, String jobConfigName, List<String> requestBody, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds) throws ApiException {
        okhttp3.Call localVarCall = startJobFromConfigValidateBeforeCall(projectId, jobConfigName, requestBody, recompute, includeState, includeCommand, includeAffectedCompounds, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start computation for given compounds and with parameters from a stored job-config. (asynchronously)
     * Start computation for given compounds and with parameters from a stored job-config.
     * @param projectId project-space to run jobs on (required)
     * @param jobConfigName name if the config to be used (required)
     * @param requestBody compound ids to be computed (required)
     * @param recompute enable or disable recompute. If null the stored value will be used. (optional)
     * @param includeState include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (optional, default to true)
     * @param includeCommand include job command. (optional, default to true)
     * @param includeAffectedCompounds include list of compound ids affected by this job (if available) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startJobFromConfigAsync(String projectId, String jobConfigName, List<String> requestBody, Boolean recompute, Boolean includeState, Boolean includeCommand, Boolean includeAffectedCompounds, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = startJobFromConfigValidateBeforeCall(projectId, jobConfigName, requestBody, recompute, includeState, includeCommand, includeAffectedCompounds, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
