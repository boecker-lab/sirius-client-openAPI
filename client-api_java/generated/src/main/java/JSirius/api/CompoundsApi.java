/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package JSirius.api;

import JSirius.ApiCallback;
import JSirius.ApiClient;
import JSirius.ApiException;
import JSirius.ApiResponse;
import JSirius.Configuration;
import JSirius.Pair;
import JSirius.ProgressRequestBody;
import JSirius.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import JSirius.model.CompoundId;
import JSirius.model.JobId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompoundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompoundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompoundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCompound
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompoundCall(String projectId, String cid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{cid}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "cid" + "}", localVarApiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompoundValidateBeforeCall(String projectId, String cid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteCompound(Async)");
        }

        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling deleteCompound(Async)");
        }

        return deleteCompoundCall(projectId, cid, _callback);

    }

    /**
     * Delete compound/feature with the given identifier from the specified project-space.
     * Delete compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCompound(String projectId, String cid) throws ApiException {
        deleteCompoundWithHttpInfo(projectId, cid);
    }

    /**
     * Delete compound/feature with the given identifier from the specified project-space.
     * Delete compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCompoundWithHttpInfo(String projectId, String cid) throws ApiException {
        okhttp3.Call localVarCall = deleteCompoundValidateBeforeCall(projectId, cid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete compound/feature with the given identifier from the specified project-space. (asynchronously)
     * Delete compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to delete from. (required)
     * @param cid identifier of compound to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompoundAsync(String projectId, String cid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompoundValidateBeforeCall(projectId, cid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompound
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundId with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompoundCall(String projectId, String cid, Boolean topAnnotation, Boolean msData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/{cid}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "cid" + "}", localVarApiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topAnnotation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topAnnotation", topAnnotation));
        }

        if (msData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msData", msData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompoundValidateBeforeCall(String projectId, String cid, Boolean topAnnotation, Boolean msData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCompound(Async)");
        }

        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling getCompound(Async)");
        }

        return getCompoundCall(projectId, cid, topAnnotation, msData, _callback);

    }

    /**
     * Get compound/feature with the given identifier from the specified project-space.
     * Get compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return CompoundId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundId with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public CompoundId getCompound(String projectId, String cid, Boolean topAnnotation, Boolean msData) throws ApiException {
        ApiResponse<CompoundId> localVarResp = getCompoundWithHttpInfo(projectId, cid, topAnnotation, msData);
        return localVarResp.getData();
    }

    /**
     * Get compound/feature with the given identifier from the specified project-space.
     * Get compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return ApiResponse&lt;CompoundId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundId with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompoundId> getCompoundWithHttpInfo(String projectId, String cid, Boolean topAnnotation, Boolean msData) throws ApiException {
        okhttp3.Call localVarCall = getCompoundValidateBeforeCall(projectId, cid, topAnnotation, msData, null);
        Type localVarReturnType = new TypeToken<CompoundId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get compound/feature with the given identifier from the specified project-space. (asynchronously)
     * Get compound/feature with the given identifier from the specified project-space.
     * @param projectId project-space to read from. (required)
     * @param cid identifier of compound to access. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundId with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompoundAsync(String projectId, String cid, Boolean topAnnotation, Boolean msData, final ApiCallback<CompoundId> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompoundValidateBeforeCall(projectId, cid, topAnnotation, msData, _callback);
        Type localVarReturnType = new TypeToken<CompoundId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompounds
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompoundsCall(String projectId, Boolean topAnnotation, Boolean msData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topAnnotation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topAnnotation", topAnnotation));
        }

        if (msData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("msData", msData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompoundsValidateBeforeCall(String projectId, Boolean topAnnotation, Boolean msData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getCompounds(Async)");
        }

        return getCompoundsCall(projectId, topAnnotation, msData, _callback);

    }

    /**
     * Get all available compounds/features in the given project-space.
     * Get all available compounds/features in the given project-space.
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return List&lt;CompoundId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public List<CompoundId> getCompounds(String projectId, Boolean topAnnotation, Boolean msData) throws ApiException {
        ApiResponse<List<CompoundId>> localVarResp = getCompoundsWithHttpInfo(projectId, topAnnotation, msData);
        return localVarResp.getData();
    }

    /**
     * Get all available compounds/features in the given project-space.
     * Get all available compounds/features in the given project-space.
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @return ApiResponse&lt;List&lt;CompoundId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CompoundId>> getCompoundsWithHttpInfo(String projectId, Boolean topAnnotation, Boolean msData) throws ApiException {
        okhttp3.Call localVarCall = getCompoundsValidateBeforeCall(projectId, topAnnotation, msData, null);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all available compounds/features in the given project-space. (asynchronously)
     * Get all available compounds/features in the given project-space.
     * @param projectId project-space to read from. (required)
     * @param topAnnotation include the top annotation of this feature into the output (if available). (optional, default to false)
     * @param msData include corresponding source data (MS and MS/MS) into the output. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds with additional annotations and MS/MS data (if specified). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompoundsAsync(String projectId, Boolean topAnnotation, Boolean msData, final ApiCallback<List<CompoundId>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompoundsValidateBeforeCall(projectId, topAnnotation, msData, _callback);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCompounds
     * @param projectId project-space to import into. (required)
     * @param requestBody List of file and directory paths to import (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobId background job that imports given compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCompoundsCall(String projectId, List<String> requestBody, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alignLCMSRuns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alignLCMSRuns", alignLCMSRuns));
        }

        if (allowMs1OnlyData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowMs1OnlyData", allowMs1OnlyData));
        }

        if (ignoreFormulas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreFormulas", ignoreFormulas));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCompoundsValidateBeforeCall(String projectId, List<String> requestBody, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importCompounds(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling importCompounds(Async)");
        }

        return importCompoundsCall(projectId, requestBody, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas, _callback);

    }

    /**
     * Import ms/ms data in given format from local filesystem into the specified project-space
     * Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     * @param projectId project-space to import into. (required)
     * @param requestBody List of file and directory paths to import (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobId background job that imports given compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public JobId importCompounds(String projectId, List<String> requestBody, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas) throws ApiException {
        ApiResponse<JobId> localVarResp = importCompoundsWithHttpInfo(projectId, requestBody, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas);
        return localVarResp.getData();
    }

    /**
     * Import ms/ms data in given format from local filesystem into the specified project-space
     * Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     * @param projectId project-space to import into. (required)
     * @param requestBody List of file and directory paths to import (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobId background job that imports given compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> importCompoundsWithHttpInfo(String projectId, List<String> requestBody, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas) throws ApiException {
        okhttp3.Call localVarCall = importCompoundsValidateBeforeCall(projectId, requestBody, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import ms/ms data in given format from local filesystem into the specified project-space (asynchronously)
     * Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  &lt;p&gt;
     * @param projectId project-space to import into. (required)
     * @param requestBody List of file and directory paths to import (required)
     * @param alignLCMSRuns If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (optional, default to false)
     * @param allowMs1OnlyData  (optional, default to true)
     * @param ignoreFormulas  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobId background job that imports given compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCompoundsAsync(String projectId, List<String> requestBody, Boolean alignLCMSRuns, Boolean allowMs1OnlyData, Boolean ignoreFormulas, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCompoundsValidateBeforeCall(projectId, requestBody, alignLCMSRuns, allowMs1OnlyData, ignoreFormulas, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCompoundsFromString
     * @param projectId project-space to import into. (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param body data content in specified format (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds of the imported compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCompoundsFromStringCall(String projectId, String format, String body, String sourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}/compounds/import-from-string"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (sourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceName", sourceName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCompoundsFromStringValidateBeforeCall(String projectId, String format, String body, String sourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling importCompoundsFromString(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling importCompoundsFromString(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importCompoundsFromString(Async)");
        }

        return importCompoundsFromStringCall(projectId, format, body, sourceName, _callback);

    }

    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * @param projectId project-space to import into. (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param body data content in specified format (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @return List&lt;CompoundId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds of the imported compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public List<CompoundId> importCompoundsFromString(String projectId, String format, String body, String sourceName) throws ApiException {
        ApiResponse<List<CompoundId>> localVarResp = importCompoundsFromStringWithHttpInfo(projectId, format, body, sourceName);
        return localVarResp.getData();
    }

    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * @param projectId project-space to import into. (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param body data content in specified format (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @return ApiResponse&lt;List&lt;CompoundId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds of the imported compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CompoundId>> importCompoundsFromStringWithHttpInfo(String projectId, String format, String body, String sourceName) throws ApiException {
        okhttp3.Call localVarCall = importCompoundsFromStringValidateBeforeCall(projectId, format, body, sourceName, null);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) (asynchronously)
     * Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
     * @param projectId project-space to import into. (required)
     * @param format data format specified by the usual file extension of the format (without [.]) (required)
     * @param body data content in specified format (required)
     * @param sourceName name that specifies the data source. Can e.g. be a file path or just a name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CompoundIds of the imported compounds/features. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCompoundsFromStringAsync(String projectId, String format, String body, String sourceName, final ApiCallback<List<CompoundId>> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCompoundsFromStringValidateBeforeCall(projectId, format, body, sourceName, _callback);
        Type localVarReturnType = new TypeToken<List<CompoundId>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
