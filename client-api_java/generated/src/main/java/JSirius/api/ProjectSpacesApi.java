/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.
 *
 * The version of the OpenAPI document: v0.9 on SIRIUS 5.6.4-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package JSirius.api;

import JSirius.ApiCallback;
import JSirius.ApiClient;
import JSirius.ApiException;
import JSirius.ApiResponse;
import JSirius.Configuration;
import JSirius.Pair;
import JSirius.ProgressRequestBody;
import JSirius.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import JSirius.model.ProjectSpaceId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectSpacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectSpacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectSpacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for closeProjectSpace
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeProjectSpaceCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeProjectSpaceValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling closeProjectSpace(Async)");
        }

        return closeProjectSpaceCall(projectId, _callback);

    }

    /**
     * Close project-space and remove it from application.
     * Close project-space and remove it from application. Project-space will NOT be deleted from disk.
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void closeProjectSpace(String projectId) throws ApiException {
        closeProjectSpaceWithHttpInfo(projectId);
    }

    /**
     * Close project-space and remove it from application.
     * Close project-space and remove it from application. Project-space will NOT be deleted from disk.
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> closeProjectSpaceWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = closeProjectSpaceValidateBeforeCall(projectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Close project-space and remove it from application. (asynchronously)
     * Close project-space and remove it from application. Project-space will NOT be deleted from disk.
     * @param projectId unique name/identifier of the  project-space to be closed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeProjectSpaceAsync(String projectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeProjectSpaceValidateBeforeCall(projectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectSpace
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectSpaceCall(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pathToProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pathToProject", pathToProject));
        }

        if (pathToSourceProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pathToSourceProject", pathToSourceProject));
        }

        if (awaitImport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("awaitImport", awaitImport));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectSpaceValidateBeforeCall(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectSpace(Async)");
        }

        // verify the required parameter 'pathToProject' is set
        if (pathToProject == null) {
            throw new ApiException("Missing the required parameter 'pathToProject' when calling createProjectSpace(Async)");
        }

        return createProjectSpaceCall(projectId, pathToProject, pathToSourceProject, awaitImport, _callback);

    }

    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @return ProjectSpaceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSpaceId createProjectSpace(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
        ApiResponse<ProjectSpaceId> localVarResp = createProjectSpaceWithHttpInfo(projectId, pathToProject, pathToSourceProject, awaitImport);
        return localVarResp.getData();
    }

    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @return ApiResponse&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSpaceId> createProjectSpaceWithHttpInfo(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport) throws ApiException {
        okhttp3.Call localVarCall = createProjectSpaceValidateBeforeCall(projectId, pathToProject, pathToSourceProject, awaitImport, null);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create and open a new project-space at given location and make it accessible via the given projectId. (asynchronously)
     * Create and open a new project-space at given location and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the newly created project-space. (required)
     * @param pathToProject  (required)
     * @param pathToSourceProject  (optional)
     * @param awaitImport  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectSpaceAsync(String projectId, String pathToProject, String pathToSourceProject, Boolean awaitImport, final ApiCallback<ProjectSpaceId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectSpaceValidateBeforeCall(projectId, pathToProject, pathToSourceProject, awaitImport, _callback);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectSpace
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSpaceCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSpaceValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectSpace(Async)");
        }

        return getProjectSpaceCall(projectId, _callback);

    }

    /**
     * Get project space info by its projectId.
     * Get project space info by its projectId.
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @return ProjectSpaceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSpaceId getProjectSpace(String projectId) throws ApiException {
        ApiResponse<ProjectSpaceId> localVarResp = getProjectSpaceWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get project space info by its projectId.
     * Get project space info by its projectId.
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @return ApiResponse&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSpaceId> getProjectSpaceWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectSpaceValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project space info by its projectId. (asynchronously)
     * Get project space info by its projectId.
     * @param projectId unique name/identifier tof the project-space to be accessed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSpaceAsync(String projectId, final ApiCallback<ProjectSpaceId> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSpaceValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectSpaces
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSpacesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectSpacesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProjectSpacesCall(_callback);

    }

    /**
     * List all opened project spaces.
     * List all opened project spaces.
     * @return List&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ProjectSpaceId> getProjectSpaces() throws ApiException {
        ApiResponse<List<ProjectSpaceId>> localVarResp = getProjectSpacesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all opened project spaces.
     * List all opened project spaces.
     * @return ApiResponse&lt;List&lt;ProjectSpaceId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProjectSpaceId>> getProjectSpacesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProjectSpacesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProjectSpaceId>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all opened project spaces. (asynchronously)
     * List all opened project spaces.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectSpacesAsync(final ApiCallback<List<ProjectSpaceId>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectSpacesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProjectSpaceId>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openProjectSpace
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openProjectSpaceCall(String projectId, String pathToProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{projectId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pathToProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pathToProject", pathToProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openProjectSpaceValidateBeforeCall(String projectId, String pathToProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling openProjectSpace(Async)");
        }

        // verify the required parameter 'pathToProject' is set
        if (pathToProject == null) {
            throw new ApiException("Missing the required parameter 'pathToProject' when calling openProjectSpace(Async)");
        }

        return openProjectSpaceCall(projectId, pathToProject, _callback);

    }

    /**
     * Open an existing project-space and make it accessible via the given projectId.
     * Open an existing project-space and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @return ProjectSpaceId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSpaceId openProjectSpace(String projectId, String pathToProject) throws ApiException {
        ApiResponse<ProjectSpaceId> localVarResp = openProjectSpaceWithHttpInfo(projectId, pathToProject);
        return localVarResp.getData();
    }

    /**
     * Open an existing project-space and make it accessible via the given projectId.
     * Open an existing project-space and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @return ApiResponse&lt;ProjectSpaceId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSpaceId> openProjectSpaceWithHttpInfo(String projectId, String pathToProject) throws ApiException {
        okhttp3.Call localVarCall = openProjectSpaceValidateBeforeCall(projectId, pathToProject, null);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open an existing project-space and make it accessible via the given projectId. (asynchronously)
     * Open an existing project-space and make it accessible via the given projectId.
     * @param projectId unique name/identifier that shall be used to access the opened project-space. (required)
     * @param pathToProject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openProjectSpaceAsync(String projectId, String pathToProject, final ApiCallback<ProjectSpaceId> _callback) throws ApiException {

        okhttp3.Call localVarCall = openProjectSpaceValidateBeforeCall(projectId, pathToProject, _callback);
        Type localVarReturnType = new TypeToken<ProjectSpaceId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
