# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'username': 'str',
        'user_email': 'str',
        'gravatar_url': 'str',
        'subscriptions': 'list[Subscription]',
        'active_subscription_id': 'str'
    }

    attribute_map = {
        'user_id': 'userID',
        'username': 'username',
        'user_email': 'userEmail',
        'gravatar_url': 'gravatarURL',
        'subscriptions': 'subscriptions',
        'active_subscription_id': 'activeSubscriptionId'
    }

    def __init__(self, user_id=None, username=None, user_email=None, gravatar_url=None, subscriptions=None, active_subscription_id=None):  # noqa: E501
        """AccountInfo - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._username = None
        self._user_email = None
        self._gravatar_url = None
        self._subscriptions = None
        self._active_subscription_id = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if user_email is not None:
            self.user_email = user_email
        if gravatar_url is not None:
            self.gravatar_url = gravatar_url
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if active_subscription_id is not None:
            self.active_subscription_id = active_subscription_id

    @property
    def user_id(self):
        """Gets the user_id of this AccountInfo.  # noqa: E501


        :return: The user_id of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccountInfo.


        :param user_id: The user_id of this AccountInfo.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this AccountInfo.  # noqa: E501


        :return: The username of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AccountInfo.


        :param username: The username of this AccountInfo.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def user_email(self):
        """Gets the user_email of this AccountInfo.  # noqa: E501


        :return: The user_email of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this AccountInfo.


        :param user_email: The user_email of this AccountInfo.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def gravatar_url(self):
        """Gets the gravatar_url of this AccountInfo.  # noqa: E501


        :return: The gravatar_url of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._gravatar_url

    @gravatar_url.setter
    def gravatar_url(self, gravatar_url):
        """Sets the gravatar_url of this AccountInfo.


        :param gravatar_url: The gravatar_url of this AccountInfo.  # noqa: E501
        :type: str
        """

        self._gravatar_url = gravatar_url

    @property
    def subscriptions(self):
        """Gets the subscriptions of this AccountInfo.  # noqa: E501


        :return: The subscriptions of this AccountInfo.  # noqa: E501
        :rtype: list[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this AccountInfo.


        :param subscriptions: The subscriptions of this AccountInfo.  # noqa: E501
        :type: list[Subscription]
        """

        self._subscriptions = subscriptions

    @property
    def active_subscription_id(self):
        """Gets the active_subscription_id of this AccountInfo.  # noqa: E501


        :return: The active_subscription_id of this AccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._active_subscription_id

    @active_subscription_id.setter
    def active_subscription_id(self, active_subscription_id):
        """Sets the active_subscription_id of this AccountInfo.


        :param active_subscription_id: The active_subscription_id of this AccountInfo.  # noqa: E501
        :type: str
        """

        self._active_subscription_id = active_subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
