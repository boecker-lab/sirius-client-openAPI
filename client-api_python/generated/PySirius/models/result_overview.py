# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ResultOverview(BaseModel):
    """
    Results that are available for a {@link FormulaResultContainer FormulaResultContainer} represented as boolean or numeric score (if available).  NULL scores indicate that the corresponding result is not available.
    """ # noqa: E501
    sirius_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sirius Score (isotope + tree score) of the formula candidate.  If NULL result is not available", alias="siriusScore")
    zodiac_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Zodiac Score of the formula candidate.  If NULL result is not available", alias="zodiacScore")
    top_csi_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="CSI:FingerID Score of the top ranking structure candidate of the structure database search  performed for this formula candidate.  If NULL structure database result is not available or the structure candidate list is empty.", alias="topCSIScore")
    confidence_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence Score of the  IF NULL structure database result not available a structure candidate hit of another formula candidate is  the top ranking structure candidate.", alias="confidenceScore")
    canopus_result: Optional[StrictBool] = Field(default=None, description="True if Canopus compound class prediction results are available.", alias="canopusResult")
    __properties: ClassVar[List[str]] = ["siriusScore", "zodiacScore", "topCSIScore", "confidenceScore", "canopusResult"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResultOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResultOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "siriusScore": obj.get("siriusScore"),
            "zodiacScore": obj.get("zodiacScore"),
            "topCSIScore": obj.get("topCSIScore"),
            "confidenceScore": obj.get("confidenceScore"),
            "canopusResult": obj.get("canopusResult")
        })
        return _obj


