# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 5.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormulaCandidate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sirius_score': 'float',
        'isotope_score': 'float',
        'tree_score': 'float',
        'zodiac_score': 'float',
        'molecular_formula': 'str',
        'adduct': 'str',
        'num_ofexplained_peaks': 'int',
        'num_ofexplainable_peaks': 'int',
        'total_explained_intensity': 'float',
        'median_mass_deviation': 'Deviation'
    }

    attribute_map = {
        'sirius_score': 'siriusScore',
        'isotope_score': 'isotopeScore',
        'tree_score': 'treeScore',
        'zodiac_score': 'zodiacScore',
        'molecular_formula': 'molecularFormula',
        'adduct': 'adduct',
        'num_ofexplained_peaks': 'numOfexplainedPeaks',
        'num_ofexplainable_peaks': 'numOfexplainablePeaks',
        'total_explained_intensity': 'totalExplainedIntensity',
        'median_mass_deviation': 'medianMassDeviation'
    }

    def __init__(self, sirius_score=None, isotope_score=None, tree_score=None, zodiac_score=None, molecular_formula=None, adduct=None, num_ofexplained_peaks=None, num_ofexplainable_peaks=None, total_explained_intensity=None, median_mass_deviation=None):  # noqa: E501
        """FormulaCandidate - a model defined in Swagger"""  # noqa: E501
        self._sirius_score = None
        self._isotope_score = None
        self._tree_score = None
        self._zodiac_score = None
        self._molecular_formula = None
        self._adduct = None
        self._num_ofexplained_peaks = None
        self._num_ofexplainable_peaks = None
        self._total_explained_intensity = None
        self._median_mass_deviation = None
        self.discriminator = None
        if sirius_score is not None:
            self.sirius_score = sirius_score
        if isotope_score is not None:
            self.isotope_score = isotope_score
        if tree_score is not None:
            self.tree_score = tree_score
        if zodiac_score is not None:
            self.zodiac_score = zodiac_score
        if molecular_formula is not None:
            self.molecular_formula = molecular_formula
        if adduct is not None:
            self.adduct = adduct
        if num_ofexplained_peaks is not None:
            self.num_ofexplained_peaks = num_ofexplained_peaks
        if num_ofexplainable_peaks is not None:
            self.num_ofexplainable_peaks = num_ofexplainable_peaks
        if total_explained_intensity is not None:
            self.total_explained_intensity = total_explained_intensity
        if median_mass_deviation is not None:
            self.median_mass_deviation = median_mass_deviation

    @property
    def sirius_score(self):
        """Gets the sirius_score of this FormulaCandidate.  # noqa: E501


        :return: The sirius_score of this FormulaCandidate.  # noqa: E501
        :rtype: float
        """
        return self._sirius_score

    @sirius_score.setter
    def sirius_score(self, sirius_score):
        """Sets the sirius_score of this FormulaCandidate.


        :param sirius_score: The sirius_score of this FormulaCandidate.  # noqa: E501
        :type: float
        """

        self._sirius_score = sirius_score

    @property
    def isotope_score(self):
        """Gets the isotope_score of this FormulaCandidate.  # noqa: E501


        :return: The isotope_score of this FormulaCandidate.  # noqa: E501
        :rtype: float
        """
        return self._isotope_score

    @isotope_score.setter
    def isotope_score(self, isotope_score):
        """Sets the isotope_score of this FormulaCandidate.


        :param isotope_score: The isotope_score of this FormulaCandidate.  # noqa: E501
        :type: float
        """

        self._isotope_score = isotope_score

    @property
    def tree_score(self):
        """Gets the tree_score of this FormulaCandidate.  # noqa: E501


        :return: The tree_score of this FormulaCandidate.  # noqa: E501
        :rtype: float
        """
        return self._tree_score

    @tree_score.setter
    def tree_score(self, tree_score):
        """Sets the tree_score of this FormulaCandidate.


        :param tree_score: The tree_score of this FormulaCandidate.  # noqa: E501
        :type: float
        """

        self._tree_score = tree_score

    @property
    def zodiac_score(self):
        """Gets the zodiac_score of this FormulaCandidate.  # noqa: E501


        :return: The zodiac_score of this FormulaCandidate.  # noqa: E501
        :rtype: float
        """
        return self._zodiac_score

    @zodiac_score.setter
    def zodiac_score(self, zodiac_score):
        """Sets the zodiac_score of this FormulaCandidate.


        :param zodiac_score: The zodiac_score of this FormulaCandidate.  # noqa: E501
        :type: float
        """

        self._zodiac_score = zodiac_score

    @property
    def molecular_formula(self):
        """Gets the molecular_formula of this FormulaCandidate.  # noqa: E501


        :return: The molecular_formula of this FormulaCandidate.  # noqa: E501
        :rtype: str
        """
        return self._molecular_formula

    @molecular_formula.setter
    def molecular_formula(self, molecular_formula):
        """Sets the molecular_formula of this FormulaCandidate.


        :param molecular_formula: The molecular_formula of this FormulaCandidate.  # noqa: E501
        :type: str
        """

        self._molecular_formula = molecular_formula

    @property
    def adduct(self):
        """Gets the adduct of this FormulaCandidate.  # noqa: E501


        :return: The adduct of this FormulaCandidate.  # noqa: E501
        :rtype: str
        """
        return self._adduct

    @adduct.setter
    def adduct(self, adduct):
        """Sets the adduct of this FormulaCandidate.


        :param adduct: The adduct of this FormulaCandidate.  # noqa: E501
        :type: str
        """

        self._adduct = adduct

    @property
    def num_ofexplained_peaks(self):
        """Gets the num_ofexplained_peaks of this FormulaCandidate.  # noqa: E501


        :return: The num_ofexplained_peaks of this FormulaCandidate.  # noqa: E501
        :rtype: int
        """
        return self._num_ofexplained_peaks

    @num_ofexplained_peaks.setter
    def num_ofexplained_peaks(self, num_ofexplained_peaks):
        """Sets the num_ofexplained_peaks of this FormulaCandidate.


        :param num_ofexplained_peaks: The num_ofexplained_peaks of this FormulaCandidate.  # noqa: E501
        :type: int
        """

        self._num_ofexplained_peaks = num_ofexplained_peaks

    @property
    def num_ofexplainable_peaks(self):
        """Gets the num_ofexplainable_peaks of this FormulaCandidate.  # noqa: E501


        :return: The num_ofexplainable_peaks of this FormulaCandidate.  # noqa: E501
        :rtype: int
        """
        return self._num_ofexplainable_peaks

    @num_ofexplainable_peaks.setter
    def num_ofexplainable_peaks(self, num_ofexplainable_peaks):
        """Sets the num_ofexplainable_peaks of this FormulaCandidate.


        :param num_ofexplainable_peaks: The num_ofexplainable_peaks of this FormulaCandidate.  # noqa: E501
        :type: int
        """

        self._num_ofexplainable_peaks = num_ofexplainable_peaks

    @property
    def total_explained_intensity(self):
        """Gets the total_explained_intensity of this FormulaCandidate.  # noqa: E501


        :return: The total_explained_intensity of this FormulaCandidate.  # noqa: E501
        :rtype: float
        """
        return self._total_explained_intensity

    @total_explained_intensity.setter
    def total_explained_intensity(self, total_explained_intensity):
        """Sets the total_explained_intensity of this FormulaCandidate.


        :param total_explained_intensity: The total_explained_intensity of this FormulaCandidate.  # noqa: E501
        :type: float
        """

        self._total_explained_intensity = total_explained_intensity

    @property
    def median_mass_deviation(self):
        """Gets the median_mass_deviation of this FormulaCandidate.  # noqa: E501


        :return: The median_mass_deviation of this FormulaCandidate.  # noqa: E501
        :rtype: Deviation
        """
        return self._median_mass_deviation

    @median_mass_deviation.setter
    def median_mass_deviation(self, median_mass_deviation):
        """Sets the median_mass_deviation of this FormulaCandidate.


        :param median_mass_deviation: The median_mass_deviation of this FormulaCandidate.  # noqa: E501
        :type: Deviation
        """

        self._median_mass_deviation = median_mass_deviation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormulaCandidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormulaCandidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
