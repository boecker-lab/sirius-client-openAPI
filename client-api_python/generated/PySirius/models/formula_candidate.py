# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from PySirius.models.deviation import Deviation
from typing import Optional, Set
from typing_extensions import Self

class FormulaCandidate(BaseModel):
    """
    
    """ # noqa: E501
    sirius_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="siriusScore")
    isotope_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="isotopeScore")
    tree_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="treeScore")
    zodiac_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="zodiacScore")
    molecular_formula: Optional[StrictStr] = Field(default=None, alias="molecularFormula")
    adduct: Optional[StrictStr] = None
    num_ofexplained_peaks: Optional[StrictInt] = Field(default=None, alias="numOfexplainedPeaks")
    num_ofexplainable_peaks: Optional[StrictInt] = Field(default=None, alias="numOfexplainablePeaks")
    total_explained_intensity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalExplainedIntensity")
    median_mass_deviation: Optional[Deviation] = Field(default=None, alias="medianMassDeviation")
    __properties: ClassVar[List[str]] = ["siriusScore", "isotopeScore", "treeScore", "zodiacScore", "molecularFormula", "adduct", "numOfexplainedPeaks", "numOfexplainablePeaks", "totalExplainedIntensity", "medianMassDeviation"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormulaCandidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of median_mass_deviation
        if self.median_mass_deviation:
            _dict['medianMassDeviation'] = self.median_mass_deviation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormulaCandidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "siriusScore": obj.get("siriusScore"),
            "isotopeScore": obj.get("isotopeScore"),
            "treeScore": obj.get("treeScore"),
            "zodiacScore": obj.get("zodiacScore"),
            "molecularFormula": obj.get("molecularFormula"),
            "adduct": obj.get("adduct"),
            "numOfexplainedPeaks": obj.get("numOfexplainedPeaks"),
            "numOfexplainablePeaks": obj.get("numOfexplainablePeaks"),
            "totalExplainedIntensity": obj.get("totalExplainedIntensity"),
            "medianMassDeviation": Deviation.from_dict(obj["medianMassDeviation"]) if obj.get("medianMassDeviation") is not None else None
        })
        return _obj


