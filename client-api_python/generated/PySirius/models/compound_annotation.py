# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.compound_classes import CompoundClasses
from PySirius.models.formula_candidate import FormulaCandidate
from PySirius.models.structure_candidate import StructureCandidate
from typing import Optional, Set
from typing_extensions import Self

class CompoundAnnotation(BaseModel):
    """
    Summary of the results of a Compound. Can be added to a CompoundId.  It is null within a CompoundId if it was not requested und non-null otherwise.  The different summary fields within this summary object are null if the corresponding  compound does not contain the represented results. If fields are non-null  the corresponding result has been computed but might still be empty.
    """ # noqa: E501
    formula_annotation: Optional[FormulaCandidate] = Field(default=None, alias="formulaAnnotation")
    structure_annotation: Optional[StructureCandidate] = Field(default=None, alias="structureAnnotation")
    compound_class_annotation: Optional[CompoundClasses] = Field(default=None, alias="compoundClassAnnotation")
    __properties: ClassVar[List[str]] = ["formulaAnnotation", "structureAnnotation", "compoundClassAnnotation"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompoundAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of formula_annotation
        if self.formula_annotation:
            _dict['formulaAnnotation'] = self.formula_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structure_annotation
        if self.structure_annotation:
            _dict['structureAnnotation'] = self.structure_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compound_class_annotation
        if self.compound_class_annotation:
            _dict['compoundClassAnnotation'] = self.compound_class_annotation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompoundAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formulaAnnotation": FormulaCandidate.from_dict(obj["formulaAnnotation"]) if obj.get("formulaAnnotation") is not None else None,
            "structureAnnotation": StructureCandidate.from_dict(obj["structureAnnotation"]) if obj.get("structureAnnotation") is not None else None,
            "compoundClassAnnotation": CompoundClasses.from_dict(obj["compoundClassAnnotation"]) if obj.get("compoundClassAnnotation") is not None else None
        })
        return _obj


