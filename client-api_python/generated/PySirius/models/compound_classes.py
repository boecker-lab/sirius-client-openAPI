# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.compound_class import CompoundClass
from typing import Optional, Set
from typing_extensions import Self

class CompoundClasses(BaseModel):
    """
    Container class that holds the best matching compound class for different levels of each ontology for a  certain compound/feature/predicted fingerprint.
    """ # noqa: E501
    npc_pathway: Optional[CompoundClass] = Field(default=None, alias="npcPathway")
    npc_superclass: Optional[CompoundClass] = Field(default=None, alias="npcSuperclass")
    npc_class: Optional[CompoundClass] = Field(default=None, alias="npcClass")
    classy_fire_most_specific: Optional[CompoundClass] = Field(default=None, alias="classyFireMostSpecific")
    classy_fire_level5: Optional[CompoundClass] = Field(default=None, alias="classyFireLevel5")
    classy_fire_class: Optional[CompoundClass] = Field(default=None, alias="classyFireClass")
    classy_fire_sub_class: Optional[CompoundClass] = Field(default=None, alias="classyFireSubClass")
    classy_fire_super_class: Optional[CompoundClass] = Field(default=None, alias="classyFireSuperClass")
    __properties: ClassVar[List[str]] = ["npcPathway", "npcSuperclass", "npcClass", "classyFireMostSpecific", "classyFireLevel5", "classyFireClass", "classyFireSubClass", "classyFireSuperClass"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompoundClasses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of npc_pathway
        if self.npc_pathway:
            _dict['npcPathway'] = self.npc_pathway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of npc_superclass
        if self.npc_superclass:
            _dict['npcSuperclass'] = self.npc_superclass.to_dict()
        # override the default output from pydantic by calling `to_dict()` of npc_class
        if self.npc_class:
            _dict['npcClass'] = self.npc_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classy_fire_most_specific
        if self.classy_fire_most_specific:
            _dict['classyFireMostSpecific'] = self.classy_fire_most_specific.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classy_fire_level5
        if self.classy_fire_level5:
            _dict['classyFireLevel5'] = self.classy_fire_level5.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classy_fire_class
        if self.classy_fire_class:
            _dict['classyFireClass'] = self.classy_fire_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classy_fire_sub_class
        if self.classy_fire_sub_class:
            _dict['classyFireSubClass'] = self.classy_fire_sub_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classy_fire_super_class
        if self.classy_fire_super_class:
            _dict['classyFireSuperClass'] = self.classy_fire_super_class.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompoundClasses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "npcPathway": CompoundClass.from_dict(obj["npcPathway"]) if obj.get("npcPathway") is not None else None,
            "npcSuperclass": CompoundClass.from_dict(obj["npcSuperclass"]) if obj.get("npcSuperclass") is not None else None,
            "npcClass": CompoundClass.from_dict(obj["npcClass"]) if obj.get("npcClass") is not None else None,
            "classyFireMostSpecific": CompoundClass.from_dict(obj["classyFireMostSpecific"]) if obj.get("classyFireMostSpecific") is not None else None,
            "classyFireLevel5": CompoundClass.from_dict(obj["classyFireLevel5"]) if obj.get("classyFireLevel5") is not None else None,
            "classyFireClass": CompoundClass.from_dict(obj["classyFireClass"]) if obj.get("classyFireClass") is not None else None,
            "classyFireSubClass": CompoundClass.from_dict(obj["classyFireSubClass"]) if obj.get("classyFireSubClass") is not None else None,
            "classyFireSuperClass": CompoundClass.from_dict(obj["classyFireSuperClass"]) if obj.get("classyFireSuperClass") is not None else None
        })
        return _obj


