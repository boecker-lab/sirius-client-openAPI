# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 6.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StructureCandidate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'structure_name': 'str',
        'smiles': 'str',
        'csi_score': 'float',
        'tanimoto_similarity': 'float',
        'confidence_score': 'float',
        'num_of_pub_med_ids': 'int',
        'xlog_p': 'float',
        'inchi_key': 'str',
        'fp_bits_set': 'list[int]',
        'db_links': 'list[DBLink]',
        'pubmed_ids': 'list[int]'
    }

    attribute_map = {
        'structure_name': 'structureName',
        'smiles': 'smiles',
        'csi_score': 'csiScore',
        'tanimoto_similarity': 'tanimotoSimilarity',
        'confidence_score': 'confidenceScore',
        'num_of_pub_med_ids': 'numOfPubMedIds',
        'xlog_p': 'xlogP',
        'inchi_key': 'inchiKey',
        'fp_bits_set': 'fpBitsSet',
        'db_links': 'dbLinks',
        'pubmed_ids': 'pubmedIds'
    }

    def __init__(self, structure_name=None, smiles=None, csi_score=None, tanimoto_similarity=None, confidence_score=None, num_of_pub_med_ids=None, xlog_p=None, inchi_key=None, fp_bits_set=None, db_links=None, pubmed_ids=None):  # noqa: E501
        """StructureCandidate - a model defined in Swagger"""  # noqa: E501
        self._structure_name = None
        self._smiles = None
        self._csi_score = None
        self._tanimoto_similarity = None
        self._confidence_score = None
        self._num_of_pub_med_ids = None
        self._xlog_p = None
        self._inchi_key = None
        self._fp_bits_set = None
        self._db_links = None
        self._pubmed_ids = None
        self.discriminator = None
        if structure_name is not None:
            self.structure_name = structure_name
        if smiles is not None:
            self.smiles = smiles
        if csi_score is not None:
            self.csi_score = csi_score
        if tanimoto_similarity is not None:
            self.tanimoto_similarity = tanimoto_similarity
        if confidence_score is not None:
            self.confidence_score = confidence_score
        if num_of_pub_med_ids is not None:
            self.num_of_pub_med_ids = num_of_pub_med_ids
        if xlog_p is not None:
            self.xlog_p = xlog_p
        if inchi_key is not None:
            self.inchi_key = inchi_key
        if fp_bits_set is not None:
            self.fp_bits_set = fp_bits_set
        if db_links is not None:
            self.db_links = db_links
        if pubmed_ids is not None:
            self.pubmed_ids = pubmed_ids

    @property
    def structure_name(self):
        """Gets the structure_name of this StructureCandidate.  # noqa: E501


        :return: The structure_name of this StructureCandidate.  # noqa: E501
        :rtype: str
        """
        return self._structure_name

    @structure_name.setter
    def structure_name(self, structure_name):
        """Sets the structure_name of this StructureCandidate.


        :param structure_name: The structure_name of this StructureCandidate.  # noqa: E501
        :type: str
        """

        self._structure_name = structure_name

    @property
    def smiles(self):
        """Gets the smiles of this StructureCandidate.  # noqa: E501


        :return: The smiles of this StructureCandidate.  # noqa: E501
        :rtype: str
        """
        return self._smiles

    @smiles.setter
    def smiles(self, smiles):
        """Sets the smiles of this StructureCandidate.


        :param smiles: The smiles of this StructureCandidate.  # noqa: E501
        :type: str
        """

        self._smiles = smiles

    @property
    def csi_score(self):
        """Gets the csi_score of this StructureCandidate.  # noqa: E501


        :return: The csi_score of this StructureCandidate.  # noqa: E501
        :rtype: float
        """
        return self._csi_score

    @csi_score.setter
    def csi_score(self, csi_score):
        """Sets the csi_score of this StructureCandidate.


        :param csi_score: The csi_score of this StructureCandidate.  # noqa: E501
        :type: float
        """

        self._csi_score = csi_score

    @property
    def tanimoto_similarity(self):
        """Gets the tanimoto_similarity of this StructureCandidate.  # noqa: E501


        :return: The tanimoto_similarity of this StructureCandidate.  # noqa: E501
        :rtype: float
        """
        return self._tanimoto_similarity

    @tanimoto_similarity.setter
    def tanimoto_similarity(self, tanimoto_similarity):
        """Sets the tanimoto_similarity of this StructureCandidate.


        :param tanimoto_similarity: The tanimoto_similarity of this StructureCandidate.  # noqa: E501
        :type: float
        """

        self._tanimoto_similarity = tanimoto_similarity

    @property
    def confidence_score(self):
        """Gets the confidence_score of this StructureCandidate.  # noqa: E501


        :return: The confidence_score of this StructureCandidate.  # noqa: E501
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """Sets the confidence_score of this StructureCandidate.


        :param confidence_score: The confidence_score of this StructureCandidate.  # noqa: E501
        :type: float
        """

        self._confidence_score = confidence_score

    @property
    def num_of_pub_med_ids(self):
        """Gets the num_of_pub_med_ids of this StructureCandidate.  # noqa: E501


        :return: The num_of_pub_med_ids of this StructureCandidate.  # noqa: E501
        :rtype: int
        """
        return self._num_of_pub_med_ids

    @num_of_pub_med_ids.setter
    def num_of_pub_med_ids(self, num_of_pub_med_ids):
        """Sets the num_of_pub_med_ids of this StructureCandidate.


        :param num_of_pub_med_ids: The num_of_pub_med_ids of this StructureCandidate.  # noqa: E501
        :type: int
        """

        self._num_of_pub_med_ids = num_of_pub_med_ids

    @property
    def xlog_p(self):
        """Gets the xlog_p of this StructureCandidate.  # noqa: E501


        :return: The xlog_p of this StructureCandidate.  # noqa: E501
        :rtype: float
        """
        return self._xlog_p

    @xlog_p.setter
    def xlog_p(self, xlog_p):
        """Sets the xlog_p of this StructureCandidate.


        :param xlog_p: The xlog_p of this StructureCandidate.  # noqa: E501
        :type: float
        """

        self._xlog_p = xlog_p

    @property
    def inchi_key(self):
        """Gets the inchi_key of this StructureCandidate.  # noqa: E501


        :return: The inchi_key of this StructureCandidate.  # noqa: E501
        :rtype: str
        """
        return self._inchi_key

    @inchi_key.setter
    def inchi_key(self, inchi_key):
        """Sets the inchi_key of this StructureCandidate.


        :param inchi_key: The inchi_key of this StructureCandidate.  # noqa: E501
        :type: str
        """

        self._inchi_key = inchi_key

    @property
    def fp_bits_set(self):
        """Gets the fp_bits_set of this StructureCandidate.  # noqa: E501

        Array containing the indices of the molecular fingerprint that are available in the structure (1)  OPTIONAL: needs to be added by parameter  # noqa: E501

        :return: The fp_bits_set of this StructureCandidate.  # noqa: E501
        :rtype: list[int]
        """
        return self._fp_bits_set

    @fp_bits_set.setter
    def fp_bits_set(self, fp_bits_set):
        """Sets the fp_bits_set of this StructureCandidate.

        Array containing the indices of the molecular fingerprint that are available in the structure (1)  OPTIONAL: needs to be added by parameter  # noqa: E501

        :param fp_bits_set: The fp_bits_set of this StructureCandidate.  # noqa: E501
        :type: list[int]
        """

        self._fp_bits_set = fp_bits_set

    @property
    def db_links(self):
        """Gets the db_links of this StructureCandidate.  # noqa: E501

        List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter  # noqa: E501

        :return: The db_links of this StructureCandidate.  # noqa: E501
        :rtype: list[DBLink]
        """
        return self._db_links

    @db_links.setter
    def db_links(self, db_links):
        """Sets the db_links of this StructureCandidate.

        List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter  # noqa: E501

        :param db_links: The db_links of this StructureCandidate.  # noqa: E501
        :type: list[DBLink]
        """

        self._db_links = db_links

    @property
    def pubmed_ids(self):
        """Gets the pubmed_ids of this StructureCandidate.  # noqa: E501

        PubMed IDs belonging to this structure candidate  OPTIONAL: needs to be added by parameter  # noqa: E501

        :return: The pubmed_ids of this StructureCandidate.  # noqa: E501
        :rtype: list[int]
        """
        return self._pubmed_ids

    @pubmed_ids.setter
    def pubmed_ids(self, pubmed_ids):
        """Sets the pubmed_ids of this StructureCandidate.

        PubMed IDs belonging to this structure candidate  OPTIONAL: needs to be added by parameter  # noqa: E501

        :param pubmed_ids: The pubmed_ids of this StructureCandidate.  # noqa: E501
        :type: list[int]
        """

        self._pubmed_ids = pubmed_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StructureCandidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructureCandidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
