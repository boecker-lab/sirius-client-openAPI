# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 6.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LCMSFeatureSummaryQualityData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'peak_quality_result': 'LCMSQualityCheckResult',
        'isotope_quality_result': 'LCMSQualityCheckResult',
        'adduct_quality_result': 'LCMSQualityCheckResult',
        'ms2_quality_result': 'LCMSQualityCheckResult'
    }

    attribute_map = {
        'peak_quality_result': 'peakQualityResult',
        'isotope_quality_result': 'isotopeQualityResult',
        'adduct_quality_result': 'adductQualityResult',
        'ms2_quality_result': 'ms2QualityResult'
    }

    def __init__(self, peak_quality_result=None, isotope_quality_result=None, adduct_quality_result=None, ms2_quality_result=None):  # noqa: E501
        """LCMSFeatureSummaryQualityData - a model defined in Swagger"""  # noqa: E501
        self._peak_quality_result = None
        self._isotope_quality_result = None
        self._adduct_quality_result = None
        self._ms2_quality_result = None
        self.discriminator = None
        if peak_quality_result is not None:
            self.peak_quality_result = peak_quality_result
        if isotope_quality_result is not None:
            self.isotope_quality_result = isotope_quality_result
        if adduct_quality_result is not None:
            self.adduct_quality_result = adduct_quality_result
        if ms2_quality_result is not None:
            self.ms2_quality_result = ms2_quality_result

    @property
    def peak_quality_result(self):
        """Gets the peak_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501


        :return: The peak_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._peak_quality_result

    @peak_quality_result.setter
    def peak_quality_result(self, peak_quality_result):
        """Sets the peak_quality_result of this LCMSFeatureSummaryQualityData.


        :param peak_quality_result: The peak_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._peak_quality_result = peak_quality_result

    @property
    def isotope_quality_result(self):
        """Gets the isotope_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501


        :return: The isotope_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._isotope_quality_result

    @isotope_quality_result.setter
    def isotope_quality_result(self, isotope_quality_result):
        """Sets the isotope_quality_result of this LCMSFeatureSummaryQualityData.


        :param isotope_quality_result: The isotope_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._isotope_quality_result = isotope_quality_result

    @property
    def adduct_quality_result(self):
        """Gets the adduct_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501


        :return: The adduct_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._adduct_quality_result

    @adduct_quality_result.setter
    def adduct_quality_result(self, adduct_quality_result):
        """Sets the adduct_quality_result of this LCMSFeatureSummaryQualityData.


        :param adduct_quality_result: The adduct_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._adduct_quality_result = adduct_quality_result

    @property
    def ms2_quality_result(self):
        """Gets the ms2_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501


        :return: The ms2_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._ms2_quality_result

    @ms2_quality_result.setter
    def ms2_quality_result(self, ms2_quality_result):
        """Sets the ms2_quality_result of this LCMSFeatureSummaryQualityData.


        :param ms2_quality_result: The ms2_quality_result of this LCMSFeatureSummaryQualityData.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._ms2_quality_result = ms2_quality_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LCMSFeatureSummaryQualityData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LCMSFeatureSummaryQualityData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
