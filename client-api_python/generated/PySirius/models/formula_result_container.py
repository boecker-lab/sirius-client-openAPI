# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 5.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormulaResultContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'molecular_formula': 'str',
        'adduct': 'str',
        'result_overview': 'ResultOverview',
        'candidate': 'FormulaCandidate'
    }

    attribute_map = {
        'id': 'id',
        'molecular_formula': 'molecularFormula',
        'adduct': 'adduct',
        'result_overview': 'resultOverview',
        'candidate': 'candidate'
    }

    def __init__(self, id=None, molecular_formula=None, adduct=None, result_overview=None, candidate=None):  # noqa: E501
        """FormulaResultContainer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._molecular_formula = None
        self._adduct = None
        self._result_overview = None
        self._candidate = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if molecular_formula is not None:
            self.molecular_formula = molecular_formula
        if adduct is not None:
            self.adduct = adduct
        if result_overview is not None:
            self.result_overview = result_overview
        if candidate is not None:
            self.candidate = candidate

    @property
    def id(self):
        """Gets the id of this FormulaResultContainer.  # noqa: E501

        Unique identifier of this formula candidate  # noqa: E501

        :return: The id of this FormulaResultContainer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormulaResultContainer.

        Unique identifier of this formula candidate  # noqa: E501

        :param id: The id of this FormulaResultContainer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def molecular_formula(self):
        """Gets the molecular_formula of this FormulaResultContainer.  # noqa: E501

        molecular formula of this formula candidate  # noqa: E501

        :return: The molecular_formula of this FormulaResultContainer.  # noqa: E501
        :rtype: str
        """
        return self._molecular_formula

    @molecular_formula.setter
    def molecular_formula(self, molecular_formula):
        """Sets the molecular_formula of this FormulaResultContainer.

        molecular formula of this formula candidate  # noqa: E501

        :param molecular_formula: The molecular_formula of this FormulaResultContainer.  # noqa: E501
        :type: str
        """

        self._molecular_formula = molecular_formula

    @property
    def adduct(self):
        """Gets the adduct of this FormulaResultContainer.  # noqa: E501

        Adduct of this formula candidate  # noqa: E501

        :return: The adduct of this FormulaResultContainer.  # noqa: E501
        :rtype: str
        """
        return self._adduct

    @adduct.setter
    def adduct(self, adduct):
        """Sets the adduct of this FormulaResultContainer.

        Adduct of this formula candidate  # noqa: E501

        :param adduct: The adduct of this FormulaResultContainer.  # noqa: E501
        :type: str
        """

        self._adduct = adduct

    @property
    def result_overview(self):
        """Gets the result_overview of this FormulaResultContainer.  # noqa: E501


        :return: The result_overview of this FormulaResultContainer.  # noqa: E501
        :rtype: ResultOverview
        """
        return self._result_overview

    @result_overview.setter
    def result_overview(self, result_overview):
        """Sets the result_overview of this FormulaResultContainer.


        :param result_overview: The result_overview of this FormulaResultContainer.  # noqa: E501
        :type: ResultOverview
        """

        self._result_overview = result_overview

    @property
    def candidate(self):
        """Gets the candidate of this FormulaResultContainer.  # noqa: E501


        :return: The candidate of this FormulaResultContainer.  # noqa: E501
        :rtype: FormulaCandidate
        """
        return self._candidate

    @candidate.setter
    def candidate(self, candidate):
        """Sets the candidate of this FormulaResultContainer.


        :param candidate: The candidate of this FormulaResultContainer.  # noqa: E501
        :type: FormulaCandidate
        """

        self._candidate = candidate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormulaResultContainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormulaResultContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
