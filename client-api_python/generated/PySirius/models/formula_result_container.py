# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from PySirius.models.formula_candidate import FormulaCandidate
from PySirius.models.result_overview import ResultOverview
from typing import Optional, Set
from typing_extensions import Self

class FormulaResultContainer(BaseModel):
    """
    Container for formula level results that holds a unique identifier (molecular formula + adduct).  It can be extended/annotated with a list of results that are available for this formula candidate and their scores.  It can further be extended/annotated with the action formula candidate results.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of this formula candidate")
    molecular_formula: Optional[StrictStr] = Field(default=None, description="molecular formula of this formula candidate", alias="molecularFormula")
    adduct: Optional[StrictStr] = Field(default=None, description="Adduct of this formula candidate")
    result_overview: Optional[ResultOverview] = Field(default=None, alias="resultOverview")
    candidate: Optional[FormulaCandidate] = None
    __properties: ClassVar[List[str]] = ["id", "molecularFormula", "adduct", "resultOverview", "candidate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormulaResultContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result_overview
        if self.result_overview:
            _dict['resultOverview'] = self.result_overview.to_dict()
        # override the default output from pydantic by calling `to_dict()` of candidate
        if self.candidate:
            _dict['candidate'] = self.candidate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormulaResultContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "molecularFormula": obj.get("molecularFormula"),
            "adduct": obj.get("adduct"),
            "resultOverview": ResultOverview.from_dict(obj["resultOverview"]) if obj.get("resultOverview") is not None else None,
            "candidate": FormulaCandidate.from_dict(obj["candidate"]) if obj.get("candidate") is not None else None
        })
        return _obj


