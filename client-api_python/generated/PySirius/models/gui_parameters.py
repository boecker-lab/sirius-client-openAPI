# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 5.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GuiParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'selected_tab': 'str',
        'cid': 'str',
        'fid': 'str',
        'structure_candidate_in_ch_i_key': 'str',
        'bring_to_front': 'bool'
    }

    attribute_map = {
        'selected_tab': 'selectedTab',
        'cid': 'cid',
        'fid': 'fid',
        'structure_candidate_in_ch_i_key': 'structureCandidateInChIKey',
        'bring_to_front': 'bringToFront'
    }

    def __init__(self, selected_tab=None, cid=None, fid=None, structure_candidate_in_ch_i_key=None, bring_to_front=None):  # noqa: E501
        """GuiParameters - a model defined in Swagger"""  # noqa: E501
        self._selected_tab = None
        self._cid = None
        self._fid = None
        self._structure_candidate_in_ch_i_key = None
        self._bring_to_front = None
        self.discriminator = None
        if selected_tab is not None:
            self.selected_tab = selected_tab
        if cid is not None:
            self.cid = cid
        if fid is not None:
            self.fid = fid
        if structure_candidate_in_ch_i_key is not None:
            self.structure_candidate_in_ch_i_key = structure_candidate_in_ch_i_key
        if bring_to_front is not None:
            self.bring_to_front = bring_to_front

    @property
    def selected_tab(self):
        """Gets the selected_tab of this GuiParameters.  # noqa: E501

        Selected Result ab.  # noqa: E501

        :return: The selected_tab of this GuiParameters.  # noqa: E501
        :rtype: str
        """
        return self._selected_tab

    @selected_tab.setter
    def selected_tab(self, selected_tab):
        """Sets the selected_tab of this GuiParameters.

        Selected Result ab.  # noqa: E501

        :param selected_tab: The selected_tab of this GuiParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["FORMULAS", "SPECTRA", "TREES", "PREDICTED_FINGERPRINT", "STRUCTURES", "STRUCTURE_ANNOTATION", "COMPOUND_CLASSES"]  # noqa: E501
        if selected_tab not in allowed_values:
            raise ValueError(
                "Invalid value for `selected_tab` ({0}), must be one of {1}"  # noqa: E501
                .format(selected_tab, allowed_values)
            )

        self._selected_tab = selected_tab

    @property
    def cid(self):
        """Gets the cid of this GuiParameters.  # noqa: E501

        ID of Selected compound.  # noqa: E501

        :return: The cid of this GuiParameters.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this GuiParameters.

        ID of Selected compound.  # noqa: E501

        :param cid: The cid of this GuiParameters.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def fid(self):
        """Gets the fid of this GuiParameters.  # noqa: E501

        ID of Selected Formula candidate of the selected compound.  # noqa: E501

        :return: The fid of this GuiParameters.  # noqa: E501
        :rtype: str
        """
        return self._fid

    @fid.setter
    def fid(self, fid):
        """Sets the fid of this GuiParameters.

        ID of Selected Formula candidate of the selected compound.  # noqa: E501

        :param fid: The fid of this GuiParameters.  # noqa: E501
        :type: str
        """

        self._fid = fid

    @property
    def structure_candidate_in_ch_i_key(self):
        """Gets the structure_candidate_in_ch_i_key of this GuiParameters.  # noqa: E501

        InChIKey of selected structure candidate of selected formula candidate.  # noqa: E501

        :return: The structure_candidate_in_ch_i_key of this GuiParameters.  # noqa: E501
        :rtype: str
        """
        return self._structure_candidate_in_ch_i_key

    @structure_candidate_in_ch_i_key.setter
    def structure_candidate_in_ch_i_key(self, structure_candidate_in_ch_i_key):
        """Sets the structure_candidate_in_ch_i_key of this GuiParameters.

        InChIKey of selected structure candidate of selected formula candidate.  # noqa: E501

        :param structure_candidate_in_ch_i_key: The structure_candidate_in_ch_i_key of this GuiParameters.  # noqa: E501
        :type: str
        """

        self._structure_candidate_in_ch_i_key = structure_candidate_in_ch_i_key

    @property
    def bring_to_front(self):
        """Gets the bring_to_front of this GuiParameters.  # noqa: E501

        If true bring SIRIUS GUI window to foreground.  # noqa: E501

        :return: The bring_to_front of this GuiParameters.  # noqa: E501
        :rtype: bool
        """
        return self._bring_to_front

    @bring_to_front.setter
    def bring_to_front(self, bring_to_front):
        """Sets the bring_to_front of this GuiParameters.

        If true bring SIRIUS GUI window to foreground.  # noqa: E501

        :param bring_to_front: The bring_to_front of this GuiParameters.  # noqa: E501
        :type: bool
        """

        self._bring_to_front = bring_to_front

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuiParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuiParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
