# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ImportLocalFilesSubmission(BaseModel):
    """
    
    """ # noqa: E501
    allow_ms1_only_data: Optional[StrictBool] = Field(default=None, alias="allowMs1OnlyData")
    ignore_formulas: Optional[StrictBool] = Field(default=None, alias="ignoreFormulas")
    align_lcms_runs: Optional[StrictBool] = Field(default=None, alias="alignLCMSRuns")
    input_paths: List[StrictStr] = Field(alias="inputPaths")
    __properties: ClassVar[List[str]] = ["allowMs1OnlyData", "ignoreFormulas", "alignLCMSRuns", "inputPaths"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportLocalFilesSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if allow_ms1_only_data (nullable) is None
        # and model_fields_set contains the field
        if self.allow_ms1_only_data is None and "allow_ms1_only_data" in self.model_fields_set:
            _dict['allowMs1OnlyData'] = None

        # set to None if ignore_formulas (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_formulas is None and "ignore_formulas" in self.model_fields_set:
            _dict['ignoreFormulas'] = None

        # set to None if align_lcms_runs (nullable) is None
        # and model_fields_set contains the field
        if self.align_lcms_runs is None and "align_lcms_runs" in self.model_fields_set:
            _dict['alignLCMSRuns'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportLocalFilesSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowMs1OnlyData": obj.get("allowMs1OnlyData"),
            "ignoreFormulas": obj.get("ignoreFormulas"),
            "alignLCMSRuns": obj.get("alignLCMSRuns"),
            "inputPaths": obj.get("inputPaths")
        })
        return _obj


