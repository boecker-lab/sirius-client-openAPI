# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 6.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LCMSFeatureQuality(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'peak_quality': 'LCMSQualityCheckResult',
        'isotope_quality': 'LCMSQualityCheckResult',
        'adduct_quality': 'LCMSQualityCheckResult',
        'ms2_quality': 'LCMSQualityCheckResult'
    }

    attribute_map = {
        'peak_quality': 'peakQuality',
        'isotope_quality': 'isotopeQuality',
        'adduct_quality': 'adductQuality',
        'ms2_quality': 'ms2Quality'
    }

    def __init__(self, peak_quality=None, isotope_quality=None, adduct_quality=None, ms2_quality=None):  # noqa: E501
        """LCMSFeatureQuality - a model defined in Swagger"""  # noqa: E501
        self._peak_quality = None
        self._isotope_quality = None
        self._adduct_quality = None
        self._ms2_quality = None
        self.discriminator = None
        if peak_quality is not None:
            self.peak_quality = peak_quality
        if isotope_quality is not None:
            self.isotope_quality = isotope_quality
        if adduct_quality is not None:
            self.adduct_quality = adduct_quality
        if ms2_quality is not None:
            self.ms2_quality = ms2_quality

    @property
    def peak_quality(self):
        """Gets the peak_quality of this LCMSFeatureQuality.  # noqa: E501


        :return: The peak_quality of this LCMSFeatureQuality.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._peak_quality

    @peak_quality.setter
    def peak_quality(self, peak_quality):
        """Sets the peak_quality of this LCMSFeatureQuality.


        :param peak_quality: The peak_quality of this LCMSFeatureQuality.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._peak_quality = peak_quality

    @property
    def isotope_quality(self):
        """Gets the isotope_quality of this LCMSFeatureQuality.  # noqa: E501


        :return: The isotope_quality of this LCMSFeatureQuality.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._isotope_quality

    @isotope_quality.setter
    def isotope_quality(self, isotope_quality):
        """Sets the isotope_quality of this LCMSFeatureQuality.


        :param isotope_quality: The isotope_quality of this LCMSFeatureQuality.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._isotope_quality = isotope_quality

    @property
    def adduct_quality(self):
        """Gets the adduct_quality of this LCMSFeatureQuality.  # noqa: E501


        :return: The adduct_quality of this LCMSFeatureQuality.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._adduct_quality

    @adduct_quality.setter
    def adduct_quality(self, adduct_quality):
        """Sets the adduct_quality of this LCMSFeatureQuality.


        :param adduct_quality: The adduct_quality of this LCMSFeatureQuality.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._adduct_quality = adduct_quality

    @property
    def ms2_quality(self):
        """Gets the ms2_quality of this LCMSFeatureQuality.  # noqa: E501


        :return: The ms2_quality of this LCMSFeatureQuality.  # noqa: E501
        :rtype: LCMSQualityCheckResult
        """
        return self._ms2_quality

    @ms2_quality.setter
    def ms2_quality(self, ms2_quality):
        """Sets the ms2_quality of this LCMSFeatureQuality.


        :param ms2_quality: The ms2_quality of this LCMSFeatureQuality.  # noqa: E501
        :type: LCMSQualityCheckResult
        """

        self._ms2_quality = ms2_quality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LCMSFeatureQuality, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LCMSFeatureQuality):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
