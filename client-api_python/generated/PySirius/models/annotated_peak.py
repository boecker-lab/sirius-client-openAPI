# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 6.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotatedPeak(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mass': 'float',
        'intensity': 'float',
        'peak_annotation': 'PeakAnnotation'
    }

    attribute_map = {
        'mass': 'mass',
        'intensity': 'intensity',
        'peak_annotation': 'peakAnnotation'
    }

    def __init__(self, mass=None, intensity=None, peak_annotation=None):  # noqa: E501
        """AnnotatedPeak - a model defined in Swagger"""  # noqa: E501
        self._mass = None
        self._intensity = None
        self._peak_annotation = None
        self.discriminator = None
        if mass is not None:
            self.mass = mass
        if intensity is not None:
            self.intensity = intensity
        if peak_annotation is not None:
            self.peak_annotation = peak_annotation

    @property
    def mass(self):
        """Gets the mass of this AnnotatedPeak.  # noqa: E501


        :return: The mass of this AnnotatedPeak.  # noqa: E501
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this AnnotatedPeak.


        :param mass: The mass of this AnnotatedPeak.  # noqa: E501
        :type: float
        """

        self._mass = mass

    @property
    def intensity(self):
        """Gets the intensity of this AnnotatedPeak.  # noqa: E501


        :return: The intensity of this AnnotatedPeak.  # noqa: E501
        :rtype: float
        """
        return self._intensity

    @intensity.setter
    def intensity(self, intensity):
        """Sets the intensity of this AnnotatedPeak.


        :param intensity: The intensity of this AnnotatedPeak.  # noqa: E501
        :type: float
        """

        self._intensity = intensity

    @property
    def peak_annotation(self):
        """Gets the peak_annotation of this AnnotatedPeak.  # noqa: E501


        :return: The peak_annotation of this AnnotatedPeak.  # noqa: E501
        :rtype: PeakAnnotation
        """
        return self._peak_annotation

    @peak_annotation.setter
    def peak_annotation(self, peak_annotation):
        """Sets the peak_annotation of this AnnotatedPeak.


        :param peak_annotation: The peak_annotation of this AnnotatedPeak.  # noqa: E501
        :type: PeakAnnotation
        """

        self._peak_annotation = peak_annotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotatedPeak, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotatedPeak):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
