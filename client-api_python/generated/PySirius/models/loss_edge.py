# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from PySirius.models.fragment_node import FragmentNode
from typing import Optional, Set
from typing_extensions import Self

class LossEdge(BaseModel):
    """
    
    """ # noqa: E501
    source_fragment: Optional[FragmentNode] = Field(default=None, alias="sourceFragment")
    target_fragment: Optional[FragmentNode] = Field(default=None, alias="targetFragment")
    molecular_formula: Optional[StrictStr] = Field(default=None, alias="molecularFormula")
    score: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["sourceFragment", "targetFragment", "molecularFormula", "score"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LossEdge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_fragment
        if self.source_fragment:
            _dict['sourceFragment'] = self.source_fragment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_fragment
        if self.target_fragment:
            _dict['targetFragment'] = self.target_fragment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LossEdge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceFragment": FragmentNode.from_dict(obj["sourceFragment"]) if obj.get("sourceFragment") is not None else None,
            "targetFragment": FragmentNode.from_dict(obj["targetFragment"]) if obj.get("targetFragment") is not None else None,
            "molecularFormula": obj.get("molecularFormula"),
            "score": obj.get("score")
        })
        return _obj


