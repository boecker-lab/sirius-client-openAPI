# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from PySirius.models.compound_annotation import CompoundAnnotation
from PySirius.models.ms_data import MsData
from typing import Optional, Set
from typing_extensions import Self

class CompoundId(BaseModel):
    """
    The CompoundId contains the ID of a compound together with some read-only information that might be displayed in  some summary view.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    index: Optional[StrictInt] = None
    ion_mass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ionMass")
    ion_type: Optional[StrictStr] = Field(default=None, alias="ionType")
    rt_start_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtStartSeconds")
    rt_end_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtEndSeconds")
    top_annotation: Optional[CompoundAnnotation] = Field(default=None, alias="topAnnotation")
    ms_data: Optional[MsData] = Field(default=None, alias="msData")
    quality_flags: Optional[List[StrictStr]] = Field(default=None, description="Contains all pre-computation quality information that belong to  this compound, such as information about the quality of the peak shape, MS2 spectrum etc.,  see ({@link CompoundQuality.CompoundQualityFlag CompoundQuality.CompoundQualityFlag})  <p>  Each Compound has a Set of Quality assessment flags.", alias="qualityFlags")
    computing: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "name", "index", "ionMass", "ionType", "rtStartSeconds", "rtEndSeconds", "topAnnotation", "msData", "qualityFlags", "computing"]

    @field_validator('quality_flags')
    def quality_flags_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Good', 'LowIntensity', 'NoMS1Peak', 'FewPeaks', 'Chimeric', 'NotMonoisotopicPeak', 'PoorlyExplained', 'UNKNOWN', 'BadIsotopePattern', 'BadPeakShape']):
                raise ValueError("each list item must be one of ('Good', 'LowIntensity', 'NoMS1Peak', 'FewPeaks', 'Chimeric', 'NotMonoisotopicPeak', 'PoorlyExplained', 'UNKNOWN', 'BadIsotopePattern', 'BadPeakShape')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompoundId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of top_annotation
        if self.top_annotation:
            _dict['topAnnotation'] = self.top_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ms_data
        if self.ms_data:
            _dict['msData'] = self.ms_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompoundId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "index": obj.get("index"),
            "ionMass": obj.get("ionMass"),
            "ionType": obj.get("ionType"),
            "rtStartSeconds": obj.get("rtStartSeconds"),
            "rtEndSeconds": obj.get("rtEndSeconds"),
            "topAnnotation": CompoundAnnotation.from_dict(obj["topAnnotation"]) if obj.get("topAnnotation") is not None else None,
            "msData": MsData.from_dict(obj["msData"]) if obj.get("msData") is not None else None,
            "qualityFlags": obj.get("qualityFlags"),
            "computing": obj.get("computing")
        })
        return _obj


