# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    
    """ # noqa: E501
    sid: Optional[StrictStr] = None
    subscriber_id: Optional[StrictStr] = Field(default=None, alias="subscriberId")
    subscriber_name: Optional[StrictStr] = Field(default=None, alias="subscriberName")
    expiration_date: Optional[datetime] = Field(default=None, alias="expirationDate")
    start_date: Optional[datetime] = Field(default=None, alias="startDate")
    count_queries: Optional[StrictBool] = Field(default=None, alias="countQueries")
    compound_limit: Optional[StrictInt] = Field(default=None, alias="compoundLimit")
    compound_hash_recording_time: Optional[StrictInt] = Field(default=None, alias="compoundHashRecordingTime")
    max_queries_per_compound: Optional[StrictInt] = Field(default=None, alias="maxQueriesPerCompound")
    max_user_accounts: Optional[StrictInt] = Field(default=None, alias="maxUserAccounts")
    service_url: Optional[StrictStr] = Field(default=None, alias="serviceUrl")
    description: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    tos: Optional[StrictStr] = None
    pp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["sid", "subscriberId", "subscriberName", "expirationDate", "startDate", "countQueries", "compoundLimit", "compoundHashRecordingTime", "maxQueriesPerCompound", "maxUserAccounts", "serviceUrl", "description", "name", "tos", "pp"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sid": obj.get("sid"),
            "subscriberId": obj.get("subscriberId"),
            "subscriberName": obj.get("subscriberName"),
            "expirationDate": obj.get("expirationDate"),
            "startDate": obj.get("startDate"),
            "countQueries": obj.get("countQueries"),
            "compoundLimit": obj.get("compoundLimit"),
            "compoundHashRecordingTime": obj.get("compoundHashRecordingTime"),
            "maxQueriesPerCompound": obj.get("maxQueriesPerCompound"),
            "maxUserAccounts": obj.get("maxUserAccounts"),
            "serviceUrl": obj.get("serviceUrl"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "tos": obj.get("tos"),
            "pp": obj.get("pp")
        })
        return _obj


