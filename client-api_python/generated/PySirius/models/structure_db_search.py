# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StructureDbSearch(BaseModel):
    """
    User/developer friendly parameter subset for the CSI:FingerID structure db search tool.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="tags whether the tool is enabled")
    structure_search_dbs: Optional[List[StrictStr]] = Field(default=None, description="Structure databases to search in", alias="structureSearchDBs")
    tag_lipids: Optional[StrictBool] = Field(default=None, description="Candidates matching the lipid class estimated by El Gordo will be tagged.  The lipid class will only be available if El Gordo predicts that the MS/MS is a lipid spectrum.  If this parameter is set to 'false' El Gordo will still be executed and e.g. improve the fragmentation  tree, but the matching structure candidates will not be tagged if they match lipid class.", alias="tagLipids")
    __properties: ClassVar[List[str]] = ["enabled", "structureSearchDBs", "tagLipids"]

    @field_validator('structure_search_dbs')
    def structure_search_dbs_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ALL', 'ALL_BUT_INSILICO', 'PUBCHEM', 'MESH', 'HMDB', 'KNAPSACK', 'CHEBI', 'PUBMED', 'BIO', 'KEGG', 'HSDB', 'MACONDA', 'METACYC', 'GNPS', 'ZINCBIO', 'TRAIN', 'UNDP', 'YMDB', 'PLANTCYC', 'NORMAN', 'ADDITIONAL', 'SUPERNATURAL', 'COCONUT', 'PUBCHEMANNOTATIONBIO', 'PUBCHEMANNOTATIONDRUG', 'PUBCHEMANNOTATIONSAFETYANDTOXIC', 'PUBCHEMANNOTATIONFOOD', 'LIPID', 'KEGGMINE', 'ECOCYCMINE', 'YMDBMINE']):
                raise ValueError("each list item must be one of ('ALL', 'ALL_BUT_INSILICO', 'PUBCHEM', 'MESH', 'HMDB', 'KNAPSACK', 'CHEBI', 'PUBMED', 'BIO', 'KEGG', 'HSDB', 'MACONDA', 'METACYC', 'GNPS', 'ZINCBIO', 'TRAIN', 'UNDP', 'YMDB', 'PLANTCYC', 'NORMAN', 'ADDITIONAL', 'SUPERNATURAL', 'COCONUT', 'PUBCHEMANNOTATIONBIO', 'PUBCHEMANNOTATIONDRUG', 'PUBCHEMANNOTATIONSAFETYANDTOXIC', 'PUBCHEMANNOTATIONFOOD', 'LIPID', 'KEGGMINE', 'ECOCYCMINE', 'YMDBMINE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StructureDbSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StructureDbSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "structureSearchDBs": obj.get("structureSearchDBs"),
            "tagLipids": obj.get("tagLipids")
        })
        return _obj


