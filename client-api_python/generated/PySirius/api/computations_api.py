# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 6.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from PySirius.api_client import ApiClient


class ComputationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_job(self, project_id, job_id, **kwargs):  # noqa: E501
        """Delete job.  # noqa: E501

        Delete job. Specify how to behave for running jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job(project_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to run jobs on (required)
        :param str job_id: of the job to be deleted (required)
        :param bool cancel_if_running: If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished.
        :param bool await_deletion: If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_job_with_http_info(project_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_job_with_http_info(project_id, job_id, **kwargs)  # noqa: E501
            return data

    def delete_job_with_http_info(self, project_id, job_id, **kwargs):  # noqa: E501
        """Delete job.  # noqa: E501

        Delete job. Specify how to behave for running jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job_with_http_info(project_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to run jobs on (required)
        :param str job_id: of the job to be deleted (required)
        :param bool cancel_if_running: If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished.
        :param bool await_deletion: If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'job_id', 'cancel_if_running', 'await_deletion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_job`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `delete_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'cancel_if_running' in params:
            query_params.append(('cancelIfRunning', params['cancel_if_running']))  # noqa: E501
        if 'await_deletion' in params:
            query_params.append(('awaitDeletion', params['await_deletion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/jobs/{jobId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_job_config(self, name, **kwargs):  # noqa: E501
        """Delete job configuration with given name.  # noqa: E501

        Delete job configuration with given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name of the job-config to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_job_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_job_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_job_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """Delete job configuration with given name.  # noqa: E501

        Delete job configuration with given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_job_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name of the job-config to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_job_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_job_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/job-configs/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_default_job_config(self, **kwargs):  # noqa: E501
        """Request default job configuration  # noqa: E501

        Request default job configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_job_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_config_map: if true, generic configmap with-defaults will be included
        :return: JobSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_default_job_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_default_job_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_default_job_config_with_http_info(self, **kwargs):  # noqa: E501
        """Request default job configuration  # noqa: E501

        Request default job configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_default_job_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_config_map: if true, generic configmap with-defaults will be included
        :return: JobSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_config_map']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_default_job_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_config_map' in params:
            query_params.append(('includeConfigMap', params['include_config_map']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/default-job-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job(self, project_id, job_id, **kwargs):  # noqa: E501
        """Get job information and its current state and progress (if available).  # noqa: E501

        Get job information and its current state and progress (if available).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job(project_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to run jobs on (required)
        :param str job_id: of the job to be returned (required)
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state.
        :param bool include_command: include job command.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: JobId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_with_http_info(project_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_with_http_info(project_id, job_id, **kwargs)  # noqa: E501
            return data

    def get_job_with_http_info(self, project_id, job_id, **kwargs):  # noqa: E501
        """Get job information and its current state and progress (if available).  # noqa: E501

        Get job information and its current state and progress (if available).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_with_http_info(project_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to run jobs on (required)
        :param str job_id: of the job to be returned (required)
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state.
        :param bool include_command: include job command.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: JobId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'job_id', 'include_state', 'include_command', 'include_affected_compounds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_job`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'include_state' in params:
            query_params.append(('includeState', params['include_state']))  # noqa: E501
        if 'include_command' in params:
            query_params.append(('includeCommand', params['include_command']))  # noqa: E501
        if 'include_affected_compounds' in params:
            query_params.append(('includeAffectedCompounds', params['include_affected_compounds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/jobs/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_config(self, name, **kwargs):  # noqa: E501
        """Request job configuration with given name.  # noqa: E501

        Request job configuration with given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_config(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name of the job-config to return (required)
        :param bool include_config_map: if true the generic configmap will be part of the output
        :return: JobSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_job_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """Request job configuration with given name.  # noqa: E501

        Request job configuration with given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_config_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name of the job-config to return (required)
        :param bool include_config_map: if true the generic configmap will be part of the output
        :return: JobSubmission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'include_config_map']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_job_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'include_config_map' in params:
            query_params.append(('includeConfigMap', params['include_config_map']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/job-configs/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobSubmission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_configs(self, **kwargs):  # noqa: E501
        """Request all available job configurations  # noqa: E501

        Request all available job configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_configs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_config_map: if true the generic configmap will be part of the output
        :return: list[JobSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_configs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_job_configs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_job_configs_with_http_info(self, **kwargs):  # noqa: E501
        """Request all available job configurations  # noqa: E501

        Request all available job configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_configs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_config_map: if true the generic configmap will be part of the output
        :return: list[JobSubmission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_config_map']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_configs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_config_map' in params:
            query_params.append(('includeConfigMap', params['include_config_map']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/job-configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobSubmission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_jobs(self, project_id, **kwargs):  # noqa: E501
        """Get job information and its current state and progress (if available).  # noqa: E501

        Get job information and its current state and progress (if available).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to run jobs on (required)
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states.
        :param bool include_command: include job commands.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: list[JobId]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_jobs_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_jobs_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_jobs_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get job information and its current state and progress (if available).  # noqa: E501

        Get job information and its current state and progress (if available).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_jobs_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to run jobs on (required)
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states.
        :param bool include_command: include job commands.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: list[JobId]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'include_state', 'include_command', 'include_affected_compounds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'include_state' in params:
            query_params.append(('includeState', params['include_state']))  # noqa: E501
        if 'include_command' in params:
            query_params.append(('includeCommand', params['include_command']))  # noqa: E501
        if 'include_affected_compounds' in params:
            query_params.append(('includeAffectedCompounds', params['include_affected_compounds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobId]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_job_config(self, body, name, **kwargs):  # noqa: E501
        """Add new job configuration with given name.  # noqa: E501

        Add new job configuration with given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_config(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobSubmission body: to add (required)
        :param str name: name of the job-config to add (required)
        :param bool override_existing:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_job_config_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_job_config_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def post_job_config_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Add new job configuration with given name.  # noqa: E501

        Add new job configuration with given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_job_config_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobSubmission body: to add (required)
        :param str name: name of the job-config to add (required)
        :param bool override_existing:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name', 'override_existing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_job_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_job_config`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_job_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'override_existing' in params:
            query_params.append(('overrideExisting', params['override_existing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/job-configs/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_job(self, body, project_id, **kwargs):  # noqa: E501
        """Start computation for given compounds and with given parameters.  # noqa: E501

        Start computation for given compounds and with given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_job(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobSubmission body: configuration of the job that will be submitted of the job to be returned (required)
        :param str project_id: project-space to run jobs on (required)
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state.
        :param bool include_command: include job command.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: JobId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_job_with_http_info(body, project_id, **kwargs)  # noqa: E501
            return data

    def start_job_with_http_info(self, body, project_id, **kwargs):  # noqa: E501
        """Start computation for given compounds and with given parameters.  # noqa: E501

        Start computation for given compounds and with given parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_job_with_http_info(body, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JobSubmission body: configuration of the job that will be submitted of the job to be returned (required)
        :param str project_id: project-space to run jobs on (required)
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state.
        :param bool include_command: include job command.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: JobId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'include_state', 'include_command', 'include_affected_compounds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `start_job`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `start_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'include_state' in params:
            query_params.append(('includeState', params['include_state']))  # noqa: E501
        if 'include_command' in params:
            query_params.append(('includeCommand', params['include_command']))  # noqa: E501
        if 'include_affected_compounds' in params:
            query_params.append(('includeAffectedCompounds', params['include_affected_compounds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_job_from_config(self, body, job_config_name, project_id, **kwargs):  # noqa: E501
        """Start computation for given compounds and with parameters from a stored job-config.  # noqa: E501

        Start computation for given compounds and with parameters from a stored job-config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_job_from_config(body, job_config_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: compound ids to be computed (required)
        :param str job_config_name: name if the config to be used (required)
        :param str project_id: project-space to run jobs on (required)
        :param bool recompute: enable or disable recompute. If null the stored value will be used.
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state.
        :param bool include_command: include job command.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: JobId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_job_from_config_with_http_info(body, job_config_name, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_job_from_config_with_http_info(body, job_config_name, project_id, **kwargs)  # noqa: E501
            return data

    def start_job_from_config_with_http_info(self, body, job_config_name, project_id, **kwargs):  # noqa: E501
        """Start computation for given compounds and with parameters from a stored job-config.  # noqa: E501

        Start computation for given compounds and with parameters from a stored job-config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_job_from_config_with_http_info(body, job_config_name, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: compound ids to be computed (required)
        :param str job_config_name: name if the config to be used (required)
        :param str project_id: project-space to run jobs on (required)
        :param bool recompute: enable or disable recompute. If null the stored value will be used.
        :param bool include_state: include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state.
        :param bool include_command: include job command.
        :param bool include_affected_compounds: include list of compound ids affected by this job (if available)
        :return: JobId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'job_config_name', 'project_id', 'recompute', 'include_state', 'include_command', 'include_affected_compounds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_job_from_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `start_job_from_config`")  # noqa: E501
        # verify the required parameter 'job_config_name' is set
        if ('job_config_name' not in params or
                params['job_config_name'] is None):
            raise ValueError("Missing the required parameter `job_config_name` when calling `start_job_from_config`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `start_job_from_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'job_config_name' in params:
            query_params.append(('jobConfigName', params['job_config_name']))  # noqa: E501
        if 'recompute' in params:
            query_params.append(('recompute', params['recompute']))  # noqa: E501
        if 'include_state' in params:
            query_params.append(('includeState', params['include_state']))  # noqa: E501
        if 'include_command' in params:
            query_params.append(('includeCommand', params['include_command']))  # noqa: E501
        if 'include_affected_compounds' in params:
            query_params.append(('includeAffectedCompounds', params['include_affected_compounds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/jobs-from-config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
