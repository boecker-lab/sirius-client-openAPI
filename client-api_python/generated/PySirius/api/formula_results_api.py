# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 6.0.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from PySirius.api_client import ApiClient


class FormulaResultsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_best_matching_canopus_predictions(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,  # noqa: E501

        Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_best_matching_canopus_predictions(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: CompoundClasses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_best_matching_canopus_predictions_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_best_matching_canopus_predictions_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_best_matching_canopus_predictions_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,  # noqa: E501

        Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_best_matching_canopus_predictions_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: CompoundClasses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_best_matching_canopus_predictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_best_matching_canopus_predictions`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_best_matching_canopus_predictions`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_best_matching_canopus_predictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/best-canopus-predictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompoundClasses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_canopus_predictions(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,  # noqa: E501

        All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_canopus_predictions(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: CanopusPredictions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_canopus_predictions_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_canopus_predictions_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_canopus_predictions_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,  # noqa: E501

        All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_canopus_predictions_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: CanopusPredictions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_canopus_predictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_canopus_predictions`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_canopus_predictions`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_canopus_predictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/canopus-predictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CanopusPredictions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fingerprint_prediction(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.  # noqa: E501

        Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fingerprint_prediction(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: list[float]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fingerprint_prediction_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fingerprint_prediction_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_fingerprint_prediction_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.  # noqa: E501

        Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fingerprint_prediction_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: list[float]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fingerprint_prediction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_fingerprint_prediction`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_fingerprint_prediction`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_fingerprint_prediction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/fingerprint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[float]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_formula_ids(self, project_id, compound_id, **kwargs):  # noqa: E501
        """List of all FormulaResultContainers available for this compound/feature with minimal information.  # noqa: E501

        List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_formula_ids(project_id, compound_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param bool result_overview: add ResultOverview to the FormulaResultContainers
        :param bool formula_candidate: add extended formula candidate information to the FormulaResultContainers
        :return: list[FormulaResultContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_formula_ids_with_http_info(project_id, compound_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_formula_ids_with_http_info(project_id, compound_id, **kwargs)  # noqa: E501
            return data

    def get_formula_ids_with_http_info(self, project_id, compound_id, **kwargs):  # noqa: E501
        """List of all FormulaResultContainers available for this compound/feature with minimal information.  # noqa: E501

        List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_formula_ids_with_http_info(project_id, compound_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param bool result_overview: add ResultOverview to the FormulaResultContainers
        :param bool formula_candidate: add extended formula candidate information to the FormulaResultContainers
        :return: list[FormulaResultContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'result_overview', 'formula_candidate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_formula_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_formula_ids`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_formula_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501

        query_params = []
        if 'result_overview' in params:
            query_params.append(('resultOverview', params['result_overview']))  # noqa: E501
        if 'formula_candidate' in params:
            query_params.append(('formulaCandidate', params['formula_candidate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FormulaResultContainer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_formula_result(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """FormulaResultContainers for the given 'formulaId' with minimal information.  # noqa: E501

        FormulaResultContainers for the given 'formulaId' with minimal information.  Can be enriched with an optional results overview and formula candidate information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_formula_result(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :param bool result_overview: add ResultOverview to the FormulaResultContainer
        :param bool formula_candidate: add extended formula candidate information to the FormulaResultContainer
        :return: FormulaResultContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_formula_result_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_formula_result_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_formula_result_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """FormulaResultContainers for the given 'formulaId' with minimal information.  # noqa: E501

        FormulaResultContainers for the given 'formulaId' with minimal information.  Can be enriched with an optional results overview and formula candidate information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_formula_result_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :param bool result_overview: add ResultOverview to the FormulaResultContainer
        :param bool formula_candidate: add extended formula candidate information to the FormulaResultContainer
        :return: FormulaResultContainer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id', 'result_overview', 'formula_candidate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_formula_result" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_formula_result`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_formula_result`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_formula_result`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []
        if 'result_overview' in params:
            query_params.append(('resultOverview', params['result_overview']))  # noqa: E501
        if 'formula_candidate' in params:
            query_params.append(('formulaCandidate', params['formula_candidate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FormulaResultContainer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_frag_tree(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).  # noqa: E501

        Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frag_tree(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: FragmentationTree
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_frag_tree_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_frag_tree_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_frag_tree_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).  # noqa: E501

        Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frag_tree_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: FragmentationTree
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_frag_tree" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_frag_tree`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_frag_tree`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_frag_tree`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/tree', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FragmentationTree',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_simulated_isotope_pattern(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  # noqa: E501

        Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_simulated_isotope_pattern(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: AnnotatedSpectrum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_simulated_isotope_pattern_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_simulated_isotope_pattern_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_simulated_isotope_pattern_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  # noqa: E501

        Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_simulated_isotope_pattern_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :return: AnnotatedSpectrum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_simulated_isotope_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_simulated_isotope_pattern`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_simulated_isotope_pattern`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_simulated_isotope_pattern`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/isotope-pattern', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnnotatedSpectrum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_structure_candidates(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """List of StructureCandidates the given 'formulaId' with minimal information.  # noqa: E501

        List of StructureCandidates the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structure_candidates(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :param bool fingerprint: add molecular fingerprint to StructureCandidates
        :param bool db_links: add dbLinks to StructureCandidates
        :param bool pub_med_ids: add PubMedIds (citation count) to StructureCandidates
        :param int top_k: retrieve only the top k StructureCandidates
        :return: list[StructureCandidate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_structure_candidates_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_structure_candidates_with_http_info(project_id, compound_id, formula_id, **kwargs)  # noqa: E501
            return data

    def get_structure_candidates_with_http_info(self, project_id, compound_id, formula_id, **kwargs):  # noqa: E501
        """List of StructureCandidates the given 'formulaId' with minimal information.  # noqa: E501

        List of StructureCandidates the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_structure_candidates_with_http_info(project_id, compound_id, formula_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param str formula_id: identifier of the requested formula result (required)
        :param bool fingerprint: add molecular fingerprint to StructureCandidates
        :param bool db_links: add dbLinks to StructureCandidates
        :param bool pub_med_ids: add PubMedIds (citation count) to StructureCandidates
        :param int top_k: retrieve only the top k StructureCandidates
        :return: list[StructureCandidate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'formula_id', 'fingerprint', 'db_links', 'pub_med_ids', 'top_k']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_structure_candidates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_structure_candidates`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_structure_candidates`")  # noqa: E501
        # verify the required parameter 'formula_id' is set
        if ('formula_id' not in params or
                params['formula_id'] is None):
            raise ValueError("Missing the required parameter `formula_id` when calling `get_structure_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501
        if 'formula_id' in params:
            path_params['formulaId'] = params['formula_id']  # noqa: E501

        query_params = []
        if 'fingerprint' in params:
            query_params.append(('fingerprint', params['fingerprint']))  # noqa: E501
        if 'db_links' in params:
            query_params.append(('dbLinks', params['db_links']))  # noqa: E501
        if 'pub_med_ids' in params:
            query_params.append(('pubMedIds', params['pub_med_ids']))  # noqa: E501
        if 'top_k' in params:
            query_params.append(('topK', params['top_k']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/structures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StructureCandidate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_top_structure_candidate(self, project_id, compound_id, **kwargs):  # noqa: E501
        """Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).  # noqa: E501

        Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_top_structure_candidate(project_id, compound_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param bool fingerprint: add molecular fingerprint to StructureCandidates
        :param bool db_links: add dbLinks to StructureCandidates
        :param bool pub_med_ids: add PubMedIds (citation count) to StructureCandidates
        :return: StructureCandidate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_top_structure_candidate_with_http_info(project_id, compound_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_top_structure_candidate_with_http_info(project_id, compound_id, **kwargs)  # noqa: E501
            return data

    def get_top_structure_candidate_with_http_info(self, project_id, compound_id, **kwargs):  # noqa: E501
        """Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).  # noqa: E501

        Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_top_structure_candidate_with_http_info(project_id, compound_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: project-space to read from. (required)
        :param str compound_id: compound/feature the formula result belongs to. (required)
        :param bool fingerprint: add molecular fingerprint to StructureCandidates
        :param bool db_links: add dbLinks to StructureCandidates
        :param bool pub_med_ids: add PubMedIds (citation count) to StructureCandidates
        :return: StructureCandidate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'compound_id', 'fingerprint', 'db_links', 'pub_med_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_top_structure_candidate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_top_structure_candidate`")  # noqa: E501
        # verify the required parameter 'compound_id' is set
        if ('compound_id' not in params or
                params['compound_id'] is None):
            raise ValueError("Missing the required parameter `compound_id` when calling `get_top_structure_candidate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'compound_id' in params:
            path_params['compoundId'] = params['compound_id']  # noqa: E501

        query_params = []
        if 'fingerprint' in params:
            query_params.append(('fingerprint', params['fingerprint']))  # noqa: E501
        if 'db_links' in params:
            query_params.append(('dbLinks', params['db_links']))  # noqa: E501
        if 'pub_med_ids' in params:
            query_params.append(('pubMedIds', params['pub_med_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}/compounds/{compoundId}/top-structure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StructureCandidate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
