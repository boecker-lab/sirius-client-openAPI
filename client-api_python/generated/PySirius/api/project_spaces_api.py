# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from PySirius.api_client import ApiClient


class ProjectSpacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def close_project_space(self, project_id, **kwargs):  # noqa: E501
        """Close project-space and remove it from application.  # noqa: E501

        Close project-space and remove it from application. Project-space will NOT be deleted from disk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_project_space(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier of the  project-space to be closed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_project_space_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.close_project_space_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def close_project_space_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Close project-space and remove it from application.  # noqa: E501

        Close project-space and remove it from application. Project-space will NOT be deleted from disk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_project_space_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier of the  project-space to be closed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_project_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `close_project_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_project_space(self, project_id, path_to_project, **kwargs):  # noqa: E501
        """Create and open a new project-space at given location and make it accessible via the given projectId.  # noqa: E501

        Create and open a new project-space at given location and make it accessible via the given projectId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_space(project_id, path_to_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier that shall be used to access the newly created project-space. (required)
        :param str path_to_project: (required)
        :param str path_to_source_project:
        :param bool await_import:
        :return: ProjectSpaceId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_project_space_with_http_info(project_id, path_to_project, **kwargs)  # noqa: E501
        else:
            (data) = self.create_project_space_with_http_info(project_id, path_to_project, **kwargs)  # noqa: E501
            return data

    def create_project_space_with_http_info(self, project_id, path_to_project, **kwargs):  # noqa: E501
        """Create and open a new project-space at given location and make it accessible via the given projectId.  # noqa: E501

        Create and open a new project-space at given location and make it accessible via the given projectId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_space_with_http_info(project_id, path_to_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier that shall be used to access the newly created project-space. (required)
        :param str path_to_project: (required)
        :param str path_to_source_project:
        :param bool await_import:
        :return: ProjectSpaceId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'path_to_project', 'path_to_source_project', 'await_import']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `create_project_space`")  # noqa: E501
        # verify the required parameter 'path_to_project' is set
        if ('path_to_project' not in params or
                params['path_to_project'] is None):
            raise ValueError("Missing the required parameter `path_to_project` when calling `create_project_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'path_to_project' in params:
            query_params.append(('pathToProject', params['path_to_project']))  # noqa: E501
        if 'path_to_source_project' in params:
            query_params.append(('pathToSourceProject', params['path_to_source_project']))  # noqa: E501
        if 'await_import' in params:
            query_params.append(('awaitImport', params['await_import']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectSpaceId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_space(self, project_id, **kwargs):  # noqa: E501
        """Get project space info by its projectId.  # noqa: E501

        Get project space info by its projectId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_space(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier tof the project-space to be accessed. (required)
        :return: ProjectSpaceId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_space_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_space_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_project_space_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get project space info by its projectId.  # noqa: E501

        Get project space info by its projectId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_space_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier tof the project-space to be accessed. (required)
        :return: ProjectSpaceId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectSpaceId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_spaces(self, **kwargs):  # noqa: E501
        """List all opened project spaces.  # noqa: E501

        List all opened project spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_spaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ProjectSpaceId]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_spaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_project_spaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_project_spaces_with_http_info(self, **kwargs):  # noqa: E501
        """List all opened project spaces.  # noqa: E501

        List all opened project spaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_spaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ProjectSpaceId]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_spaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectSpaceId]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def open_project_space(self, project_id, path_to_project, **kwargs):  # noqa: E501
        """Open an existing project-space and make it accessible via the given projectId.  # noqa: E501

        Open an existing project-space and make it accessible via the given projectId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.open_project_space(project_id, path_to_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier that shall be used to access the opened project-space. (required)
        :param str path_to_project: (required)
        :return: ProjectSpaceId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.open_project_space_with_http_info(project_id, path_to_project, **kwargs)  # noqa: E501
        else:
            (data) = self.open_project_space_with_http_info(project_id, path_to_project, **kwargs)  # noqa: E501
            return data

    def open_project_space_with_http_info(self, project_id, path_to_project, **kwargs):  # noqa: E501
        """Open an existing project-space and make it accessible via the given projectId.  # noqa: E501

        Open an existing project-space and make it accessible via the given projectId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.open_project_space_with_http_info(project_id, path_to_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str project_id: unique name/identifier that shall be used to access the opened project-space. (required)
        :param str path_to_project: (required)
        :return: ProjectSpaceId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'path_to_project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method open_project_space" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `open_project_space`")  # noqa: E501
        # verify the required parameter 'path_to_project' is set
        if ('path_to_project' not in params or
                params['path_to_project'] is None):
            raise ValueError("Missing the required parameter `path_to_project` when calling `open_project_space`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'path_to_project' in params:
            query_params.append(('pathToProject', params['path_to_project']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/projects/{projectId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProjectSpaceId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
