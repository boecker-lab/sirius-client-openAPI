# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.job_submission import JobSubmission

class TestJobSubmission(unittest.TestCase):
    """JobSubmission unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobSubmission:
        """Test JobSubmission
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobSubmission`
        """
        model = JobSubmission()
        if include_optional:
            return JobSubmission(
                compound_ids = [
                    ''
                    ],
                fallback_adducts = [
                    ''
                    ],
                enforced_adducts = [
                    ''
                    ],
                detectable_adducts = [
                    ''
                    ],
                recompute = True,
                formula_id_paras = PySirius.models.sirius.Sirius(
                    enabled = True, 
                    profile = 'QTOF', 
                    number_of_candidates = 56, 
                    number_of_candidates_per_ion = 56, 
                    mass_accuracy_ms2ppm = 1.337, 
                    isotope_ms2_settings = 'IGNORE', 
                    formula_search_dbs = [
                        'ALL'
                        ], 
                    enforced_formula_constraints = '', 
                    fallback_formula_constraints = '', 
                    detectable_elements = [
                        ''
                        ], 
                    ilp_timeout = PySirius.models.timeout.Timeout(
                        number_of_seconds_per_decomposition = 56, 
                        number_of_seconds_per_instance = 56, 
                        identifier = '', ), 
                    use_heuristic = PySirius.models.use_heuristic.UseHeuristic(
                        mz_to_use_heuristic = 56, 
                        mz_to_use_heuristic_only = 56, 
                        identifier = '', ), ),
                zodiac_paras = PySirius.models.zodiac.Zodiac(
                    enabled = True, 
                    considered_candidates_at300_mz = PySirius.models.zodiac_number_of_considered_candidates_at300_mz.ZodiacNumberOfConsideredCandidatesAt300Mz(
                        value = 56, 
                        identifier = '', ), 
                    considered_candidates_at800_mz = PySirius.models.zodiac_number_of_considered_candidates_at800_mz.ZodiacNumberOfConsideredCandidatesAt800Mz(
                        value = 56, 
                        identifier = '', ), 
                    run_in_two_steps = PySirius.models.zodiac_run_in_two_steps.ZodiacRunInTwoSteps(
                        value = True, 
                        identifier = '', ), 
                    edge_filter_thresholds = PySirius.models.zodiac_edge_filter_thresholds.ZodiacEdgeFilterThresholds(
                        threshold_filter = 1.337, 
                        min_local_candidates = 56, 
                        min_local_connections = 56, 
                        identifier = '', ), 
                    gibbs_sampler_parameters = PySirius.models.zodiac_epochs.ZodiacEpochs(
                        iterations = 56, 
                        burn_in_period = 56, 
                        number_of_markov_chains = 56, 
                        identifier = '', ), ),
                fingerprint_prediction_paras = PySirius.models.fingerprint_prediction.FingerprintPrediction(
                    enabled = True, 
                    use_score_threshold = True, ),
                structure_db_search_paras = PySirius.models.structure_db_search.StructureDbSearch(
                    enabled = True, 
                    structure_search_dbs = [
                        'ALL'
                        ], 
                    tag_lipids = True, ),
                canopus_paras = PySirius.models.canopus.Canopus(
                    enabled = True, ),
                config_map = {
                    'key' : ''
                    }
            )
        else:
            return JobSubmission(
        )
        """

    def testJobSubmission(self):
        """Test JobSubmission"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
