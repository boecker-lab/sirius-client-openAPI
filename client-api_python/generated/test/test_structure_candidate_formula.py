# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.structure_candidate_formula import StructureCandidateFormula

class TestStructureCandidateFormula(unittest.TestCase):
    """StructureCandidateFormula unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StructureCandidateFormula:
        """Test StructureCandidateFormula
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StructureCandidateFormula`
        """
        model = StructureCandidateFormula()
        if include_optional:
            return StructureCandidateFormula(
                inchi_key = '',
                smiles = '',
                structure_name = '',
                xlog_p = 1.337,
                db_links = [
                    PySirius.models.db_link.DBLink(
                        name = '', 
                        id = '', )
                    ],
                ref_spectra_links = [
                    PySirius.models.db_link.DBLink(
                        name = '', 
                        id = '', )
                    ],
                csi_score = 1.337,
                tanimoto_similarity = 1.337,
                confidence_exact_match = 1.337,
                confidence_approx_match = 1.337,
                fingerprint = PySirius.models.binary_fingerprint.BinaryFingerprint(
                    bits_set = [
                        56
                        ], 
                    length = 56, ),
                molecular_formula = '',
                adduct = '',
                formula_id = ''
            )
        else:
            return StructureCandidateFormula(
        )
        """

    def testStructureCandidateFormula(self):
        """Test StructureCandidateFormula"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
