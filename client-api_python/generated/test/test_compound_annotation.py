# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.compound_annotation import CompoundAnnotation

class TestCompoundAnnotation(unittest.TestCase):
    """CompoundAnnotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompoundAnnotation:
        """Test CompoundAnnotation
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompoundAnnotation`
        """
        model = CompoundAnnotation()
        if include_optional:
            return CompoundAnnotation(
                formula_annotation = PySirius.models.formula_candidate.FormulaCandidate(
                    sirius_score = 1.337, 
                    isotope_score = 1.337, 
                    tree_score = 1.337, 
                    zodiac_score = 1.337, 
                    molecular_formula = '', 
                    adduct = '', 
                    num_ofexplained_peaks = 56, 
                    num_ofexplainable_peaks = 56, 
                    total_explained_intensity = 1.337, 
                    median_mass_deviation = PySirius.models.deviation.Deviation(
                        ppm = 1.337, 
                        absolute = 1.337, 
                        identifier = '', ), ),
                structure_annotation = PySirius.models.structure_candidate.StructureCandidate(
                    structure_name = '', 
                    smiles = '', 
                    csi_score = 1.337, 
                    tanimoto_similarity = 1.337, 
                    confidence_score = 1.337, 
                    num_of_pub_med_ids = 56, 
                    xlog_p = 1.337, 
                    inchi_key = '', 
                    fp_bits_set = [
                        56
                        ], 
                    db_links = [
                        PySirius.models.db_link.DBLink(
                            name = '', 
                            id = '', )
                        ], 
                    pubmed_ids = [
                        56
                        ], ),
                compound_class_annotation = PySirius.models.compound_classes.CompoundClasses(
                    npc_pathway = PySirius.models.compound_class.CompoundClass(
                        type = 'ClassyFire', 
                        name = '', 
                        description = '', 
                        id = 56, 
                        probability = 1.337, ), 
                    npc_superclass = PySirius.models.compound_class.CompoundClass(
                        type = 'ClassyFire', 
                        name = '', 
                        description = '', 
                        id = 56, 
                        probability = 1.337, ), 
                    npc_class = , 
                    classy_fire_most_specific = , 
                    classy_fire_level5 = , 
                    classy_fire_class = , 
                    classy_fire_sub_class = , 
                    classy_fire_super_class = , )
            )
        else:
            return CompoundAnnotation(
        )
        """

    def testCompoundAnnotation(self):
        """Test CompoundAnnotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
