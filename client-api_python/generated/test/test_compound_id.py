# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.compound_id import CompoundId

class TestCompoundId(unittest.TestCase):
    """CompoundId unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompoundId:
        """Test CompoundId
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompoundId`
        """
        model = CompoundId()
        if include_optional:
            return CompoundId(
                id = '',
                name = '',
                index = 56,
                ion_mass = 1.337,
                ion_type = '',
                rt_start_seconds = 1.337,
                rt_end_seconds = 1.337,
                top_annotation = PySirius.models.compound_annotation.CompoundAnnotation(
                    formula_annotation = PySirius.models.formula_candidate.FormulaCandidate(
                        sirius_score = 1.337, 
                        isotope_score = 1.337, 
                        tree_score = 1.337, 
                        zodiac_score = 1.337, 
                        molecular_formula = '', 
                        adduct = '', 
                        num_ofexplained_peaks = 56, 
                        num_ofexplainable_peaks = 56, 
                        total_explained_intensity = 1.337, 
                        median_mass_deviation = PySirius.models.deviation.Deviation(
                            ppm = 1.337, 
                            absolute = 1.337, 
                            identifier = '', ), ), 
                    structure_annotation = PySirius.models.structure_candidate.StructureCandidate(
                        structure_name = '', 
                        smiles = '', 
                        csi_score = 1.337, 
                        tanimoto_similarity = 1.337, 
                        confidence_score = 1.337, 
                        num_of_pub_med_ids = 56, 
                        xlog_p = 1.337, 
                        inchi_key = '', 
                        fp_bits_set = [
                            56
                            ], 
                        db_links = [
                            PySirius.models.db_link.DBLink(
                                name = '', 
                                id = '', )
                            ], 
                        pubmed_ids = [
                            56
                            ], ), 
                    compound_class_annotation = PySirius.models.compound_classes.CompoundClasses(
                        npc_pathway = PySirius.models.compound_class.CompoundClass(
                            type = 'ClassyFire', 
                            name = '', 
                            description = '', 
                            id = 56, 
                            probability = 1.337, ), 
                        npc_superclass = PySirius.models.compound_class.CompoundClass(
                            type = 'ClassyFire', 
                            name = '', 
                            description = '', 
                            id = 56, 
                            probability = 1.337, ), 
                        npc_class = , 
                        classy_fire_most_specific = , 
                        classy_fire_level5 = , 
                        classy_fire_class = , 
                        classy_fire_sub_class = , 
                        classy_fire_super_class = , ), ),
                ms_data = PySirius.models.ms_data.MsData(
                    merged_ms1 = PySirius.models.annotated_spectrum.AnnotatedSpectrum(
                        ms_level = 56, 
                        collision_energy = PySirius.models.collision_energy.CollisionEnergy(
                            min_energy = 1.337, 
                            max_energy = 1.337, 
                            corrected = True, ), 
                        peaks = [
                            PySirius.models.annotated_peak.AnnotatedPeak(
                                mass = 1.337, 
                                intensity = 1.337, 
                                peak_annotation = PySirius.models.peak_annotation.peakAnnotation(), )
                            ], ), 
                    merged_ms2 = PySirius.models.annotated_spectrum.AnnotatedSpectrum(
                        ms_level = 56, ), 
                    ms2_spectra = [
                        
                        ], 
                    ms1_spectra = [
                        
                        ], ),
                quality_flags = [
                    'Good'
                    ],
                computing = True
            )
        else:
            return CompoundId(
        )
        """

    def testCompoundId(self):
        """Test CompoundId"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
