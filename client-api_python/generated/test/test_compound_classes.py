# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.compound_classes import CompoundClasses

class TestCompoundClasses(unittest.TestCase):
    """CompoundClasses unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompoundClasses:
        """Test CompoundClasses
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompoundClasses`
        """
        model = CompoundClasses()
        if include_optional:
            return CompoundClasses(
                npc_pathway = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                npc_superclass = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                npc_class = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                classy_fire_most_specific = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                classy_fire_level5 = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                classy_fire_class = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                classy_fire_sub_class = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, ),
                classy_fire_super_class = PySirius.models.compound_class.CompoundClass(
                    type = 'ClassyFire', 
                    name = '', 
                    description = '', 
                    id = 56, 
                    probability = 1.337, )
            )
        else:
            return CompoundClasses(
        )
        """

    def testCompoundClasses(self):
        """Test CompoundClasses"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
