# coding: utf-8

"""
    SIRIUS Nightsky API

    OpenAPI REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.The provided OpenAPI specification allows to autogenerate clients for different programming languages.

    The version of the OpenAPI document: 0.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from PySirius.models.formula_result_container import FormulaResultContainer

class TestFormulaResultContainer(unittest.TestCase):
    """FormulaResultContainer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FormulaResultContainer:
        """Test FormulaResultContainer
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FormulaResultContainer`
        """
        model = FormulaResultContainer()
        if include_optional:
            return FormulaResultContainer(
                id = '',
                molecular_formula = '',
                adduct = '',
                result_overview = PySirius.models.result_overview.ResultOverview(
                    sirius_score = 1.337, 
                    zodiac_score = 1.337, 
                    top_csi_score = 1.337, 
                    confidence_score = 1.337, 
                    canopus_result = True, ),
                candidate = PySirius.models.formula_candidate.FormulaCandidate(
                    sirius_score = 1.337, 
                    isotope_score = 1.337, 
                    tree_score = 1.337, 
                    zodiac_score = 1.337, 
                    molecular_formula = '', 
                    adduct = '', 
                    num_ofexplained_peaks = 56, 
                    num_ofexplainable_peaks = 56, 
                    total_explained_intensity = 1.337, 
                    median_mass_deviation = PySirius.models.deviation.Deviation(
                        ppm = 1.337, 
                        absolute = 1.337, 
                        identifier = '', ), )
            )
        else:
            return FormulaResultContainer(
        )
        """

    def testFormulaResultContainer(self):
        """Test FormulaResultContainer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
