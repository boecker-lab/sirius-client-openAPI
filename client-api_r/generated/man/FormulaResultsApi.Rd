% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formula_results_api.R
\docType{class}
\name{FormulaResultsApi}
\alias{FormulaResultsApi}
\title{FormulaResults operations}
\format{
An \code{R6Class} generator object
}
\description{
FormulaResultsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ GetBestMatchingCanopusPredictions } \emph{ Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology, }
Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character
\item \emph{ @returnType } \link{CompoundClasses} \cr


\item status code : 200 | Best matching Predicted compound classes

\item return type : CompoundClasses
\item response headers :

\tabular{ll}{
}
}

\strong{ GetCanopusPredictions } \emph{ All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities, }
All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character
\item \emph{ @returnType } \link{CanopusPredictions} \cr


\item status code : 200 | Predicted compound classes

\item return type : CanopusPredictions
\item response headers :

\tabular{ll}{
}
}

\strong{ GetFingerprintPrediction } \emph{ Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes. }
Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character


\item status code : 200 | probabilistic fingerprint predicted by CSI:FingerID

\item return type : array[numeric]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetFormulaIds } \emph{ List of all FormulaResultContainers available for this compound/feature with minimal information. }
List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } result_overview character
\item \emph{ @param } formula_candidate character
\item \emph{ @returnType } list( \link{FormulaResultContainer} ) \cr


\item status code : 200 | All FormulaResultContainers of this compound/feature with.

\item return type : array[FormulaResultContainer]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetFormulaResult } \emph{ FormulaResultContainers for the given &#39;formulaId&#39; with minimal information. }
FormulaResultContainers for the given 'formulaId' with minimal information.  Can be enriched with an optional results overview and formula candidate information.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character
\item \emph{ @param } result_overview character
\item \emph{ @param } formula_candidate character
\item \emph{ @returnType } \link{FormulaResultContainer} \cr


\item status code : 200 | FormulaResultContainers of this compound/feature with.

\item return type : FormulaResultContainer
\item response headers :

\tabular{ll}{
}
}

\strong{ GetFragTree } \emph{ Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore). }
Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character
\item \emph{ @returnType } \link{FragmentationTree} \cr


\item status code : 200 | Fragmentation Tree

\item return type : FragmentationTree
\item response headers :

\tabular{ll}{
}
}

\strong{ GetSimulatedIsotopePattern } \emph{ Returns simulated isotope pattern (SIRIUS) for the given formula result identifier. }
Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character
\item \emph{ @returnType } \link{AnnotatedSpectrum} \cr


\item status code : 200 | Simulated isotope pattern

\item return type : AnnotatedSpectrum
\item response headers :

\tabular{ll}{
}
}

\strong{ GetStructureCandidates } \emph{ List of StructureCandidates the given &#39;formulaId&#39; with minimal information. }
List of StructureCandidates the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } formula_id character
\item \emph{ @param } fingerprint character
\item \emph{ @param } db_links character
\item \emph{ @param } pub_med_ids character
\item \emph{ @param } top_k integer
\item \emph{ @returnType } list( \link{StructureCandidate} ) \cr


\item status code : 200 | FormulaResultContainers of this compound/feature with specified extensions.

\item return type : array[StructureCandidate]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetTopStructureCandidate } \emph{ Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId). }
Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } compound_id character
\item \emph{ @param } fingerprint character
\item \emph{ @param } db_links character
\item \emph{ @param } pub_med_ids character
\item \emph{ @returnType } \link{StructureCandidate} \cr


\item status code : 200 | Best scoring FormulaResultContainers of this compound/feature with specified extensions.

\item return type : StructureCandidate
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  GetBestMatchingCanopusPredictions  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetBestMatchingCanopusPredictions(var_project_id, var_compound_id, var_formula_iddata_file = "result.txt")
result <- api_instance$formula_results_api$GetBestMatchingCanopusPredictions(var_project_id, var_compound_id, var_formula_id)
dput(result)


####################  GetCanopusPredictions  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCanopusPredictions(var_project_id, var_compound_id, var_formula_iddata_file = "result.txt")
result <- api_instance$formula_results_api$GetCanopusPredictions(var_project_id, var_compound_id, var_formula_id)
dput(result)


####################  GetFingerprintPrediction  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFingerprintPrediction(var_project_id, var_compound_id, var_formula_iddata_file = "result.txt")
result <- api_instance$formula_results_api$GetFingerprintPrediction(var_project_id, var_compound_id, var_formula_id)
dput(result)


####################  GetFormulaIds  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_result_overview <- TRUE # character | add ResultOverview to the FormulaResultContainers (Optional)
var_formula_candidate <- FALSE # character | add extended formula candidate information to the FormulaResultContainers (Optional)

#List of all FormulaResultContainers available for this compound/feature with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaIds(var_project_id, var_compound_id, result_overview = var_result_overview, formula_candidate = var_formula_candidatedata_file = "result.txt")
result <- api_instance$formula_results_api$GetFormulaIds(var_project_id, var_compound_id, result_overview = var_result_overview, formula_candidate = var_formula_candidate)
dput(result)


####################  GetFormulaResult  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_result_overview <- TRUE # character | add ResultOverview to the FormulaResultContainer (Optional)
var_formula_candidate <- TRUE # character | add extended formula candidate information to the FormulaResultContainer (Optional)

#FormulaResultContainers for the given 'formulaId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFormulaResult(var_project_id, var_compound_id, var_formula_id, result_overview = var_result_overview, formula_candidate = var_formula_candidatedata_file = "result.txt")
result <- api_instance$formula_results_api$GetFormulaResult(var_project_id, var_compound_id, var_formula_id, result_overview = var_result_overview, formula_candidate = var_formula_candidate)
dput(result)


####################  GetFragTree  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetFragTree(var_project_id, var_compound_id, var_formula_iddata_file = "result.txt")
result <- api_instance$formula_results_api$GetFragTree(var_project_id, var_compound_id, var_formula_id)
dput(result)


####################  GetSimulatedIsotopePattern  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result

#Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetSimulatedIsotopePattern(var_project_id, var_compound_id, var_formula_iddata_file = "result.txt")
result <- api_instance$formula_results_api$GetSimulatedIsotopePattern(var_project_id, var_compound_id, var_formula_id)
dput(result)


####################  GetStructureCandidates  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_formula_id <- "formula_id_example" # character | identifier of the requested formula result
var_fingerprint <- FALSE # character | add molecular fingerprint to StructureCandidates (Optional)
var_db_links <- FALSE # character | add dbLinks to StructureCandidates (Optional)
var_pub_med_ids <- FALSE # character | add PubMedIds (citation count) to StructureCandidates (Optional)
var_top_k <- -1 # integer | retrieve only the top k StructureCandidates (Optional)

#List of StructureCandidates the given 'formulaId' with minimal information.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetStructureCandidates(var_project_id, var_compound_id, var_formula_id, fingerprint = var_fingerprint, db_links = var_db_links, pub_med_ids = var_pub_med_ids, top_k = var_top_kdata_file = "result.txt")
result <- api_instance$formula_results_api$GetStructureCandidates(var_project_id, var_compound_id, var_formula_id, fingerprint = var_fingerprint, db_links = var_db_links, pub_med_ids = var_pub_med_ids, top_k = var_top_k)
dput(result)


####################  GetTopStructureCandidate  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_compound_id <- "compound_id_example" # character | compound/feature the formula result belongs to.
var_fingerprint <- FALSE # character | add molecular fingerprint to StructureCandidates (Optional)
var_db_links <- FALSE # character | add dbLinks to StructureCandidates (Optional)
var_pub_med_ids <- FALSE # character | add PubMedIds (citation count) to StructureCandidates (Optional)

#Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetTopStructureCandidate(var_project_id, var_compound_id, fingerprint = var_fingerprint, db_links = var_db_links, pub_med_ids = var_pub_med_idsdata_file = "result.txt")
result <- api_instance$formula_results_api$GetTopStructureCandidate(var_project_id, var_compound_id, fingerprint = var_fingerprint, db_links = var_db_links, pub_med_ids = var_pub_med_ids)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FormulaResultsApi-new}{\code{FormulaResultsApi$new()}}
\item \href{#method-FormulaResultsApi-GetBestMatchingCanopusPredictions}{\code{FormulaResultsApi$GetBestMatchingCanopusPredictions()}}
\item \href{#method-FormulaResultsApi-GetBestMatchingCanopusPredictionsWithHttpInfo}{\code{FormulaResultsApi$GetBestMatchingCanopusPredictionsWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetCanopusPredictions}{\code{FormulaResultsApi$GetCanopusPredictions()}}
\item \href{#method-FormulaResultsApi-GetCanopusPredictionsWithHttpInfo}{\code{FormulaResultsApi$GetCanopusPredictionsWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetFingerprintPrediction}{\code{FormulaResultsApi$GetFingerprintPrediction()}}
\item \href{#method-FormulaResultsApi-GetFingerprintPredictionWithHttpInfo}{\code{FormulaResultsApi$GetFingerprintPredictionWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetFormulaIds}{\code{FormulaResultsApi$GetFormulaIds()}}
\item \href{#method-FormulaResultsApi-GetFormulaIdsWithHttpInfo}{\code{FormulaResultsApi$GetFormulaIdsWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetFormulaResult}{\code{FormulaResultsApi$GetFormulaResult()}}
\item \href{#method-FormulaResultsApi-GetFormulaResultWithHttpInfo}{\code{FormulaResultsApi$GetFormulaResultWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetFragTree}{\code{FormulaResultsApi$GetFragTree()}}
\item \href{#method-FormulaResultsApi-GetFragTreeWithHttpInfo}{\code{FormulaResultsApi$GetFragTreeWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetSimulatedIsotopePattern}{\code{FormulaResultsApi$GetSimulatedIsotopePattern()}}
\item \href{#method-FormulaResultsApi-GetSimulatedIsotopePatternWithHttpInfo}{\code{FormulaResultsApi$GetSimulatedIsotopePatternWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetStructureCandidates}{\code{FormulaResultsApi$GetStructureCandidates()}}
\item \href{#method-FormulaResultsApi-GetStructureCandidatesWithHttpInfo}{\code{FormulaResultsApi$GetStructureCandidatesWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-GetTopStructureCandidate}{\code{FormulaResultsApi$GetTopStructureCandidate()}}
\item \href{#method-FormulaResultsApi-GetTopStructureCandidateWithHttpInfo}{\code{FormulaResultsApi$GetTopStructureCandidateWithHttpInfo()}}
\item \href{#method-FormulaResultsApi-clone}{\code{FormulaResultsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new FormulaResultsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetBestMatchingCanopusPredictions"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetBestMatchingCanopusPredictions}{}}}
\subsection{Method \code{GetBestMatchingCanopusPredictions()}}{
Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetBestMatchingCanopusPredictions(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CompoundClasses
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetBestMatchingCanopusPredictionsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetBestMatchingCanopusPredictionsWithHttpInfo}{}}}
\subsection{Method \code{GetBestMatchingCanopusPredictionsWithHttpInfo()}}{
Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetBestMatchingCanopusPredictionsWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (CompoundClasses) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetCanopusPredictions"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetCanopusPredictions}{}}}
\subsection{Method \code{GetCanopusPredictions()}}{
All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetCanopusPredictions(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CanopusPredictions
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetCanopusPredictionsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetCanopusPredictionsWithHttpInfo}{}}}
\subsection{Method \code{GetCanopusPredictionsWithHttpInfo()}}{
All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetCanopusPredictionsWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (CanopusPredictions) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFingerprintPrediction"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFingerprintPrediction}{}}}
\subsection{Method \code{GetFingerprintPrediction()}}{
Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFingerprintPrediction(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[numeric]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFingerprintPredictionWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFingerprintPredictionWithHttpInfo}{}}}
\subsection{Method \code{GetFingerprintPredictionWithHttpInfo()}}{
Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFingerprintPredictionWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[numeric]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFormulaIds"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFormulaIds}{}}}
\subsection{Method \code{GetFormulaIds()}}{
List of all FormulaResultContainers available for this compound/feature with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFormulaIds(
  project_id,
  compound_id,
  result_overview = TRUE,
  formula_candidate = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{result_overview}}{(optional) add ResultOverview to the FormulaResultContainers (default value: TRUE)}

\item{\code{formula_candidate}}{(optional) add extended formula candidate information to the FormulaResultContainers (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[FormulaResultContainer]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFormulaIdsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFormulaIdsWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaIdsWithHttpInfo()}}{
List of all FormulaResultContainers available for this compound/feature with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFormulaIdsWithHttpInfo(
  project_id,
  compound_id,
  result_overview = TRUE,
  formula_candidate = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{result_overview}}{(optional) add ResultOverview to the FormulaResultContainers (default value: TRUE)}

\item{\code{formula_candidate}}{(optional) add extended formula candidate information to the FormulaResultContainers (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[FormulaResultContainer]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFormulaResult"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFormulaResult}{}}}
\subsection{Method \code{GetFormulaResult()}}{
FormulaResultContainers for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFormulaResult(
  project_id,
  compound_id,
  formula_id,
  result_overview = TRUE,
  formula_candidate = TRUE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{result_overview}}{(optional) add ResultOverview to the FormulaResultContainer (default value: TRUE)}

\item{\code{formula_candidate}}{(optional) add extended formula candidate information to the FormulaResultContainer (default value: TRUE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
FormulaResultContainer
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFormulaResultWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFormulaResultWithHttpInfo}{}}}
\subsection{Method \code{GetFormulaResultWithHttpInfo()}}{
FormulaResultContainers for the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFormulaResultWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  result_overview = TRUE,
  formula_candidate = TRUE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{result_overview}}{(optional) add ResultOverview to the FormulaResultContainer (default value: TRUE)}

\item{\code{formula_candidate}}{(optional) add extended formula candidate information to the FormulaResultContainer (default value: TRUE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (FormulaResultContainer) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFragTree"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFragTree}{}}}
\subsection{Method \code{GetFragTree()}}{
Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFragTree(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
FragmentationTree
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetFragTreeWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetFragTreeWithHttpInfo}{}}}
\subsection{Method \code{GetFragTreeWithHttpInfo()}}{
Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetFragTreeWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (FragmentationTree) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetSimulatedIsotopePattern"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetSimulatedIsotopePattern}{}}}
\subsection{Method \code{GetSimulatedIsotopePattern()}}{
Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetSimulatedIsotopePattern(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
AnnotatedSpectrum
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetSimulatedIsotopePatternWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetSimulatedIsotopePatternWithHttpInfo}{}}}
\subsection{Method \code{GetSimulatedIsotopePatternWithHttpInfo()}}{
Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetSimulatedIsotopePatternWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (AnnotatedSpectrum) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetStructureCandidates"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetStructureCandidates}{}}}
\subsection{Method \code{GetStructureCandidates()}}{
List of StructureCandidates the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetStructureCandidates(
  project_id,
  compound_id,
  formula_id,
  fingerprint = FALSE,
  db_links = FALSE,
  pub_med_ids = FALSE,
  top_k = -1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{fingerprint}}{(optional) add molecular fingerprint to StructureCandidates (default value: FALSE)}

\item{\code{db_links}}{(optional) add dbLinks to StructureCandidates (default value: FALSE)}

\item{\code{pub_med_ids}}{(optional) add PubMedIds (citation count) to StructureCandidates (default value: FALSE)}

\item{\code{top_k}}{(optional) retrieve only the top k StructureCandidates (default value: -1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[StructureCandidate]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetStructureCandidatesWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetStructureCandidatesWithHttpInfo}{}}}
\subsection{Method \code{GetStructureCandidatesWithHttpInfo()}}{
List of StructureCandidates the given 'formulaId' with minimal information.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetStructureCandidatesWithHttpInfo(
  project_id,
  compound_id,
  formula_id,
  fingerprint = FALSE,
  db_links = FALSE,
  pub_med_ids = FALSE,
  top_k = -1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{formula_id}}{identifier of the requested formula result}

\item{\code{fingerprint}}{(optional) add molecular fingerprint to StructureCandidates (default value: FALSE)}

\item{\code{db_links}}{(optional) add dbLinks to StructureCandidates (default value: FALSE)}

\item{\code{pub_med_ids}}{(optional) add PubMedIds (citation count) to StructureCandidates (default value: FALSE)}

\item{\code{top_k}}{(optional) retrieve only the top k StructureCandidates (default value: -1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[StructureCandidate]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetTopStructureCandidate"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetTopStructureCandidate}{}}}
\subsection{Method \code{GetTopStructureCandidate()}}{
Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetTopStructureCandidate(
  project_id,
  compound_id,
  fingerprint = FALSE,
  db_links = FALSE,
  pub_med_ids = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{fingerprint}}{(optional) add molecular fingerprint to StructureCandidates (default value: FALSE)}

\item{\code{db_links}}{(optional) add dbLinks to StructureCandidates (default value: FALSE)}

\item{\code{pub_med_ids}}{(optional) add PubMedIds (citation count) to StructureCandidates (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
StructureCandidate
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-GetTopStructureCandidateWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-GetTopStructureCandidateWithHttpInfo}{}}}
\subsection{Method \code{GetTopStructureCandidateWithHttpInfo()}}{
Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$GetTopStructureCandidateWithHttpInfo(
  project_id,
  compound_id,
  fingerprint = FALSE,
  db_links = FALSE,
  pub_med_ids = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{compound_id}}{compound/feature the formula result belongs to.}

\item{\code{fingerprint}}{(optional) add molecular fingerprint to StructureCandidates (default value: FALSE)}

\item{\code{db_links}}{(optional) add dbLinks to StructureCandidates (default value: FALSE)}

\item{\code{pub_med_ids}}{(optional) add PubMedIds (citation count) to StructureCandidates (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (StructureCandidate) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FormulaResultsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FormulaResultsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FormulaResultsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
