% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computations_api.R
\docType{class}
\name{ComputationsApi}
\alias{ComputationsApi}
\title{Computations operations}
\format{
An \code{R6Class} generator object
}
\description{
ComputationsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 6.0.0-SNAPSHOT
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ DeleteJob } \emph{ Delete job. }
Delete job. Specify how to behave for running jobs.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_id character
\item \emph{ @param } cancel_if_running character
\item \emph{ @param } await_deletion character


\item status code : 202 | Accepted


\item response headers :

\tabular{ll}{
}
}

\strong{ DeleteJobConfig } \emph{ Delete job configuration with given name. }
Delete job configuration with given name.

\itemize{
\item \emph{ @param } name character


\item status code : 202 | Accepted


\item response headers :

\tabular{ll}{
}
}

\strong{ GetDefaultJobConfig } \emph{ Request default job configuration }
Request default job configuration

\itemize{
\item \emph{ @param } include_config_map character
\item \emph{ @returnType } \link{JobSubmission} \cr


\item status code : 200 | {@link JobSubmission JobSubmission} with all parameters set to default values.

\item return type : JobSubmission
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJob } \emph{ Get job information and its current state and progress (if available). }
Get job information and its current state and progress (if available).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_id character
\item \emph{ @param } include_state character
\item \emph{ @param } include_command character
\item \emph{ @param } include_affected_compounds character
\item \emph{ @returnType } \link{JobId} \cr


\item status code : 200 | OK

\item return type : JobId
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobConfig } \emph{ Request job configuration with given name. }
Request job configuration with given name.

\itemize{
\item \emph{ @param } name character
\item \emph{ @param } include_config_map character
\item \emph{ @returnType } \link{JobSubmission} \cr


\item status code : 200 | {@link JobSubmission JobSubmission} for given name.

\item return type : JobSubmission
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobConfigs } \emph{ Request all available job configurations }
Request all available job configurations

\itemize{
\item \emph{ @param } include_config_map character
\item \emph{ @returnType } list( \link{JobSubmission} ) \cr


\item status code : 200 | list of available {@link JobSubmission JobSubmission}s

\item return type : array[JobSubmission]
\item response headers :

\tabular{ll}{
}
}

\strong{ GetJobs } \emph{ Get job information and its current state and progress (if available). }
Get job information and its current state and progress (if available).

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } include_state character
\item \emph{ @param } include_command character
\item \emph{ @param } include_affected_compounds character
\item \emph{ @returnType } list( \link{JobId} ) \cr


\item status code : 200 | OK

\item return type : array[JobId]
\item response headers :

\tabular{ll}{
}
}

\strong{ PostJobConfig } \emph{ Add new job configuration with given name. }
Add new job configuration with given name.

\itemize{
\item \emph{ @param } name character
\item \emph{ @param } job_submission \link{JobSubmission}
\item \emph{ @param } override_existing character


\item status code : 200 | Probably modified name of the config (to ensure filesystem path compatibility).

\item return type : character
\item response headers :

\tabular{ll}{
}
}

\strong{ StartJob } \emph{ Start computation for given compounds and with given parameters. }
Start computation for given compounds and with given parameters.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_submission \link{JobSubmission}
\item \emph{ @param } include_state character
\item \emph{ @param } include_command character
\item \emph{ @param } include_affected_compounds character
\item \emph{ @returnType } \link{JobId} \cr


\item status code : 202 | Accepted

\item return type : JobId
\item response headers :

\tabular{ll}{
}
}

\strong{ StartJobFromConfig } \emph{ Start computation for given compounds and with parameters from a stored job-config. }
Start computation for given compounds and with parameters from a stored job-config.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } job_config_name character
\item \emph{ @param } request_body list( character )
\item \emph{ @param } recompute character
\item \emph{ @param } include_state character
\item \emph{ @param } include_command character
\item \emph{ @param } include_affected_compounds character
\item \emph{ @returnType } \link{JobId} \cr


\item status code : 202 | Accepted

\item return type : JobId
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  DeleteJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_id <- "job_id_example" # character | of the job to be deleted
var_cancel_if_running <- TRUE # character | If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (Optional)
var_await_deletion <- TRUE # character | If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (Optional)

#Delete job.
api_instance <- rsirius_api$new()

api_instance$computations_api$DeleteJob(var_project_id, var_job_id, cancel_if_running = var_cancel_if_running, await_deletion = var_await_deletion)


####################  DeleteJobConfig  ####################

library(Rsirius)
var_name <- "name_example" # character | name of the job-config to delete

#Delete job configuration with given name.
api_instance <- rsirius_api$new()

api_instance$computations_api$DeleteJobConfig(var_name)


####################  GetDefaultJobConfig  ####################

library(Rsirius)
var_include_config_map <- FALSE # character | if true, generic configmap with-defaults will be included (Optional)

#Request default job configuration
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetDefaultJobConfig(include_config_map = var_include_config_mapdata_file = "result.txt")
result <- api_instance$computations_api$GetDefaultJobConfig(include_config_map = var_include_config_map)
dput(result)


####################  GetJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_id <- "job_id_example" # character | of the job to be returned
var_include_state <- TRUE # character | include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (Optional)
var_include_command <- FALSE # character | include job command. (Optional)
var_include_affected_compounds <- FALSE # character | include list of compound ids affected by this job (if available) (Optional)

#Get job information and its current state and progress (if available).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJob(var_project_id, var_job_id, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compoundsdata_file = "result.txt")
result <- api_instance$computations_api$GetJob(var_project_id, var_job_id, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compounds)
dput(result)


####################  GetJobConfig  ####################

library(Rsirius)
var_name <- "name_example" # character | name of the job-config to return
var_include_config_map <- FALSE # character | if true the generic configmap will be part of the output (Optional)

#Request job configuration with given name.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobConfig(var_name, include_config_map = var_include_config_mapdata_file = "result.txt")
result <- api_instance$computations_api$GetJobConfig(var_name, include_config_map = var_include_config_map)
dput(result)


####################  GetJobConfigs  ####################

library(Rsirius)
var_include_config_map <- FALSE # character | if true the generic configmap will be part of the output (Optional)

#Request all available job configurations
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobConfigs(include_config_map = var_include_config_mapdata_file = "result.txt")
result <- api_instance$computations_api$GetJobConfigs(include_config_map = var_include_config_map)
dput(result)


####################  GetJobs  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_include_state <- FALSE # character | include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (Optional)
var_include_command <- FALSE # character | include job commands. (Optional)
var_include_affected_compounds <- FALSE # character | include list of compound ids affected by this job (if available) (Optional)

#Get job information and its current state and progress (if available).
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetJobs(var_project_id, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compoundsdata_file = "result.txt")
result <- api_instance$computations_api$GetJobs(var_project_id, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compounds)
dput(result)


####################  PostJobConfig  ####################

library(Rsirius)
var_name <- "name_example" # character | name of the job-config to add
var_job_submission <- JobSubmission$new(c("compoundIds_example"), c("fallbackAdducts_example"), c("enforcedAdducts_example"), c("detectableAdducts_example"), "recompute_example", Sirius$new("enabled_example", "QTOF", 123, 123, 123, "IGNORE", c("ALL"), "enforcedFormulaConstraints_example", "fallbackFormulaConstraints_example", c("detectableElements_example"), Timeout$new(123, 123, "identifier_example"), UseHeuristic$new(123, 123, "identifier_example")), Zodiac$new("enabled_example", ZodiacNumberOfConsideredCandidatesAt300Mz$new(123, "identifier_example"), ZodiacNumberOfConsideredCandidatesAt800Mz$new(123, "identifier_example"), ZodiacRunInTwoSteps$new("value_example", "identifier_example"), ZodiacEdgeFilterThresholds$new(123, 123, 123, "identifier_example"), ZodiacEpochs$new(123, 123, 123, "identifier_example")), FingerprintPrediction$new("enabled_example", "useScoreThreshold_example"), StructureDbSearch$new("enabled_example", c("ALL"), "tagLipids_example"), Canopus$new("enabled_example"), c(key = "inner_example")) # JobSubmission | to add
var_override_existing <- FALSE # character |  (Optional)

#Add new job configuration with given name.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$PostJobConfig(var_name, var_job_submission, override_existing = var_override_existingdata_file = "result.txt")
result <- api_instance$computations_api$PostJobConfig(var_name, var_job_submission, override_existing = var_override_existing)
dput(result)


####################  StartJob  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_submission <- JobSubmission$new(c("compoundIds_example"), c("fallbackAdducts_example"), c("enforcedAdducts_example"), c("detectableAdducts_example"), "recompute_example", Sirius$new("enabled_example", "QTOF", 123, 123, 123, "IGNORE", c("ALL"), "enforcedFormulaConstraints_example", "fallbackFormulaConstraints_example", c("detectableElements_example"), Timeout$new(123, 123, "identifier_example"), UseHeuristic$new(123, 123, "identifier_example")), Zodiac$new("enabled_example", ZodiacNumberOfConsideredCandidatesAt300Mz$new(123, "identifier_example"), ZodiacNumberOfConsideredCandidatesAt800Mz$new(123, "identifier_example"), ZodiacRunInTwoSteps$new("value_example", "identifier_example"), ZodiacEdgeFilterThresholds$new(123, 123, 123, "identifier_example"), ZodiacEpochs$new(123, 123, 123, "identifier_example")), FingerprintPrediction$new("enabled_example", "useScoreThreshold_example"), StructureDbSearch$new("enabled_example", c("ALL"), "tagLipids_example"), Canopus$new("enabled_example"), c(key = "inner_example")) # JobSubmission | configuration of the job that will be submitted of the job to be returned
var_include_state <- TRUE # character | include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (Optional)
var_include_command <- TRUE # character | include job command. (Optional)
var_include_affected_compounds <- FALSE # character | include list of compound ids affected by this job (if available) (Optional)

#Start computation for given compounds and with given parameters.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$StartJob(var_project_id, var_job_submission, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compoundsdata_file = "result.txt")
result <- api_instance$computations_api$StartJob(var_project_id, var_job_submission, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compounds)
dput(result)


####################  StartJobFromConfig  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to run jobs on
var_job_config_name <- "job_config_name_example" # character | name if the config to be used
var_request_body <- c("property_example") # array[character] | compound ids to be computed
var_recompute <- "recompute_example" # character | enable or disable recompute. If null the stored value will be used. (Optional)
var_include_state <- TRUE # character | include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (Optional)
var_include_command <- TRUE # character | include job command. (Optional)
var_include_affected_compounds <- FALSE # character | include list of compound ids affected by this job (if available) (Optional)

#Start computation for given compounds and with parameters from a stored job-config.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$StartJobFromConfig(var_project_id, var_job_config_name, var_request_body, recompute = var_recompute, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compoundsdata_file = "result.txt")
result <- api_instance$computations_api$StartJobFromConfig(var_project_id, var_job_config_name, var_request_body, recompute = var_recompute, include_state = var_include_state, include_command = var_include_command, include_affected_compounds = var_include_affected_compounds)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ComputationsApi-new}{\code{ComputationsApi$new()}}
\item \href{#method-ComputationsApi-DeleteJob}{\code{ComputationsApi$DeleteJob()}}
\item \href{#method-ComputationsApi-DeleteJobWithHttpInfo}{\code{ComputationsApi$DeleteJobWithHttpInfo()}}
\item \href{#method-ComputationsApi-DeleteJobConfig}{\code{ComputationsApi$DeleteJobConfig()}}
\item \href{#method-ComputationsApi-DeleteJobConfigWithHttpInfo}{\code{ComputationsApi$DeleteJobConfigWithHttpInfo()}}
\item \href{#method-ComputationsApi-GetDefaultJobConfig}{\code{ComputationsApi$GetDefaultJobConfig()}}
\item \href{#method-ComputationsApi-GetDefaultJobConfigWithHttpInfo}{\code{ComputationsApi$GetDefaultJobConfigWithHttpInfo()}}
\item \href{#method-ComputationsApi-GetJob}{\code{ComputationsApi$GetJob()}}
\item \href{#method-ComputationsApi-GetJobWithHttpInfo}{\code{ComputationsApi$GetJobWithHttpInfo()}}
\item \href{#method-ComputationsApi-GetJobConfig}{\code{ComputationsApi$GetJobConfig()}}
\item \href{#method-ComputationsApi-GetJobConfigWithHttpInfo}{\code{ComputationsApi$GetJobConfigWithHttpInfo()}}
\item \href{#method-ComputationsApi-GetJobConfigs}{\code{ComputationsApi$GetJobConfigs()}}
\item \href{#method-ComputationsApi-GetJobConfigsWithHttpInfo}{\code{ComputationsApi$GetJobConfigsWithHttpInfo()}}
\item \href{#method-ComputationsApi-GetJobs}{\code{ComputationsApi$GetJobs()}}
\item \href{#method-ComputationsApi-GetJobsWithHttpInfo}{\code{ComputationsApi$GetJobsWithHttpInfo()}}
\item \href{#method-ComputationsApi-PostJobConfig}{\code{ComputationsApi$PostJobConfig()}}
\item \href{#method-ComputationsApi-PostJobConfigWithHttpInfo}{\code{ComputationsApi$PostJobConfigWithHttpInfo()}}
\item \href{#method-ComputationsApi-StartJob}{\code{ComputationsApi$StartJob()}}
\item \href{#method-ComputationsApi-StartJobWithHttpInfo}{\code{ComputationsApi$StartJobWithHttpInfo()}}
\item \href{#method-ComputationsApi-StartJobFromConfig}{\code{ComputationsApi$StartJobFromConfig()}}
\item \href{#method-ComputationsApi-StartJobFromConfigWithHttpInfo}{\code{ComputationsApi$StartJobFromConfigWithHttpInfo()}}
\item \href{#method-ComputationsApi-clone}{\code{ComputationsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ComputationsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-DeleteJob"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-DeleteJob}{}}}
\subsection{Method \code{DeleteJob()}}{
Delete job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$DeleteJob(
  project_id,
  job_id,
  cancel_if_running = TRUE,
  await_deletion = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_id}}{of the job to be deleted}

\item{\code{cancel_if_running}}{(optional) If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (default value: TRUE)}

\item{\code{await_deletion}}{(optional) If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (default value: TRUE)}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-DeleteJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-DeleteJobWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobWithHttpInfo()}}{
Delete job.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$DeleteJobWithHttpInfo(
  project_id,
  job_id,
  cancel_if_running = TRUE,
  await_deletion = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_id}}{of the job to be deleted}

\item{\code{cancel_if_running}}{(optional) If true job will be canceled if it is not finished. Otherwise,                         deletion will fail for running jobs or request will block until job has finished. (default value: TRUE)}

\item{\code{await_deletion}}{(optional) If true request will block until deletion succeeded or failed.                         If the job is still running the request will wait until the job has finished. (default value: TRUE)}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-DeleteJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-DeleteJobConfig}{}}}
\subsection{Method \code{DeleteJobConfig()}}{
Delete job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$DeleteJobConfig(name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to delete}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-DeleteJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-DeleteJobConfigWithHttpInfo}{}}}
\subsection{Method \code{DeleteJobConfigWithHttpInfo()}}{
Delete job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$DeleteJobConfigWithHttpInfo(name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to delete}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetDefaultJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetDefaultJobConfig}{}}}
\subsection{Method \code{GetDefaultJobConfig()}}{
Request default job configuration
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetDefaultJobConfig(
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true, generic configmap with-defaults will be included (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetDefaultJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetDefaultJobConfigWithHttpInfo}{}}}
\subsection{Method \code{GetDefaultJobConfigWithHttpInfo()}}{
Request default job configuration
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetDefaultJobConfigWithHttpInfo(
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true, generic configmap with-defaults will be included (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobSubmission) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJob"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJob}{}}}
\subsection{Method \code{GetJob()}}{
Get job information and its current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJob(
  project_id,
  job_id,
  include_state = TRUE,
  include_command = FALSE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_id}}{of the job to be returned}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (default value: TRUE)}

\item{\code{include_command}}{(optional) include job command. (default value: FALSE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobWithHttpInfo}{}}}
\subsection{Method \code{GetJobWithHttpInfo()}}{
Get job information and its current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobWithHttpInfo(
  project_id,
  job_id,
  include_state = TRUE,
  include_command = FALSE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_id}}{of the job to be returned}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (default value: TRUE)}

\item{\code{include_command}}{(optional) include job command. (default value: FALSE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobConfig}{}}}
\subsection{Method \code{GetJobConfig()}}{
Request job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobConfig(
  name,
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to return}

\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobSubmission
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobConfigWithHttpInfo}{}}}
\subsection{Method \code{GetJobConfigWithHttpInfo()}}{
Request job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobConfigWithHttpInfo(
  name,
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to return}

\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobSubmission) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobConfigs"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobConfigs}{}}}
\subsection{Method \code{GetJobConfigs()}}{
Request all available job configurations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobConfigs(
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[JobSubmission]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobConfigsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobConfigsWithHttpInfo}{}}}
\subsection{Method \code{GetJobConfigsWithHttpInfo()}}{
Request all available job configurations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobConfigsWithHttpInfo(
  include_config_map = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_config_map}}{(optional) if true the generic configmap will be part of the output (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[JobSubmission]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobs"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobs}{}}}
\subsection{Method \code{GetJobs()}}{
Get job information and its current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobs(
  project_id,
  include_state = FALSE,
  include_command = FALSE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (default value: FALSE)}

\item{\code{include_command}}{(optional) include job commands. (default value: FALSE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[JobId]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-GetJobsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-GetJobsWithHttpInfo}{}}}
\subsection{Method \code{GetJobsWithHttpInfo()}}{
Get job information and its current state and progress (if available).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$GetJobsWithHttpInfo(
  project_id,
  include_state = FALSE,
  include_command = FALSE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} states. (default value: FALSE)}

\item{\code{include_command}}{(optional) include job commands. (default value: FALSE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[JobId]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-PostJobConfig"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-PostJobConfig}{}}}
\subsection{Method \code{PostJobConfig()}}{
Add new job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$PostJobConfig(
  name,
  job_submission,
  override_existing = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to add}

\item{\code{job_submission}}{to add}

\item{\code{override_existing}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
character
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-PostJobConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-PostJobConfigWithHttpInfo}{}}}
\subsection{Method \code{PostJobConfigWithHttpInfo()}}{
Add new job configuration with given name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$PostJobConfigWithHttpInfo(
  name,
  job_submission,
  override_existing = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{name of the job-config to add}

\item{\code{job_submission}}{to add}

\item{\code{override_existing}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (character) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-StartJob"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-StartJob}{}}}
\subsection{Method \code{StartJob()}}{
Start computation for given compounds and with given parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$StartJob(
  project_id,
  job_submission,
  include_state = TRUE,
  include_command = TRUE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_submission}}{configuration of the job that will be submitted of the job to be returned}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (default value: TRUE)}

\item{\code{include_command}}{(optional) include job command. (default value: TRUE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-StartJobWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-StartJobWithHttpInfo}{}}}
\subsection{Method \code{StartJobWithHttpInfo()}}{
Start computation for given compounds and with given parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$StartJobWithHttpInfo(
  project_id,
  job_submission,
  include_state = TRUE,
  include_command = TRUE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_submission}}{configuration of the job that will be submitted of the job to be returned}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (default value: TRUE)}

\item{\code{include_command}}{(optional) include job command. (default value: TRUE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-StartJobFromConfig"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-StartJobFromConfig}{}}}
\subsection{Method \code{StartJobFromConfig()}}{
Start computation for given compounds and with parameters from a stored job-config.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$StartJobFromConfig(
  project_id,
  job_config_name,
  request_body,
  recompute = NULL,
  include_state = TRUE,
  include_command = TRUE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_config_name}}{name if the config to be used}

\item{\code{request_body}}{compound ids to be computed}

\item{\code{recompute}}{(optional) enable or disable recompute. If null the stored value will be used.}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (default value: TRUE)}

\item{\code{include_command}}{(optional) include job command. (default value: TRUE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-StartJobFromConfigWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-StartJobFromConfigWithHttpInfo}{}}}
\subsection{Method \code{StartJobFromConfigWithHttpInfo()}}{
Start computation for given compounds and with parameters from a stored job-config.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$StartJobFromConfigWithHttpInfo(
  project_id,
  job_config_name,
  request_body,
  recompute = NULL,
  include_state = TRUE,
  include_command = TRUE,
  include_affected_compounds = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to run jobs on}

\item{\code{job_config_name}}{name if the config to be used}

\item{\code{request_body}}{compound ids to be computed}

\item{\code{recompute}}{(optional) enable or disable recompute. If null the stored value will be used.}

\item{\code{include_state}}{(optional) include {@link de.unijena.bioinf.ms.middleware.compute.model.JobProgress de.unijena.bioinf.ms.middleware.compute.model.JobProgress} state. (default value: TRUE)}

\item{\code{include_command}}{(optional) include job command. (default value: TRUE)}

\item{\code{include_affected_compounds}}{(optional) include list of compound ids affected by this job (if available) (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ComputationsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ComputationsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComputationsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
