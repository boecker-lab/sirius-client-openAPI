% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compound_id.R
\docType{class}
\name{CompoundId}
\alias{CompoundId}
\title{CompoundId}
\format{
An \code{R6Class} generator object
}
\description{
The CompoundId contains the ID of a compound together with some read-only information that might be displayed in  some summary view.

CompoundId Class
}
\details{
Create a new CompoundId
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{character [optional]}

\item{\code{name}}{character [optional]}

\item{\code{index}}{integer [optional]}

\item{\code{ionMass}}{numeric [optional]}

\item{\code{ionType}}{character [optional]}

\item{\code{rtStartSeconds}}{numeric [optional]}

\item{\code{rtEndSeconds}}{numeric [optional]}

\item{\code{topAnnotation}}{\link{CompoundAnnotation} [optional]}

\item{\code{msData}}{\link{MsData} [optional]}

\item{\code{computing}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CompoundId-new}{\code{CompoundId$new()}}
\item \href{#method-CompoundId-toJSON}{\code{CompoundId$toJSON()}}
\item \href{#method-CompoundId-fromJSON}{\code{CompoundId$fromJSON()}}
\item \href{#method-CompoundId-toJSONString}{\code{CompoundId$toJSONString()}}
\item \href{#method-CompoundId-fromJSONString}{\code{CompoundId$fromJSONString()}}
\item \href{#method-CompoundId-validateJSON}{\code{CompoundId$validateJSON()}}
\item \href{#method-CompoundId-toString}{\code{CompoundId$toString()}}
\item \href{#method-CompoundId-isValid}{\code{CompoundId$isValid()}}
\item \href{#method-CompoundId-getInvalidFields}{\code{CompoundId$getInvalidFields()}}
\item \href{#method-CompoundId-print}{\code{CompoundId$print()}}
\item \href{#method-CompoundId-clone}{\code{CompoundId$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-new"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CompoundId class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$new(
  id = NULL,
  name = NULL,
  index = NULL,
  ionMass = NULL,
  ionType = NULL,
  rtStartSeconds = NULL,
  rtEndSeconds = NULL,
  topAnnotation = NULL,
  msData = NULL,
  computing = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{id}

\item{\code{name}}{name}

\item{\code{index}}{index}

\item{\code{ionMass}}{ionMass}

\item{\code{ionType}}{ionType}

\item{\code{rtStartSeconds}}{rtStartSeconds}

\item{\code{rtEndSeconds}}{rtEndSeconds}

\item{\code{topAnnotation}}{topAnnotation}

\item{\code{msData}}{msData}

\item{\code{computing}}{computing}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CompoundId in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of CompoundId
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CompoundId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
CompoundId in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of CompoundId
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of CompoundId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to CompoundId and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-toString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of CompoundId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-print"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundId-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundId-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundId$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
