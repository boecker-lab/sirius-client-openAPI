% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compounds_api.R
\docType{class}
\name{CompoundsApi}
\alias{CompoundsApi}
\title{Compounds operations}
\format{
An \code{R6Class} generator object
}
\description{
CompoundsApi
}
\details{
SIRIUS Nightsky API

REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 6.0.0-SNAPSHOT
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ DeleteCompound } \emph{ Delete compound/feature with the given identifier from the specified project-space. }
Delete compound/feature with the given identifier from the specified project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } cid character


\item status code : 200 | OK


\item response headers :

\tabular{ll}{
}
}

\strong{ GetCompound } \emph{ Get compound/feature with the given identifier from the specified project-space. }
Get compound/feature with the given identifier from the specified project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } cid character
\item \emph{ @param } top_annotation character
\item \emph{ @param } ms_data character
\item \emph{ @param } lcms_feature_quality character
\item \emph{ @param } ms_quality character
\item \emph{ @returnType } \link{CompoundId} \cr


\item status code : 200 | CompoundId with additional annotations and MS/MS data (if specified).

\item return type : CompoundId
\item response headers :

\tabular{ll}{
}
}

\strong{ GetCompounds } \emph{ Get all available compounds/features in the given project-space. }
Get all available compounds/features in the given project-space.

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } top_annotation character
\item \emph{ @param } ms_data character
\item \emph{ @param } lcms_feature_quality character
\item \emph{ @param } ms_quality character
\item \emph{ @returnType } list( \link{CompoundId} ) \cr


\item status code : 200 | CompoundIds with additional annotations and MS/MS data (if specified).

\item return type : array[CompoundId]
\item response headers :

\tabular{ll}{
}
}

\strong{ ImportCompounds } \emph{ Import ms/ms data in given format from local filesystem into the specified project-space }
Import ms/ms data in given format from local filesystem into the specified project-space.  The import will run in a background job  Possible formats (ms, mgf, cef, msp, mzML, mzXML, project-space)  <p>

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } request_body list( character )
\item \emph{ @param } align_lcms_runs character
\item \emph{ @param } allow_ms1_only_data character
\item \emph{ @param } ignore_formulas character
\item \emph{ @returnType } \link{JobId} \cr


\item status code : 200 | JobId background job that imports given compounds/features.

\item return type : JobId
\item response headers :

\tabular{ll}{
}
}

\strong{ ImportCompoundsFromString } \emph{ Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML) }
Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)

\itemize{
\item \emph{ @param } project_id character
\item \emph{ @param } format character
\item \emph{ @param } body character
\item \emph{ @param } source_name character
\item \emph{ @returnType } list( \link{CompoundId} ) \cr


\item status code : 200 | CompoundIds of the imported compounds/features.

\item return type : array[CompoundId]
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  DeleteCompound  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to delete from.
var_cid <- "cid_example" # character | identifier of compound to delete.

#Delete compound/feature with the given identifier from the specified project-space.
api_instance <- rsirius_api$new()

api_instance$compounds_api$DeleteCompound(var_project_id, var_cid)


####################  GetCompound  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_cid <- "cid_example" # character | identifier of compound to access.
var_top_annotation <- FALSE # character | include the top annotation of this feature into the output (if available). (Optional)
var_ms_data <- FALSE # character | include corresponding source data (MS and MS/MS) into the output. (Optional)
var_lcms_feature_quality <- FALSE # character |  (Optional)
var_ms_quality <- FALSE # character |  (Optional)

#Get compound/feature with the given identifier from the specified project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompound(var_project_id, var_cid, top_annotation = var_top_annotation, ms_data = var_ms_data, lcms_feature_quality = var_lcms_feature_quality, ms_quality = var_ms_qualitydata_file = "result.txt")
result <- api_instance$compounds_api$GetCompound(var_project_id, var_cid, top_annotation = var_top_annotation, ms_data = var_ms_data, lcms_feature_quality = var_lcms_feature_quality, ms_quality = var_ms_quality)
dput(result)


####################  GetCompounds  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to read from.
var_top_annotation <- FALSE # character | include the top annotation of this feature into the output (if available). (Optional)
var_ms_data <- FALSE # character | include corresponding source data (MS and MS/MS) into the output. (Optional)
var_lcms_feature_quality <- FALSE # character |  (Optional)
var_ms_quality <- FALSE # character |  (Optional)

#Get all available compounds/features in the given project-space.
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$GetCompounds(var_project_id, top_annotation = var_top_annotation, ms_data = var_ms_data, lcms_feature_quality = var_lcms_feature_quality, ms_quality = var_ms_qualitydata_file = "result.txt")
result <- api_instance$compounds_api$GetCompounds(var_project_id, top_annotation = var_top_annotation, ms_data = var_ms_data, lcms_feature_quality = var_lcms_feature_quality, ms_quality = var_ms_quality)
dput(result)


####################  ImportCompounds  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to import into.
var_request_body <- c("property_example") # array[character] | List of file and directory paths to import
var_align_lcms_runs <- FALSE # character | If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (Optional)
var_allow_ms1_only_data <- TRUE # character |  (Optional)
var_ignore_formulas <- FALSE # character |  (Optional)

#Import ms/ms data in given format from local filesystem into the specified project-space
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ImportCompounds(var_project_id, var_request_body, align_lcms_runs = var_align_lcms_runs, allow_ms1_only_data = var_allow_ms1_only_data, ignore_formulas = var_ignore_formulasdata_file = "result.txt")
result <- api_instance$compounds_api$ImportCompounds(var_project_id, var_request_body, align_lcms_runs = var_align_lcms_runs, allow_ms1_only_data = var_allow_ms1_only_data, ignore_formulas = var_ignore_formulas)
dput(result)


####################  ImportCompoundsFromString  ####################

library(Rsirius)
var_project_id <- "project_id_example" # character | project-space to import into.
var_format <- "format_example" # character | data format specified by the usual file extension of the format (without [.])
var_body <- "body_example" # character | data content in specified format
var_source_name <- "source_name_example" # character | name that specifies the data source. Can e.g. be a file path or just a name. (Optional)

#Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
api_instance <- rsirius_api$new()

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$ImportCompoundsFromString(var_project_id, var_format, var_body, source_name = var_source_namedata_file = "result.txt")
result <- api_instance$compounds_api$ImportCompoundsFromString(var_project_id, var_format, var_body, source_name = var_source_name)
dput(result)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CompoundsApi-new}{\code{CompoundsApi$new()}}
\item \href{#method-CompoundsApi-DeleteCompound}{\code{CompoundsApi$DeleteCompound()}}
\item \href{#method-CompoundsApi-DeleteCompoundWithHttpInfo}{\code{CompoundsApi$DeleteCompoundWithHttpInfo()}}
\item \href{#method-CompoundsApi-GetCompound}{\code{CompoundsApi$GetCompound()}}
\item \href{#method-CompoundsApi-GetCompoundWithHttpInfo}{\code{CompoundsApi$GetCompoundWithHttpInfo()}}
\item \href{#method-CompoundsApi-GetCompounds}{\code{CompoundsApi$GetCompounds()}}
\item \href{#method-CompoundsApi-GetCompoundsWithHttpInfo}{\code{CompoundsApi$GetCompoundsWithHttpInfo()}}
\item \href{#method-CompoundsApi-ImportCompounds}{\code{CompoundsApi$ImportCompounds()}}
\item \href{#method-CompoundsApi-ImportCompoundsWithHttpInfo}{\code{CompoundsApi$ImportCompoundsWithHttpInfo()}}
\item \href{#method-CompoundsApi-ImportCompoundsFromString}{\code{CompoundsApi$ImportCompoundsFromString()}}
\item \href{#method-CompoundsApi-ImportCompoundsFromStringWithHttpInfo}{\code{CompoundsApi$ImportCompoundsFromStringWithHttpInfo()}}
\item \href{#method-CompoundsApi-clone}{\code{CompoundsApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new CompoundsApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-DeleteCompound"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-DeleteCompound}{}}}
\subsection{Method \code{DeleteCompound()}}{
Delete compound/feature with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$DeleteCompound(project_id, cid, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{cid}}{identifier of compound to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-DeleteCompoundWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-DeleteCompoundWithHttpInfo}{}}}
\subsection{Method \code{DeleteCompoundWithHttpInfo()}}{
Delete compound/feature with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$DeleteCompoundWithHttpInfo(project_id, cid, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to delete from.}

\item{\code{cid}}{identifier of compound to delete.}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompound"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompound}{}}}
\subsection{Method \code{GetCompound()}}{
Get compound/feature with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompound(
  project_id,
  cid,
  top_annotation = FALSE,
  ms_data = FALSE,
  lcms_feature_quality = FALSE,
  ms_quality = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{cid}}{identifier of compound to access.}

\item{\code{top_annotation}}{(optional) include the top annotation of this feature into the output (if available). (default value: FALSE)}

\item{\code{ms_data}}{(optional) include corresponding source data (MS and MS/MS) into the output. (default value: FALSE)}

\item{\code{lcms_feature_quality}}{(optional) No description (default value: FALSE)}

\item{\code{ms_quality}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
CompoundId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundWithHttpInfo()}}{
Get compound/feature with the given identifier from the specified project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundWithHttpInfo(
  project_id,
  cid,
  top_annotation = FALSE,
  ms_data = FALSE,
  lcms_feature_quality = FALSE,
  ms_quality = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{cid}}{identifier of compound to access.}

\item{\code{top_annotation}}{(optional) include the top annotation of this feature into the output (if available). (default value: FALSE)}

\item{\code{ms_data}}{(optional) include corresponding source data (MS and MS/MS) into the output. (default value: FALSE)}

\item{\code{lcms_feature_quality}}{(optional) No description (default value: FALSE)}

\item{\code{ms_quality}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (CompoundId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompounds"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompounds}{}}}
\subsection{Method \code{GetCompounds()}}{
Get all available compounds/features in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompounds(
  project_id,
  top_annotation = FALSE,
  ms_data = FALSE,
  lcms_feature_quality = FALSE,
  ms_quality = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{top_annotation}}{(optional) include the top annotation of this feature into the output (if available). (default value: FALSE)}

\item{\code{ms_data}}{(optional) include corresponding source data (MS and MS/MS) into the output. (default value: FALSE)}

\item{\code{lcms_feature_quality}}{(optional) No description (default value: FALSE)}

\item{\code{ms_quality}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[CompoundId]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-GetCompoundsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-GetCompoundsWithHttpInfo}{}}}
\subsection{Method \code{GetCompoundsWithHttpInfo()}}{
Get all available compounds/features in the given project-space.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$GetCompoundsWithHttpInfo(
  project_id,
  top_annotation = FALSE,
  ms_data = FALSE,
  lcms_feature_quality = FALSE,
  ms_quality = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to read from.}

\item{\code{top_annotation}}{(optional) include the top annotation of this feature into the output (if available). (default value: FALSE)}

\item{\code{ms_data}}{(optional) include corresponding source data (MS and MS/MS) into the output. (default value: FALSE)}

\item{\code{lcms_feature_quality}}{(optional) No description (default value: FALSE)}

\item{\code{ms_quality}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[CompoundId]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-ImportCompounds"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-ImportCompounds}{}}}
\subsection{Method \code{ImportCompounds()}}{
Import ms/ms data in given format from local filesystem into the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$ImportCompounds(
  project_id,
  request_body,
  align_lcms_runs = FALSE,
  allow_ms1_only_data = TRUE,
  ignore_formulas = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{request_body}}{List of file and directory paths to import}

\item{\code{align_lcms_runs}}{(optional) If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (default value: FALSE)}

\item{\code{allow_ms1_only_data}}{(optional) No description (default value: TRUE)}

\item{\code{ignore_formulas}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
JobId
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-ImportCompoundsWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-ImportCompoundsWithHttpInfo}{}}}
\subsection{Method \code{ImportCompoundsWithHttpInfo()}}{
Import ms/ms data in given format from local filesystem into the specified project-space
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$ImportCompoundsWithHttpInfo(
  project_id,
  request_body,
  align_lcms_runs = FALSE,
  allow_ms1_only_data = TRUE,
  ignore_formulas = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{request_body}}{List of file and directory paths to import}

\item{\code{align_lcms_runs}}{(optional) If true, multiple LCMS Runs (mzML, mzXML) will be aligned during import/feature finding (default value: FALSE)}

\item{\code{allow_ms1_only_data}}{(optional) No description (default value: TRUE)}

\item{\code{ignore_formulas}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (JobId) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-ImportCompoundsFromString"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-ImportCompoundsFromString}{}}}
\subsection{Method \code{ImportCompoundsFromString()}}{
Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$ImportCompoundsFromString(
  project_id,
  format,
  body,
  source_name = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{format}}{data format specified by the usual file extension of the format (without [.])}

\item{\code{body}}{data content in specified format}

\item{\code{source_name}}{(optional) name that specifies the data source. Can e.g. be a file path or just a name.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array[CompoundId]
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-ImportCompoundsFromStringWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-ImportCompoundsFromStringWithHttpInfo}{}}}
\subsection{Method \code{ImportCompoundsFromStringWithHttpInfo()}}{
Import ms/ms data from the given format into the specified project-space  Possible formats (ms, mgf, cef, msp, mzML, mzXML)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$ImportCompoundsFromStringWithHttpInfo(
  project_id,
  format,
  body,
  source_name = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{project_id}}{project-space to import into.}

\item{\code{format}}{data format specified by the usual file extension of the format (without [.])}

\item{\code{body}}{data content in specified format}

\item{\code{source_name}}{(optional) name that specifies the data source. Can e.g. be a file path or just a name.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (array[CompoundId]) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CompoundsApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CompoundsApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CompoundsApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
