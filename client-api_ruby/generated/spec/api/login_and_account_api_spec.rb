=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

OpenAPI spec version: v0.9 on SIRIUS 5.6.0-SNAPSHOT

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.35
=end

require 'spec_helper'
require 'json'

# Unit tests for RubySirius::LoginAndAccountApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LoginAndAccountApi' do
  before do
    # run before each test
    @instance = RubySirius::LoginAndAccountApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LoginAndAccountApi' do
    it 'should create an instance of LoginAndAccountApi' do
      expect(@instance).to be_instance_of(RubySirius::LoginAndAccountApi)
    end
  end

  # unit tests for get_account_info
  # Get information about the account currently logged in.
  # Get information about the account currently logged in. Fails if not logged in.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_subs include available and active subscriptions in {@link AccountInfo AccountInfo}.
  # @return [AccountInfo]
  describe 'get_account_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_sign_up_url
  # Get SignUp URL (For signUp via web browser)
  # Get SignUp URL (For signUp via web browser)
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_sign_up_url test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscriptions
  # Get available subscriptions of the account currently logged in.
  # Get available subscriptions of the account currently logged in. Fails if not logged in.
  # @param [Hash] opts the optional parameters
  # @return [Array<Subscription>]
  describe 'get_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_logged_in
  # Check if a user is logged in.
  # Check if a user is logged in.
  # @param [Hash] opts the optional parameters
  # @return [BOOLEAN]
  describe 'is_logged_in test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for login
  # Login into SIRIUS web services.
  # Login into SIRIUS web services.
  # @param body used to log in.
  # @param accept_terms 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :fail_when_logged_in if true request fails if an active login already exists.
  # @option opts [BOOLEAN] :include_subs include available and active subscriptions in {@link AccountInfo AccountInfo}.
  # @return [AccountInfo]
  describe 'login test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logout
  # Logout from SIRIUS web services.
  # Logout from SIRIUS web services.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'logout test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sign_up
  # Open SignUp window in system browser and return signUp link.
  # Open SignUp window in system browser and return signUp link.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'sign_up test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
