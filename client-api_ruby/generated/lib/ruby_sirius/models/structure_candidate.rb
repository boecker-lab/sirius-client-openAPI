=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module RubySirius
  # 
  class StructureCandidate
    attr_accessor :structure_name

    attr_accessor :smiles

    attr_accessor :csi_score

    attr_accessor :tanimoto_similarity

    attr_accessor :confidence_score

    attr_accessor :num_of_pub_med_ids

    attr_accessor :xlog_p

    attr_accessor :inchi_key

    # Array containing the indices of the molecular fingerprint that are available in the structure (1)  OPTIONAL: needs to be added by parameter
    attr_accessor :fp_bits_set

    # List of structure database links belonging to this structure candidate  OPTIONAL: needs to be added by parameter
    attr_accessor :db_links

    # PubMed IDs belonging to this structure candidate  OPTIONAL: needs to be added by parameter
    attr_accessor :pubmed_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'structure_name' => :'structureName',
        :'smiles' => :'smiles',
        :'csi_score' => :'csiScore',
        :'tanimoto_similarity' => :'tanimotoSimilarity',
        :'confidence_score' => :'confidenceScore',
        :'num_of_pub_med_ids' => :'numOfPubMedIds',
        :'xlog_p' => :'xlogP',
        :'inchi_key' => :'inchiKey',
        :'fp_bits_set' => :'fpBitsSet',
        :'db_links' => :'dbLinks',
        :'pubmed_ids' => :'pubmedIds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'structure_name' => :'String',
        :'smiles' => :'String',
        :'csi_score' => :'Float',
        :'tanimoto_similarity' => :'Float',
        :'confidence_score' => :'Float',
        :'num_of_pub_med_ids' => :'Integer',
        :'xlog_p' => :'Float',
        :'inchi_key' => :'String',
        :'fp_bits_set' => :'Array<Integer>',
        :'db_links' => :'Array<DBLink>',
        :'pubmed_ids' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubySirius::StructureCandidate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubySirius::StructureCandidate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'structure_name')
        self.structure_name = attributes[:'structure_name']
      end

      if attributes.key?(:'smiles')
        self.smiles = attributes[:'smiles']
      end

      if attributes.key?(:'csi_score')
        self.csi_score = attributes[:'csi_score']
      end

      if attributes.key?(:'tanimoto_similarity')
        self.tanimoto_similarity = attributes[:'tanimoto_similarity']
      end

      if attributes.key?(:'confidence_score')
        self.confidence_score = attributes[:'confidence_score']
      end

      if attributes.key?(:'num_of_pub_med_ids')
        self.num_of_pub_med_ids = attributes[:'num_of_pub_med_ids']
      end

      if attributes.key?(:'xlog_p')
        self.xlog_p = attributes[:'xlog_p']
      end

      if attributes.key?(:'inchi_key')
        self.inchi_key = attributes[:'inchi_key']
      end

      if attributes.key?(:'fp_bits_set')
        if (value = attributes[:'fp_bits_set']).is_a?(Array)
          self.fp_bits_set = value
        end
      end

      if attributes.key?(:'db_links')
        if (value = attributes[:'db_links']).is_a?(Array)
          self.db_links = value
        end
      end

      if attributes.key?(:'pubmed_ids')
        if (value = attributes[:'pubmed_ids']).is_a?(Array)
          self.pubmed_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          structure_name == o.structure_name &&
          smiles == o.smiles &&
          csi_score == o.csi_score &&
          tanimoto_similarity == o.tanimoto_similarity &&
          confidence_score == o.confidence_score &&
          num_of_pub_med_ids == o.num_of_pub_med_ids &&
          xlog_p == o.xlog_p &&
          inchi_key == o.inchi_key &&
          fp_bits_set == o.fp_bits_set &&
          db_links == o.db_links &&
          pubmed_ids == o.pubmed_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [structure_name, smiles, csi_score, tanimoto_similarity, confidence_score, num_of_pub_med_ids, xlog_p, inchi_key, fp_bits_set, db_links, pubmed_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubySirius.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
