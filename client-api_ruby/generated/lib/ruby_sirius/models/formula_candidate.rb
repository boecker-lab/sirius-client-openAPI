=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module RubySirius
  # 
  class FormulaCandidate
    attr_accessor :sirius_score

    attr_accessor :isotope_score

    attr_accessor :tree_score

    attr_accessor :zodiac_score

    attr_accessor :molecular_formula

    attr_accessor :adduct

    attr_accessor :num_ofexplained_peaks

    attr_accessor :num_ofexplainable_peaks

    attr_accessor :total_explained_intensity

    attr_accessor :median_mass_deviation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sirius_score' => :'siriusScore',
        :'isotope_score' => :'isotopeScore',
        :'tree_score' => :'treeScore',
        :'zodiac_score' => :'zodiacScore',
        :'molecular_formula' => :'molecularFormula',
        :'adduct' => :'adduct',
        :'num_ofexplained_peaks' => :'numOfexplainedPeaks',
        :'num_ofexplainable_peaks' => :'numOfexplainablePeaks',
        :'total_explained_intensity' => :'totalExplainedIntensity',
        :'median_mass_deviation' => :'medianMassDeviation'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sirius_score' => :'Float',
        :'isotope_score' => :'Float',
        :'tree_score' => :'Float',
        :'zodiac_score' => :'Float',
        :'molecular_formula' => :'String',
        :'adduct' => :'String',
        :'num_ofexplained_peaks' => :'Integer',
        :'num_ofexplainable_peaks' => :'Integer',
        :'total_explained_intensity' => :'Float',
        :'median_mass_deviation' => :'Deviation'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubySirius::FormulaCandidate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubySirius::FormulaCandidate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sirius_score')
        self.sirius_score = attributes[:'sirius_score']
      end

      if attributes.key?(:'isotope_score')
        self.isotope_score = attributes[:'isotope_score']
      end

      if attributes.key?(:'tree_score')
        self.tree_score = attributes[:'tree_score']
      end

      if attributes.key?(:'zodiac_score')
        self.zodiac_score = attributes[:'zodiac_score']
      end

      if attributes.key?(:'molecular_formula')
        self.molecular_formula = attributes[:'molecular_formula']
      end

      if attributes.key?(:'adduct')
        self.adduct = attributes[:'adduct']
      end

      if attributes.key?(:'num_ofexplained_peaks')
        self.num_ofexplained_peaks = attributes[:'num_ofexplained_peaks']
      end

      if attributes.key?(:'num_ofexplainable_peaks')
        self.num_ofexplainable_peaks = attributes[:'num_ofexplainable_peaks']
      end

      if attributes.key?(:'total_explained_intensity')
        self.total_explained_intensity = attributes[:'total_explained_intensity']
      end

      if attributes.key?(:'median_mass_deviation')
        self.median_mass_deviation = attributes[:'median_mass_deviation']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sirius_score == o.sirius_score &&
          isotope_score == o.isotope_score &&
          tree_score == o.tree_score &&
          zodiac_score == o.zodiac_score &&
          molecular_formula == o.molecular_formula &&
          adduct == o.adduct &&
          num_ofexplained_peaks == o.num_ofexplained_peaks &&
          num_ofexplainable_peaks == o.num_ofexplainable_peaks &&
          total_explained_intensity == o.total_explained_intensity &&
          median_mass_deviation == o.median_mass_deviation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sirius_score, isotope_score, tree_score, zodiac_score, molecular_formula, adduct, num_ofexplained_peaks, num_ofexplainable_peaks, total_explained_intensity, median_mass_deviation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubySirius.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
