=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module RubySirius
  # 
  class Subscription
    attr_accessor :sid

    attr_accessor :subscriber_id

    attr_accessor :subscriber_name

    attr_accessor :expiration_date

    attr_accessor :start_date

    attr_accessor :count_queries

    attr_accessor :compound_limit

    attr_accessor :compound_hash_recording_time

    attr_accessor :max_queries_per_compound

    attr_accessor :max_user_accounts

    attr_accessor :service_url

    attr_accessor :description

    attr_accessor :name

    attr_accessor :tos

    attr_accessor :pp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sid' => :'sid',
        :'subscriber_id' => :'subscriberId',
        :'subscriber_name' => :'subscriberName',
        :'expiration_date' => :'expirationDate',
        :'start_date' => :'startDate',
        :'count_queries' => :'countQueries',
        :'compound_limit' => :'compoundLimit',
        :'compound_hash_recording_time' => :'compoundHashRecordingTime',
        :'max_queries_per_compound' => :'maxQueriesPerCompound',
        :'max_user_accounts' => :'maxUserAccounts',
        :'service_url' => :'serviceUrl',
        :'description' => :'description',
        :'name' => :'name',
        :'tos' => :'tos',
        :'pp' => :'pp'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sid' => :'String',
        :'subscriber_id' => :'String',
        :'subscriber_name' => :'String',
        :'expiration_date' => :'Time',
        :'start_date' => :'Time',
        :'count_queries' => :'Boolean',
        :'compound_limit' => :'Integer',
        :'compound_hash_recording_time' => :'Integer',
        :'max_queries_per_compound' => :'Integer',
        :'max_user_accounts' => :'Integer',
        :'service_url' => :'String',
        :'description' => :'String',
        :'name' => :'String',
        :'tos' => :'String',
        :'pp' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RubySirius::Subscription` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RubySirius::Subscription`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sid')
        self.sid = attributes[:'sid']
      end

      if attributes.key?(:'subscriber_id')
        self.subscriber_id = attributes[:'subscriber_id']
      end

      if attributes.key?(:'subscriber_name')
        self.subscriber_name = attributes[:'subscriber_name']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'count_queries')
        self.count_queries = attributes[:'count_queries']
      end

      if attributes.key?(:'compound_limit')
        self.compound_limit = attributes[:'compound_limit']
      end

      if attributes.key?(:'compound_hash_recording_time')
        self.compound_hash_recording_time = attributes[:'compound_hash_recording_time']
      end

      if attributes.key?(:'max_queries_per_compound')
        self.max_queries_per_compound = attributes[:'max_queries_per_compound']
      end

      if attributes.key?(:'max_user_accounts')
        self.max_user_accounts = attributes[:'max_user_accounts']
      end

      if attributes.key?(:'service_url')
        self.service_url = attributes[:'service_url']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'tos')
        self.tos = attributes[:'tos']
      end

      if attributes.key?(:'pp')
        self.pp = attributes[:'pp']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sid == o.sid &&
          subscriber_id == o.subscriber_id &&
          subscriber_name == o.subscriber_name &&
          expiration_date == o.expiration_date &&
          start_date == o.start_date &&
          count_queries == o.count_queries &&
          compound_limit == o.compound_limit &&
          compound_hash_recording_time == o.compound_hash_recording_time &&
          max_queries_per_compound == o.max_queries_per_compound &&
          max_user_accounts == o.max_user_accounts &&
          service_url == o.service_url &&
          description == o.description &&
          name == o.name &&
          tos == o.tos &&
          pp == o.pp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sid, subscriber_id, subscriber_name, expiration_date, start_date, count_queries, compound_limit, compound_hash_recording_time, max_queries_per_compound, max_user_accounts, service_url, description, name, tos, pp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = RubySirius.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
