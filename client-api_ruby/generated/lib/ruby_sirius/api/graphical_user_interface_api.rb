=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RubySirius
  class GraphicalUserInterfaceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply given changes to the running GUI instance.
    # Apply given changes to the running GUI instance.
    # @param project_id [String] of project-space the GUI instance is connected to.
    # @param gui_parameters [GuiParameters] parameters that should be applied.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apply_to_gui(project_id, gui_parameters, opts = {})
      apply_to_gui_with_http_info(project_id, gui_parameters, opts)
      nil
    end

    # Apply given changes to the running GUI instance.
    # Apply given changes to the running GUI instance.
    # @param project_id [String] of project-space the GUI instance is connected to.
    # @param gui_parameters [GuiParameters] parameters that should be applied.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apply_to_gui_with_http_info(project_id, gui_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GraphicalUserInterfaceApi.apply_to_gui ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GraphicalUserInterfaceApi.apply_to_gui"
      end
      # verify the required parameter 'gui_parameters' is set
      if @api_client.config.client_side_validation && gui_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'gui_parameters' when calling GraphicalUserInterfaceApi.apply_to_gui"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/gui'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(gui_parameters)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GraphicalUserInterfaceApi.apply_to_gui",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GraphicalUserInterfaceApi#apply_to_gui\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Close GUI instance of given project-space if available.
    # Close GUI instance of given project-space if available.
    # @param project_id [String] if project-space the GUI instance is connected to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def close_gui(project_id, opts = {})
      close_gui_with_http_info(project_id, opts)
      nil
    end

    # Close GUI instance of given project-space if available.
    # Close GUI instance of given project-space if available.
    # @param project_id [String] if project-space the GUI instance is connected to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def close_gui_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GraphicalUserInterfaceApi.close_gui ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GraphicalUserInterfaceApi.close_gui"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/gui'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GraphicalUserInterfaceApi.close_gui",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GraphicalUserInterfaceApi#close_gui\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open GUI instance on specified project-space and bring the GUI window to foreground.
    # Open GUI instance on specified project-space and bring the GUI window to foreground.
    # @param project_id [String] of project-space the GUI instance will connect to.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :read_only open in read-only mode. (default to true)
    # @return [nil]
    def open_gui(project_id, opts = {})
      open_gui_with_http_info(project_id, opts)
      nil
    end

    # Open GUI instance on specified project-space and bring the GUI window to foreground.
    # Open GUI instance on specified project-space and bring the GUI window to foreground.
    # @param project_id [String] of project-space the GUI instance will connect to.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :read_only open in read-only mode. (default to true)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def open_gui_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GraphicalUserInterfaceApi.open_gui ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling GraphicalUserInterfaceApi.open_gui"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/gui'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'readOnly'] = opts[:'read_only'] if !opts[:'read_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GraphicalUserInterfaceApi.open_gui",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GraphicalUserInterfaceApi#open_gui\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
