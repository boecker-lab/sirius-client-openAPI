=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RubySirius
  class FormulaResultsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
    # Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [CompoundClasses]
    def get_best_matching_canopus_predictions(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_best_matching_canopus_predictions_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
    # Best matching compound classes,  Set of the highest scoring compound classes CANOPUS) on each hierarchy level of  the ClassyFire and NPC ontology,
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompoundClasses, Integer, Hash)>] CompoundClasses data, response status code and response headers
    def get_best_matching_canopus_predictions_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_best_matching_canopus_predictions ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_best_matching_canopus_predictions"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_best_matching_canopus_predictions"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_best_matching_canopus_predictions"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/best-canopus-predictions'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompoundClasses'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_best_matching_canopus_predictions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_best_matching_canopus_predictions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
    # All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [CanopusPredictions]
    def get_canopus_predictions(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_canopus_predictions_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
    # All predicted compound classes (CANOPUS) from ClassyFire and NPC and their probabilities,
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [Array<(CanopusPredictions, Integer, Hash)>] CanopusPredictions data, response status code and response headers
    def get_canopus_predictions_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_canopus_predictions ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_canopus_predictions"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_canopus_predictions"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_canopus_predictions"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/canopus-predictions'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CanopusPredictions'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_canopus_predictions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_canopus_predictions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
    # Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [Array<Float>]
    def get_fingerprint_prediction(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_fingerprint_prediction_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
    # Returns predicted fingerprint (CSI:FingerID) for the given formula result identifier  This fingerprint is used to perfom structure database search and predict compound classes.
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Float>, Integer, Hash)>] Array<Float> data, response status code and response headers
    def get_fingerprint_prediction_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_fingerprint_prediction ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_fingerprint_prediction"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_fingerprint_prediction"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_fingerprint_prediction"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/fingerprint'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Float>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_fingerprint_prediction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_fingerprint_prediction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of all FormulaResultContainers available for this compound/feature with minimal information.
    # List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :result_overview add ResultOverview to the FormulaResultContainers (default to true)
    # @option opts [Boolean] :formula_candidate add extended formula candidate information to the FormulaResultContainers (default to false)
    # @return [Array<FormulaResultContainer>]
    def get_formula_ids(project_id, compound_id, opts = {})
      data, _status_code, _headers = get_formula_ids_with_http_info(project_id, compound_id, opts)
      data
    end

    # List of all FormulaResultContainers available for this compound/feature with minimal information.
    # List of all FormulaResultContainers available for this compound/feature with minimal information.  Can be enriched with an optional results overview.
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :result_overview add ResultOverview to the FormulaResultContainers (default to true)
    # @option opts [Boolean] :formula_candidate add extended formula candidate information to the FormulaResultContainers (default to false)
    # @return [Array<(Array<FormulaResultContainer>, Integer, Hash)>] Array<FormulaResultContainer> data, response status code and response headers
    def get_formula_ids_with_http_info(project_id, compound_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_formula_ids ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_formula_ids"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_formula_ids"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'resultOverview'] = opts[:'result_overview'] if !opts[:'result_overview'].nil?
      query_params[:'formulaCandidate'] = opts[:'formula_candidate'] if !opts[:'formula_candidate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FormulaResultContainer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_formula_ids",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_formula_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # FormulaResultContainers for the given 'formulaId' with minimal information.
    # FormulaResultContainers for the given 'formulaId' with minimal information.  Can be enriched with an optional results overview and formula candidate information.
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :result_overview add ResultOverview to the FormulaResultContainer (default to true)
    # @option opts [Boolean] :formula_candidate add extended formula candidate information to the FormulaResultContainer (default to true)
    # @return [FormulaResultContainer]
    def get_formula_result(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_formula_result_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.
    # FormulaResultContainers for the given &#39;formulaId&#39; with minimal information.  Can be enriched with an optional results overview and formula candidate information.
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :result_overview add ResultOverview to the FormulaResultContainer (default to true)
    # @option opts [Boolean] :formula_candidate add extended formula candidate information to the FormulaResultContainer (default to true)
    # @return [Array<(FormulaResultContainer, Integer, Hash)>] FormulaResultContainer data, response status code and response headers
    def get_formula_result_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_formula_result ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_formula_result"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_formula_result"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_formula_result"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'resultOverview'] = opts[:'result_overview'] if !opts[:'result_overview'].nil?
      query_params[:'formulaCandidate'] = opts[:'formula_candidate'] if !opts[:'formula_candidate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormulaResultContainer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_formula_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_formula_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
    # Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [FragmentationTree]
    def get_frag_tree(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_frag_tree_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
    # Returns fragmentation tree (SIRIUS) for the given formula result identifier  This tree is used to rank formula candidates (treeScore).
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [Array<(FragmentationTree, Integer, Hash)>] FragmentationTree data, response status code and response headers
    def get_frag_tree_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_frag_tree ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_frag_tree"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_frag_tree"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_frag_tree"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/tree'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FragmentationTree'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_frag_tree",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_frag_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
    # Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [AnnotatedSpectrum]
    def get_simulated_isotope_pattern(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_simulated_isotope_pattern_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.
    # Returns simulated isotope pattern (SIRIUS) for the given formula result identifier.  This simulated isotope pattern is used to rank formula candidates (treeScore).
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnnotatedSpectrum, Integer, Hash)>] AnnotatedSpectrum data, response status code and response headers
    def get_simulated_isotope_pattern_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_simulated_isotope_pattern ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_simulated_isotope_pattern"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_simulated_isotope_pattern"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_simulated_isotope_pattern"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/isotope-pattern'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnnotatedSpectrum'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_simulated_isotope_pattern",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_simulated_isotope_pattern\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of StructureCandidates the given 'formulaId' with minimal information.
    # List of StructureCandidates the given 'formulaId' with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :fingerprint add molecular fingerprint to StructureCandidates (default to false)
    # @option opts [Boolean] :db_links add dbLinks to StructureCandidates (default to false)
    # @option opts [Boolean] :pub_med_ids add PubMedIds (citation count) to StructureCandidates (default to false)
    # @option opts [Integer] :top_k retrieve only the top k StructureCandidates (default to -1)
    # @return [Array<StructureCandidate>]
    def get_structure_candidates(project_id, compound_id, formula_id, opts = {})
      data, _status_code, _headers = get_structure_candidates_with_http_info(project_id, compound_id, formula_id, opts)
      data
    end

    # List of StructureCandidates the given &#39;formulaId&#39; with minimal information.
    # List of StructureCandidates the given &#39;formulaId&#39; with minimal information.  StructureCandidates can be enriched with molecular fingerprint, structure database links and pubmed ids,
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param formula_id [String] identifier of the requested formula result
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :fingerprint add molecular fingerprint to StructureCandidates (default to false)
    # @option opts [Boolean] :db_links add dbLinks to StructureCandidates (default to false)
    # @option opts [Boolean] :pub_med_ids add PubMedIds (citation count) to StructureCandidates (default to false)
    # @option opts [Integer] :top_k retrieve only the top k StructureCandidates (default to -1)
    # @return [Array<(Array<StructureCandidate>, Integer, Hash)>] Array<StructureCandidate> data, response status code and response headers
    def get_structure_candidates_with_http_info(project_id, compound_id, formula_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_structure_candidates ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_structure_candidates"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_structure_candidates"
      end
      # verify the required parameter 'formula_id' is set
      if @api_client.config.client_side_validation && formula_id.nil?
        fail ArgumentError, "Missing the required parameter 'formula_id' when calling FormulaResultsApi.get_structure_candidates"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/formulas/{formulaId}/structures'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s)).sub('{' + 'formulaId' + '}', CGI.escape(formula_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fingerprint'] = opts[:'fingerprint'] if !opts[:'fingerprint'].nil?
      query_params[:'dbLinks'] = opts[:'db_links'] if !opts[:'db_links'].nil?
      query_params[:'pubMedIds'] = opts[:'pub_med_ids'] if !opts[:'pub_med_ids'].nil?
      query_params[:'topK'] = opts[:'top_k'] if !opts[:'top_k'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<StructureCandidate>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_structure_candidates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_structure_candidates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
    # Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :fingerprint add molecular fingerprint to StructureCandidates (default to false)
    # @option opts [Boolean] :db_links add dbLinks to StructureCandidates (default to false)
    # @option opts [Boolean] :pub_med_ids add PubMedIds (citation count) to StructureCandidates (default to false)
    # @return [StructureCandidate]
    def get_top_structure_candidate(project_id, compound_id, opts = {})
      data, _status_code, _headers = get_top_structure_candidate_with_http_info(project_id, compound_id, opts)
      data
    end

    # Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
    # Best Scoring StructureCandidate over all molecular formular resutls that belong to the specified  compound/feature (compoundId).
    # @param project_id [String] project-space to read from.
    # @param compound_id [String] compound/feature the formula result belongs to.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :fingerprint add molecular fingerprint to StructureCandidates (default to false)
    # @option opts [Boolean] :db_links add dbLinks to StructureCandidates (default to false)
    # @option opts [Boolean] :pub_med_ids add PubMedIds (citation count) to StructureCandidates (default to false)
    # @return [Array<(StructureCandidate, Integer, Hash)>] StructureCandidate data, response status code and response headers
    def get_top_structure_candidate_with_http_info(project_id, compound_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormulaResultsApi.get_top_structure_candidate ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling FormulaResultsApi.get_top_structure_candidate"
      end
      # verify the required parameter 'compound_id' is set
      if @api_client.config.client_side_validation && compound_id.nil?
        fail ArgumentError, "Missing the required parameter 'compound_id' when calling FormulaResultsApi.get_top_structure_candidate"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}/compounds/{compoundId}/top-structure'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'compoundId' + '}', CGI.escape(compound_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fingerprint'] = opts[:'fingerprint'] if !opts[:'fingerprint'].nil?
      query_params[:'dbLinks'] = opts[:'db_links'] if !opts[:'db_links'].nil?
      query_params[:'pubMedIds'] = opts[:'pub_med_ids'] if !opts[:'pub_med_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StructureCandidate'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"FormulaResultsApi.get_top_structure_candidate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormulaResultsApi#get_top_structure_candidate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
