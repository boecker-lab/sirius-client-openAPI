=begin
#SIRIUS Nightsky API

#REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.

The version of the OpenAPI document: v0.9 on SIRIUS 5.6.3-SNAPSHOT

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module RubySirius
  class ProjectSpacesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Close project-space and remove it from application.
    # Close project-space and remove it from application. Project-space will NOT be deleted from disk.
    # @param project_id [String] unique name/identifier of the  project-space to be closed.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def close_project_space(project_id, opts = {})
      close_project_space_with_http_info(project_id, opts)
      nil
    end

    # Close project-space and remove it from application.
    # Close project-space and remove it from application. Project-space will NOT be deleted from disk.
    # @param project_id [String] unique name/identifier of the  project-space to be closed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def close_project_space_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectSpacesApi.close_project_space ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectSpacesApi.close_project_space"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectSpacesApi.close_project_space",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectSpacesApi#close_project_space\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create and open a new project-space at given location and make it accessible via the given projectId.
    # Create and open a new project-space at given location and make it accessible via the given projectId.
    # @param project_id [String] unique name/identifier that shall be used to access the newly created project-space.
    # @param path_to_project [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path_to_source_project 
    # @option opts [Boolean] :await_import  (default to true)
    # @return [ProjectSpaceId]
    def create_project_space(project_id, path_to_project, opts = {})
      data, _status_code, _headers = create_project_space_with_http_info(project_id, path_to_project, opts)
      data
    end

    # Create and open a new project-space at given location and make it accessible via the given projectId.
    # Create and open a new project-space at given location and make it accessible via the given projectId.
    # @param project_id [String] unique name/identifier that shall be used to access the newly created project-space.
    # @param path_to_project [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path_to_source_project 
    # @option opts [Boolean] :await_import  (default to true)
    # @return [Array<(ProjectSpaceId, Integer, Hash)>] ProjectSpaceId data, response status code and response headers
    def create_project_space_with_http_info(project_id, path_to_project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectSpacesApi.create_project_space ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectSpacesApi.create_project_space"
      end
      # verify the required parameter 'path_to_project' is set
      if @api_client.config.client_side_validation && path_to_project.nil?
        fail ArgumentError, "Missing the required parameter 'path_to_project' when calling ProjectSpacesApi.create_project_space"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pathToProject'] = path_to_project
      query_params[:'pathToSourceProject'] = opts[:'path_to_source_project'] if !opts[:'path_to_source_project'].nil?
      query_params[:'awaitImport'] = opts[:'await_import'] if !opts[:'await_import'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectSpaceId'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectSpacesApi.create_project_space",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectSpacesApi#create_project_space\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get project space info by its projectId.
    # Get project space info by its projectId.
    # @param project_id [String] unique name/identifier tof the project-space to be accessed.
    # @param [Hash] opts the optional parameters
    # @return [ProjectSpaceId]
    def get_project_space(project_id, opts = {})
      data, _status_code, _headers = get_project_space_with_http_info(project_id, opts)
      data
    end

    # Get project space info by its projectId.
    # Get project space info by its projectId.
    # @param project_id [String] unique name/identifier tof the project-space to be accessed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectSpaceId, Integer, Hash)>] ProjectSpaceId data, response status code and response headers
    def get_project_space_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectSpacesApi.get_project_space ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectSpacesApi.get_project_space"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectSpaceId'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectSpacesApi.get_project_space",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectSpacesApi#get_project_space\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all opened project spaces.
    # List all opened project spaces.
    # @param [Hash] opts the optional parameters
    # @return [Array<ProjectSpaceId>]
    def get_project_spaces(opts = {})
      data, _status_code, _headers = get_project_spaces_with_http_info(opts)
      data
    end

    # List all opened project spaces.
    # List all opened project spaces.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProjectSpaceId>, Integer, Hash)>] Array<ProjectSpaceId> data, response status code and response headers
    def get_project_spaces_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectSpacesApi.get_project_spaces ...'
      end
      # resource path
      local_var_path = '/api/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProjectSpaceId>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectSpacesApi.get_project_spaces",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectSpacesApi#get_project_spaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open an existing project-space and make it accessible via the given projectId.
    # Open an existing project-space and make it accessible via the given projectId.
    # @param project_id [String] unique name/identifier that shall be used to access the opened project-space.
    # @param path_to_project [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectSpaceId]
    def open_project_space(project_id, path_to_project, opts = {})
      data, _status_code, _headers = open_project_space_with_http_info(project_id, path_to_project, opts)
      data
    end

    # Open an existing project-space and make it accessible via the given projectId.
    # Open an existing project-space and make it accessible via the given projectId.
    # @param project_id [String] unique name/identifier that shall be used to access the opened project-space.
    # @param path_to_project [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectSpaceId, Integer, Hash)>] ProjectSpaceId data, response status code and response headers
    def open_project_space_with_http_info(project_id, path_to_project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectSpacesApi.open_project_space ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectSpacesApi.open_project_space"
      end
      # verify the required parameter 'path_to_project' is set
      if @api_client.config.client_side_validation && path_to_project.nil?
        fail ArgumentError, "Missing the required parameter 'path_to_project' when calling ProjectSpacesApi.open_project_space"
      end
      # resource path
      local_var_path = '/api/projects/{projectId}'.sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pathToProject'] = path_to_project

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectSpaceId'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ProjectSpacesApi.open_project_space",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectSpacesApi#open_project_space\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
