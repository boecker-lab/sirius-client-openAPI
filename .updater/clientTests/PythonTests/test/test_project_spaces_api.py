# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.  # noqa: E501

    OpenAPI spec version: v0.9 on SIRIUS 5.6.3-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest
import os
import shutil
from PySirius import PySiriusAPI
from PySirius.rest import ApiException

os.makedirs("temp_1")
os.makedirs("temp_2")
address = "http://localhost"
port = 8080
api = PySiriusAPI(address=address, port=port)
api.get_ProjectSpacesApi().create_project_space("temp1","temp_1")
api.get_ProjectSpacesApi().create_project_space("temp2","temp_2")

class TestProjectSpacesApi(unittest.TestCase):
    """ProjectSpacesApi unit test stubs"""

    def setUp(self):
        pass
        
    def tearDown(self):
        pass

    def test_close_project_space(self):
        """Test case for close_project_space

        Close project-space and remove it from application.  # noqa: E501
        """
        api.get_ProjectSpacesApi().close_project_space("temp2")

    def test_create_project_space(self):
        """Already tested in setUp"""
        self.assertTrue(True)

    def test_get_project_space(self):
        """Test case for get_project_space

        Get project space info by its projectId.  # noqa: E501
        """
        api.get_ProjectSpacesApi().get_project_space("temp1")

    def test_get_project_spaces(self):
        """Test case for get_project_spaces

        List all opened project spaces.  # noqa: E501
        """
        api.get_ProjectSpacesApi().get_project_spaces()

    def test_open_project_space(self):
        """Test case for open_project_space

        Open an existing project-space and make it accessible via the given projectId.  # noqa: E501
        """
        api.get_ProjectSpacesApi().open_project_space("temp3","temp_1")


if __name__ == '__main__':
    unittest.main()

shutil.rmtree("temp_1")
shutil.rmtree("temp_2")