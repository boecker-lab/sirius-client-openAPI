# coding: utf-8

"""
    SIRIUS Nightsky API

    REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6.0.0-SNAPSHOT

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import os
import unittest
import shutil

from PySirius.api_response import ApiResponse
from PySirius.api.projects_api import ProjectsApi
from PySirius.models.project_info import ProjectInfo


class TestProjectsApi(unittest.TestCase):
    """ProjectsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ProjectsApi()
        # equals test_create_project_space
        self.project_id = "test_projects_api"
        self.path_to_project = f"{os.environ.get('HOME')}/test_projects_api_dir"
        self.api.create_project_space(self.project_id, self.path_to_project)

    def tearDown(self) -> None:
        # equals test_close_project_space
        self.api.close_project_space(self.project_id)
        shutil.rmtree(self.path_to_project)

    def test_close_project_space(self) -> None:
        """Test case for close_project_space

        Close project-space and remove it from application.
        """
        pass

    def test_copy_project_space(self) -> None:
        """Test case for copy_project_space

        Move an existing (opened) project-space to another location.
        """
        copy_project_id = "test_copy_project_space_copied"
        copy_path_to_project = f"{os.environ.get('HOME')}/test_copy_project_space_dir_copied"
        response = self.api.copy_project_space(self.project_id, copy_project_id, copy_path_to_project)

        self.api.close_project_space(copy_project_id)
        shutil.rmtree(copy_path_to_project)

        self.assertIsInstance(response, ProjectInfo)


    def test_create_project_space(self) -> None:
        """Test case for create_project_space

        Create and open a new project-space at given location and make it accessible via the given projectId.
        """
        pass


    def test_get_canopus_classy_fire_data(self) -> None:
        """Test case for get_canopus_classy_fire_data

        Get CANOPUS prediction vector definition for ClassyFire classes
        """
        response = self.api.get_canopus_classy_fire_data(self.project_id, 0)
        self.assertIsInstance(response, str)


    def test_get_canopus_npc_data(self) -> None:
        """Test case for get_canopus_npc_data

        Get CANOPUS prediction vector definition for NPC classes
        """
        response = self.api.get_canopus_npc_data(self.project_id, 0)
        self.assertIsInstance(response, str)


    def test_get_finger_id_data(self) -> None:
        """Test case for get_finger_id_data

        Get CSI:FingerID fingerprint (prediction vector) definition
        """
        response = self.api.get_finger_id_data(self.project_id, 0)
        self.assertIsInstance(response, str)


    def test_get_project_space(self) -> None:
        """Test case for get_project_space

        Get project space info by its projectId.
        """
        response = self.api.get_project_space(self.project_id)
        self.assertIsInstance(response, ProjectInfo)


    def test_get_project_spaces(self) -> None:
        """Test case for get_project_spaces

        List opened project spaces.
        """
        response = self.api.get_project_spaces()
        self.assertIsInstance(response, list)


    def test_open_project_space(self) -> None:
        """Test case for open_project_space

        Open an existing project-space and make it accessible via the given projectId.
        """
        self.api.close_project_space(self.project_id)
        response = self.api.open_project_space(self.project_id, self.path_to_project)
        self.assertIsInstance(response, ProjectInfo)


if __name__ == '__main__':
    unittest.main()
